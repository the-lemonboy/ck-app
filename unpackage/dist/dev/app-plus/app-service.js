if (typeof Promise !== "undefined" && !Promise.prototype.finally) {
  Promise.prototype.finally = function(callback) {
    const promise = this.constructor;
    return this.then(
      (value) => promise.resolve(callback()).then(() => value),
      (reason) => promise.resolve(callback()).then(() => {
        throw reason;
      })
    );
  };
}
;
if (typeof uni !== "undefined" && uni && uni.requireGlobal) {
  const global2 = uni.requireGlobal();
  ArrayBuffer = global2.ArrayBuffer;
  Int8Array = global2.Int8Array;
  Uint8Array = global2.Uint8Array;
  Uint8ClampedArray = global2.Uint8ClampedArray;
  Int16Array = global2.Int16Array;
  Uint16Array = global2.Uint16Array;
  Int32Array = global2.Int32Array;
  Uint32Array = global2.Uint32Array;
  Float32Array = global2.Float32Array;
  Float64Array = global2.Float64Array;
  BigInt64Array = global2.BigInt64Array;
  BigUint64Array = global2.BigUint64Array;
}
;
if (uni.restoreGlobal) {
  uni.restoreGlobal(Vue, weex, plus, setTimeout, clearTimeout, setInterval, clearInterval);
}
(function(vue) {
  "use strict";
  const ON_SHOW = "onShow";
  const ON_LAUNCH = "onLaunch";
  const ON_LOAD = "onLoad";
  const ON_READY = "onReady";
  const ON_PULL_DOWN_REFRESH = "onPullDownRefresh";
  function formatAppLog(type2, filename, ...args) {
    if (uni.__log__) {
      uni.__log__(type2, filename, ...args);
    } else {
      console[type2].apply(console, [...args, filename]);
    }
  }
  function resolveEasycom(component, easycom) {
    return typeof component === "string" ? easycom : component;
  }
  const createHook = (lifecycle) => (hook, target = vue.getCurrentInstance()) => {
    !vue.isInSSRComponentSetup && vue.injectHook(lifecycle, hook, target);
  };
  const onShow = /* @__PURE__ */ createHook(ON_SHOW);
  const onLaunch = /* @__PURE__ */ createHook(ON_LAUNCH);
  const onLoad = /* @__PURE__ */ createHook(ON_LOAD);
  const onReady = /* @__PURE__ */ createHook(ON_READY);
  const onPullDownRefresh = /* @__PURE__ */ createHook(ON_PULL_DOWN_REFRESH);
  const _export_sfc = (sfc, props) => {
    const target = sfc.__vccOpts || sfc;
    for (const [key, val] of props) {
      target[key] = val;
    }
    return target;
  };
  const _sfc_main$1g = {
    name: "u-icon",
    emits: ["click", "touchstart"],
    props: {
      // 图标类名
      name: {
        type: String,
        default: ""
      },
      // 图标颜色，可接受主题色
      color: {
        type: String,
        default: ""
      },
      // 字体大小，单位rpx
      size: {
        type: [Number, String],
        default: "inherit"
      },
      // 是否显示粗体
      bold: {
        type: Boolean,
        default: false
      },
      // 点击图标的时候传递事件出去的index（用于区分点击了哪一个）
      index: {
        type: [Number, String],
        default: ""
      },
      // 触摸图标时的类名
      hoverClass: {
        type: String,
        default: ""
      },
      // 自定义扩展前缀，方便用户扩展自己的图标库
      customPrefix: {
        type: String,
        default: "uicon"
      },
      // 图标右边或者下面的文字
      label: {
        type: [String, Number],
        default: ""
      },
      // label的位置，只能右边或者下边
      labelPos: {
        type: String,
        default: "right"
      },
      // label的大小
      labelSize: {
        type: [String, Number],
        default: "28"
      },
      // label的颜色
      labelColor: {
        type: String,
        default: "#606266"
      },
      // label与图标的距离(横向排列)
      marginLeft: {
        type: [String, Number],
        default: "6"
      },
      // label与图标的距离(竖向排列)
      marginTop: {
        type: [String, Number],
        default: "6"
      },
      // label与图标的距离(竖向排列)
      marginRight: {
        type: [String, Number],
        default: "6"
      },
      // label与图标的距离(竖向排列)
      marginBottom: {
        type: [String, Number],
        default: "6"
      },
      // 图片的mode
      imgMode: {
        type: String,
        default: "widthFix"
      },
      // 自定义样式
      customStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 用于显示图片小图标时，图片的宽度
      width: {
        type: [String, Number],
        default: ""
      },
      // 用于显示图片小图标时，图片的高度
      height: {
        type: [String, Number],
        default: ""
      },
      // 用于解决某些情况下，让图标垂直居中的用途
      top: {
        type: [String, Number],
        default: 0
      },
      // 是否为DecimalIcon
      showDecimalIcon: {
        type: Boolean,
        default: false
      },
      // 背景颜色，可接受主题色，仅Decimal时有效
      inactiveColor: {
        type: String,
        default: "#ececec"
      },
      // 显示的百分比，仅Decimal时有效
      percent: {
        type: [Number, String],
        default: "50"
      }
    },
    computed: {
      customClass() {
        let classes = [];
        let { customPrefix, name } = this;
        let index = name.indexOf("-icon-");
        if (index > -1) {
          customPrefix = name.substring(0, index + 5);
          classes.push(name);
        } else {
          classes.push(`${customPrefix}-${name}`);
        }
        if (customPrefix === "uicon") {
          classes.push("u-iconfont");
        } else {
          classes.push(customPrefix);
        }
        if (this.showDecimalIcon && this.inactiveColor && this.$u.config.type.includes(this.inactiveColor)) {
          classes.push("u-icon__icon--" + this.inactiveColor);
        } else if (this.color && this.$u.config.type.includes(this.color))
          classes.push("u-icon__icon--" + this.color);
        return classes;
      },
      iconStyle() {
        let style = {};
        style = {
          fontSize: this.size == "inherit" ? "inherit" : this.$u.addUnit(this.size),
          fontWeight: this.bold ? "bold" : "normal",
          // 某些特殊情况需要设置一个到顶部的距离，才能更好的垂直居中
          top: this.$u.addUnit(this.top)
        };
        if (this.showDecimalIcon && this.inactiveColor && !this.$u.config.type.includes(this.inactiveColor)) {
          style.color = this.inactiveColor;
        } else if (this.color && !this.$u.config.type.includes(this.color))
          style.color = this.color;
        return style;
      },
      // 判断传入的name属性，是否图片路径，只要带有"/"均认为是图片形式
      isImg() {
        return this.name.indexOf("/") !== -1;
      },
      imgStyle() {
        let style = {};
        style.width = this.width ? this.$u.addUnit(this.width) : this.$u.addUnit(this.size);
        style.height = this.height ? this.$u.addUnit(this.height) : this.$u.addUnit(this.size);
        return style;
      },
      decimalIconStyle() {
        let style = {};
        style = {
          fontSize: this.size == "inherit" ? "inherit" : this.$u.addUnit(this.size),
          fontWeight: this.bold ? "bold" : "normal",
          // 某些特殊情况需要设置一个到顶部的距离，才能更好的垂直居中
          top: this.$u.addUnit(this.top),
          width: this.percent + "%"
        };
        if (this.color && !this.$u.config.type.includes(this.color))
          style.color = this.color;
        return style;
      },
      decimalIconClass() {
        let classes = [];
        classes.push(this.customPrefix + "-" + this.name);
        if (this.customPrefix == "uicon") {
          classes.push("u-iconfont");
        } else {
          classes.push(this.customPrefix);
        }
        if (this.color && this.$u.config.type.includes(this.color))
          classes.push("u-icon__icon--" + this.color);
        else
          classes.push("u-icon__icon--primary");
        return classes;
      }
    },
    methods: {
      click() {
        this.$emit("click", this.index);
      },
      touchstart() {
        this.$emit("touchstart", this.index);
      }
    }
  };
  function _sfc_render$D(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        style: vue.normalizeStyle([$props.customStyle]),
        class: vue.normalizeClass(["u-icon", ["u-icon--" + $props.labelPos]]),
        onClick: _cache[1] || (_cache[1] = (...args) => $options.click && $options.click(...args))
      },
      [
        $options.isImg ? (vue.openBlock(), vue.createElementBlock("image", {
          key: 0,
          class: "u-icon__img",
          src: $props.name,
          mode: $props.imgMode,
          style: vue.normalizeStyle([$options.imgStyle])
        }, null, 12, ["src", "mode"])) : (vue.openBlock(), vue.createElementBlock("view", {
          key: 1,
          class: vue.normalizeClass(["u-icon__icon", $options.customClass]),
          style: vue.normalizeStyle([$options.iconStyle]),
          "hover-class": $props.hoverClass,
          onTouchstart: _cache[0] || (_cache[0] = (...args) => $options.touchstart && $options.touchstart(...args))
        }, [
          $props.showDecimalIcon ? (vue.openBlock(), vue.createElementBlock("text", {
            key: 0,
            style: vue.normalizeStyle([$options.decimalIconStyle]),
            class: vue.normalizeClass([$options.decimalIconClass, "u-icon__decimal"]),
            "hover-class": $props.hoverClass
          }, null, 14, ["hover-class"])) : vue.createCommentVNode("v-if", true)
        ], 46, ["hover-class"])),
        vue.createCommentVNode(' 这里进行空字符串判断，如果仅仅是v-if="label"，可能会出现传递0的时候，结果也无法显示，微信小程序不传值默认为null，故需要增加null的判断 '),
        $props.label !== "" && $props.label !== null ? (vue.openBlock(), vue.createElementBlock(
          "text",
          {
            key: 2,
            class: "u-icon__label",
            style: vue.normalizeStyle({
              color: $props.labelColor,
              fontSize: _ctx.$u.addUnit($props.labelSize),
              marginLeft: $props.labelPos == "right" ? _ctx.$u.addUnit($props.marginLeft) : 0,
              marginTop: $props.labelPos == "bottom" ? _ctx.$u.addUnit($props.marginTop) : 0,
              marginRight: $props.labelPos == "left" ? _ctx.$u.addUnit($props.marginRight) : 0,
              marginBottom: $props.labelPos == "top" ? _ctx.$u.addUnit($props.marginBottom) : 0
            })
          },
          vue.toDisplayString($props.label),
          5
          /* TEXT, STYLE */
        )) : vue.createCommentVNode("v-if", true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_0$6 = /* @__PURE__ */ _export_sfc(_sfc_main$1g, [["render", _sfc_render$D], ["__scopeId", "data-v-5de67484"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-icon/u-icon.vue"]]);
  const _sfc_main$1f = {
    name: "u-search",
    emits: ["update:modelValue", "input", "change", "search", "custom", "clear", "focus", "blur"],
    props: {
      // 输入框的初始化内容
      value: {
        type: String,
        default: ""
      },
      modelValue: {
        type: String,
        default: ""
      },
      // 搜索框形状，round-圆形，square-方形
      shape: {
        type: String,
        default: "round"
      },
      // 搜索框背景色，默认值#f2f2f2
      bgColor: {
        type: String,
        default: "#f2f2f2"
      },
      // 占位提示文字
      placeholder: {
        type: String,
        default: "请输入关键字"
      },
      // 是否启用清除控件
      clearabled: {
        type: Boolean,
        default: true
      },
      // 是否自动聚焦
      focus: {
        type: Boolean,
        default: false
      },
      // 是否在搜索框右侧显示取消按钮
      showAction: {
        type: Boolean,
        default: true
      },
      // 右边控件的样式
      actionStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 取消按钮文字
      actionText: {
        type: String,
        default: "搜索"
      },
      // 输入框内容对齐方式，可选值为 left|center|right
      inputAlign: {
        type: String,
        default: "left"
      },
      // 是否启用输入框
      disabled: {
        type: Boolean,
        default: false
      },
      // 开启showAction时，是否在input获取焦点时才显示
      animation: {
        type: Boolean,
        default: false
      },
      // 边框颜色，只要配置了颜色，才会有边框
      borderColor: {
        type: String,
        default: "none"
      },
      // 搜索框高度，单位rpx
      height: {
        type: [Number, String],
        default: 64
      },
      // input输入框的样式，可以定义文字颜色，大小等，对象形式
      inputStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 输入框最大能输入的长度，-1为不限制长度(来自uniapp文档)
      maxlength: {
        type: [Number, String],
        default: "-1"
      },
      // 搜索图标的颜色，默认同输入框字体颜色
      searchIconColor: {
        type: String,
        default: ""
      },
      // 输入框字体颜色
      color: {
        type: String,
        default: "#606266"
      },
      // placeholder的颜色
      placeholderColor: {
        type: String,
        default: "#909399"
      },
      // 组件与其他上下左右元素之间的距离，带单位的字符串形式，如"30rpx"、"30rpx 20rpx"等写法
      margin: {
        type: String,
        default: "0"
      },
      // 左边输入框的图标，可以为uView图标名称或图片路径
      searchIcon: {
        type: String,
        default: "search"
      }
    },
    data() {
      return {
        keyword: "",
        showClear: false,
        // 是否显示右边的清除图标
        show: false,
        // 标记input当前状态是否处于聚焦中，如果是，才会显示右侧的清除控件
        focused: this.focus
        // 绑定输入框的值
        // inputValue: this.value
      };
    },
    watch: {
      keyword(nVal) {
        this.$emit("input", nVal);
        this.$emit("update:modelValue", nVal);
        this.$emit("change", nVal);
      },
      valueCom: {
        immediate: true,
        handler(nVal) {
          this.keyword = nVal;
        }
      }
    },
    computed: {
      valueCom() {
        return this.modelValue;
      },
      showActionBtn() {
        if (!this.animation && this.showAction)
          return true;
        else
          return false;
      },
      // 样式，根据用户传入的颜色值生成，如果不传入，默认为none
      borderStyle() {
        if (this.borderColor)
          return `1px solid ${this.borderColor}`;
        else
          return "none";
      }
    },
    methods: {
      // 目前HX2.6.9 v-model双向绑定无效，故监听input事件获取输入框内容的变化
      inputChange(e) {
        this.keyword = e.detail.value;
      },
      // 清空输入
      // 也可以作为用户通过this.$refs形式调用清空输入框内容
      clear() {
        this.keyword = "";
        this.$nextTick(() => {
          this.$emit("clear");
        });
      },
      // 确定搜索
      search(e) {
        this.$emit("search", e.detail.value);
        try {
          uni.hideKeyboard();
        } catch (e2) {
        }
      },
      // 点击右边自定义按钮的事件
      custom() {
        this.$emit("custom", this.keyword);
        try {
          uni.hideKeyboard();
        } catch (e) {
        }
      },
      // 获取焦点
      getFocus() {
        this.focused = true;
        if (this.animation && this.showAction)
          this.show = true;
        this.$emit("focus", this.keyword);
      },
      // 失去焦点
      blur() {
        setTimeout(() => {
          this.focused = false;
        }, 100);
        this.show = false;
        this.$emit("blur", this.keyword);
      },
      // 点击搜索框，只有disabled=true时才发出事件，因为禁止了输入，意味着是想跳转真正的搜索页
      clickHandler() {
        if (this.disabled)
          this.$emit("click");
      }
    }
  };
  function _sfc_render$C(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_icon = resolveEasycom(vue.resolveDynamicComponent("u-icon"), __easycom_0$6);
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: "u-search",
        onClick: _cache[6] || (_cache[6] = (...args) => $options.clickHandler && $options.clickHandler(...args)),
        style: vue.normalizeStyle({
          margin: $props.margin
        })
      },
      [
        vue.createElementVNode(
          "view",
          {
            class: "u-content",
            style: vue.normalizeStyle({
              backgroundColor: $props.bgColor,
              borderRadius: $props.shape == "round" ? "100rpx" : "10rpx",
              border: $options.borderStyle,
              height: $props.height + "rpx"
            })
          },
          [
            vue.createElementVNode("view", { class: "u-icon-wrap" }, [
              vue.createVNode(_component_u_icon, {
                class: "u-clear-icon",
                size: 30,
                name: $props.searchIcon,
                color: $props.searchIconColor ? $props.searchIconColor : $props.color
              }, null, 8, ["name", "color"])
            ]),
            vue.createElementVNode("input", {
              "confirm-type": "search",
              onBlur: _cache[0] || (_cache[0] = (...args) => $options.blur && $options.blur(...args)),
              value: $options.valueCom,
              onConfirm: _cache[1] || (_cache[1] = (...args) => $options.search && $options.search(...args)),
              onInput: _cache[2] || (_cache[2] = (...args) => $options.inputChange && $options.inputChange(...args)),
              disabled: $props.disabled,
              onFocus: _cache[3] || (_cache[3] = (...args) => $options.getFocus && $options.getFocus(...args)),
              focus: $props.focus,
              maxlength: $props.maxlength,
              "placeholder-class": "u-placeholder-class",
              placeholder: $props.placeholder,
              "placeholder-style": `color: ${$props.placeholderColor}`,
              class: "u-input",
              type: "text",
              style: vue.normalizeStyle([{
                textAlign: $props.inputAlign,
                color: $props.color,
                backgroundColor: $props.bgColor
              }, $props.inputStyle])
            }, null, 44, ["value", "disabled", "focus", "maxlength", "placeholder", "placeholder-style"]),
            $data.keyword && $props.clearabled && $data.focused ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "u-close-wrap",
              onClick: _cache[4] || (_cache[4] = (...args) => $options.clear && $options.clear(...args))
            }, [
              vue.createVNode(_component_u_icon, {
                class: "u-clear-icon",
                name: "close-circle-fill",
                size: "34",
                color: "#c0c4cc"
              })
            ])) : vue.createCommentVNode("v-if", true)
          ],
          4
          /* STYLE */
        ),
        vue.createElementVNode(
          "view",
          {
            style: vue.normalizeStyle([$props.actionStyle]),
            class: vue.normalizeClass(["u-action", [$options.showActionBtn || $data.show ? "u-action-active" : ""]]),
            onClick: _cache[5] || (_cache[5] = vue.withModifiers((...args) => $options.custom && $options.custom(...args), ["stop", "prevent"]))
          },
          vue.toDisplayString($props.actionText),
          7
          /* TEXT, CLASS, STYLE */
        )
      ],
      4
      /* STYLE */
    );
  }
  const __easycom_1$7 = /* @__PURE__ */ _export_sfc(_sfc_main$1f, [["render", _sfc_render$C], ["__scopeId", "data-v-3cb29fc1"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-search/u-search.vue"]]);
  const _sfc_main$1e = {
    name: "u-cell-item",
    emits: ["click"],
    props: {
      // 左侧图标名称(只能uView内置图标)，或者图标src
      icon: {
        type: String,
        default: ""
      },
      // 左侧标题
      title: {
        type: [String, Number],
        default: ""
      },
      // 右侧内容
      value: {
        type: [String, Number],
        default: ""
      },
      // 标题下方的描述信息
      label: {
        type: [String, Number],
        default: ""
      },
      // 是否显示下边框
      borderBottom: {
        type: Boolean,
        default: true
      },
      // 是否显示上边框
      borderTop: {
        type: Boolean,
        default: false
      },
      // 多个cell中，中间的cell显示下划线时，下划线是否给一个到左边的距离
      // 1.4.0版本废除此参数，默认边框由border-top和border-bottom提供，此参数会造成干扰
      // borderGap: {
      // 	type: Boolean,
      // 	default: true
      // },
      // 是否开启点击反馈，即点击时cell背景为灰色，none为无效果
      hoverClass: {
        type: String,
        default: "u-cell-hover"
      },
      // 是否显示右侧箭头
      arrow: {
        type: Boolean,
        default: true
      },
      // 内容是否垂直居中
      center: {
        type: Boolean,
        default: false
      },
      // 是否显示左边表示必填的星号
      required: {
        type: Boolean,
        default: false
      },
      // 标题的宽度，单位rpx
      titleWidth: {
        type: [Number, String],
        default: ""
      },
      // 右侧箭头方向，可选值：right|up|down，默认为right
      arrowDirection: {
        type: String,
        default: "right"
      },
      // 控制标题的样式
      titleStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 右侧显示内容的样式
      valueStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 描述信息的样式
      labelStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 背景颜色
      bgColor: {
        type: String,
        default: "transparent"
      },
      // 用于识别被点击的是第几个cell
      index: {
        type: [String, Number],
        default: ""
      },
      // 是否使用lable插槽
      useLabelSlot: {
        type: Boolean,
        default: false
      },
      // 左边图标的大小，单位rpx，只对传入icon字段时有效
      iconSize: {
        type: [Number, String],
        default: 34
      },
      // 左边图标的样式，对象形式
      iconStyle: {
        type: Object,
        default() {
          return {};
        }
      }
    },
    data() {
      return {};
    },
    computed: {
      arrowStyle() {
        let style = {};
        if (this.arrowDirection == "up")
          style.transform = "rotate(-90deg)";
        else if (this.arrowDirection == "down")
          style.transform = "rotate(90deg)";
        else
          style.transform = "rotate(0deg)";
        return style;
      }
    },
    methods: {
      click() {
        this.$emit("click", this.index);
      }
    }
  };
  function _sfc_render$B(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_icon = resolveEasycom(vue.resolveDynamicComponent("u-icon"), __easycom_0$6);
    return vue.openBlock(), vue.createElementBlock("view", {
      onClick: _cache[0] || (_cache[0] = (...args) => $options.click && $options.click(...args)),
      class: vue.normalizeClass(["u-cell", { "u-border-bottom": $props.borderBottom, "u-border-top": $props.borderTop, "u-col-center": $props.center, "u-cell--required": $props.required }]),
      "hover-stay-time": "150",
      "hover-class": $props.hoverClass,
      style: vue.normalizeStyle({
        backgroundColor: $props.bgColor
      })
    }, [
      $props.icon ? (vue.openBlock(), vue.createBlock(_component_u_icon, {
        key: 0,
        size: $props.iconSize,
        name: $props.icon,
        "custom-style": $props.iconStyle,
        class: "u-cell__left-icon-wrap"
      }, null, 8, ["size", "name", "custom-style"])) : (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "u-flex"
      }, [
        vue.renderSlot(_ctx.$slots, "icon", {}, void 0, true)
      ])),
      vue.createElementVNode(
        "view",
        {
          class: "u-cell_title",
          style: vue.normalizeStyle([
            {
              width: $props.titleWidth ? $props.titleWidth + "rpx" : "auto"
            },
            $props.titleStyle
          ])
        },
        [
          $props.title !== "" ? (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            { key: 0 },
            [
              vue.createTextVNode(
                vue.toDisplayString($props.title),
                1
                /* TEXT */
              )
            ],
            64
            /* STABLE_FRAGMENT */
          )) : vue.renderSlot(_ctx.$slots, "title", { key: 1 }, void 0, true),
          $props.label || _ctx.$slots.label ? (vue.openBlock(), vue.createElementBlock(
            "view",
            {
              key: 2,
              class: "u-cell__label",
              style: vue.normalizeStyle([$props.labelStyle])
            },
            [
              $props.label !== "" ? (vue.openBlock(), vue.createElementBlock(
                vue.Fragment,
                { key: 0 },
                [
                  vue.createTextVNode(
                    vue.toDisplayString($props.label),
                    1
                    /* TEXT */
                  )
                ],
                64
                /* STABLE_FRAGMENT */
              )) : vue.renderSlot(_ctx.$slots, "label", { key: 1 }, void 0, true)
            ],
            4
            /* STYLE */
          )) : vue.createCommentVNode("v-if", true)
        ],
        4
        /* STYLE */
      ),
      vue.createElementVNode(
        "view",
        {
          class: "u-cell__value",
          style: vue.normalizeStyle([$props.valueStyle])
        },
        [
          $props.value !== "" ? (vue.openBlock(), vue.createElementBlock(
            vue.Fragment,
            { key: 0 },
            [
              vue.createTextVNode(
                vue.toDisplayString($props.value),
                1
                /* TEXT */
              )
            ],
            64
            /* STABLE_FRAGMENT */
          )) : vue.renderSlot(_ctx.$slots, "default", { key: 1 }, void 0, true)
        ],
        4
        /* STYLE */
      ),
      _ctx.$slots["right-icon"] ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 2,
        class: "u-flex u-cell_right"
      }, [
        vue.renderSlot(_ctx.$slots, "right-icon", {}, void 0, true)
      ])) : vue.createCommentVNode("v-if", true),
      $props.arrow ? (vue.openBlock(), vue.createBlock(_component_u_icon, {
        key: 3,
        name: "arrow-right",
        style: vue.normalizeStyle([$options.arrowStyle]),
        class: "u-icon-wrap u-cell__right-icon-wrap"
      }, null, 8, ["style"])) : vue.createCommentVNode("v-if", true)
    ], 14, ["hover-class"]);
  }
  const __easycom_1$6 = /* @__PURE__ */ _export_sfc(_sfc_main$1e, [["render", _sfc_render$B], ["__scopeId", "data-v-e5554f60"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-cell-item/u-cell-item.vue"]]);
  const _sfc_main$1d = {
    name: "u-cell-group",
    props: {
      // 分组标题
      title: {
        type: String,
        default: ""
      },
      // 是否显示分组list上下边框
      border: {
        type: Boolean,
        default: true
      },
      // 分组标题的样式，对象形式，注意驼峰属性写法
      // 类似 {'font-size': '24rpx'} 和 {'fontSize': '24rpx'}
      titleStyle: {
        type: Object,
        default() {
          return {};
        }
      }
    },
    data() {
      return {
        index: 0
      };
    }
  };
  function _sfc_render$A(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "u-cell-box" }, [
      $props.title ? (vue.openBlock(), vue.createElementBlock(
        "view",
        {
          key: 0,
          class: "u-cell-title",
          style: vue.normalizeStyle([$props.titleStyle])
        },
        vue.toDisplayString($props.title),
        5
        /* TEXT, STYLE */
      )) : vue.createCommentVNode("v-if", true),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["u-cell-item-box", { "u-border-bottom u-border-top": $props.border }])
        },
        [
          vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
        ],
        2
        /* CLASS */
      )
    ]);
  }
  const __easycom_2$5 = /* @__PURE__ */ _export_sfc(_sfc_main$1d, [["render", _sfc_render$A], ["__scopeId", "data-v-dd1e88cb"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-cell-group/u-cell-group.vue"]]);
  const _sfc_main$1c = {
    name: "u-dropdown-item",
    emits: ["update:modelValue", "input", "change"],
    props: {
      // 当前选中项的value值
      value: {
        type: [Number, String, Array],
        default: ""
      },
      modelValue: {
        type: [Number, String, Array],
        default: ""
      },
      // 菜单项标题
      title: {
        type: [String, Number],
        default: ""
      },
      // 选项数据，如果传入了默认slot，此参数无效
      options: {
        type: Array,
        default() {
          return [];
        }
      },
      // 是否禁用此菜单项
      disabled: {
        type: Boolean,
        default: false
      },
      // 下拉弹窗的高度
      height: {
        type: [Number, String],
        default: "auto"
      }
    },
    data() {
      return {
        active: false,
        // 当前项是否处于展开状态
        activeColor: "#2979ff",
        // 激活时左边文字和右边对勾图标的颜色
        inactiveColor: "#606266"
        // 未激活时左边文字和右边对勾图标的颜色
      };
    },
    computed: {
      valueCom() {
        return this.modelValue;
      },
      // 监听props是否发生了变化，有些值需要传递给父组件u-dropdown，无法双向绑定
      propsChange() {
        return `${this.title}-${this.disabled}`;
      }
    },
    watch: {
      propsChange(n) {
        if (this.parent)
          this.parent.init();
      }
    },
    created() {
      this.parent = false;
    },
    methods: {
      init() {
        let parent = this.$u.$parent.call(this, "u-dropdown");
        if (parent) {
          this.parent = parent;
          this.activeColor = parent.activeColor;
          this.inactiveColor = parent.inactiveColor;
          let exist = parent.children.find((val) => {
            return this === val;
          });
          if (!exist)
            parent.children.push(this);
          if (parent.children.length == 1)
            this.active = true;
          parent.menuList.push({
            title: this.title,
            disabled: this.disabled
          });
        }
      },
      // cell被点击
      cellClick(value) {
        this.$emit("input", value);
        this.$emit("update:modelValue", value);
        this.parent.close();
        this.$emit("change", value);
      }
    },
    mounted() {
      this.init();
    }
  };
  function _sfc_render$z(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_icon = resolveEasycom(vue.resolveDynamicComponent("u-icon"), __easycom_0$6);
    const _component_u_cell_item = resolveEasycom(vue.resolveDynamicComponent("u-cell-item"), __easycom_1$6);
    const _component_u_cell_group = resolveEasycom(vue.resolveDynamicComponent("u-cell-group"), __easycom_2$5);
    return $data.active ? (vue.openBlock(), vue.createElementBlock(
      "view",
      {
        key: 0,
        class: "u-dropdown-item",
        onTouchmove: vue.withModifiers(() => {
        }, ["stop", "prevent"]),
        onClick: vue.withModifiers(() => {
        }, ["stop", "prevent"])
      },
      [
        !_ctx.$slots.default && !_ctx.$slots.$default ? (vue.openBlock(), vue.createElementBlock(
          "scroll-view",
          {
            key: 0,
            "scroll-y": "true",
            style: vue.normalizeStyle({
              height: _ctx.$u.addUnit($props.height)
            })
          },
          [
            vue.createElementVNode("view", { class: "u-dropdown-item__options" }, [
              vue.createVNode(_component_u_cell_group, null, {
                default: vue.withCtx(() => [
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList($props.options, (item, index) => {
                      return vue.openBlock(), vue.createBlock(_component_u_cell_item, {
                        onClick: ($event) => $options.cellClick(item.value),
                        arrow: false,
                        title: item.label,
                        key: index,
                        "title-style": {
                          color: $props.value === item.value ? $data.activeColor : $data.inactiveColor
                        }
                      }, {
                        default: vue.withCtx(() => [
                          $options.valueCom === item.value ? (vue.openBlock(), vue.createBlock(_component_u_icon, {
                            key: 0,
                            name: "checkbox-mark",
                            color: $data.activeColor,
                            size: "32"
                          }, null, 8, ["color"])) : vue.createCommentVNode("v-if", true)
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["onClick", "title", "title-style"]);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  ))
                ]),
                _: 1
                /* STABLE */
              })
            ])
          ],
          4
          /* STYLE */
        )) : vue.renderSlot(_ctx.$slots, "default", { key: 1 }, void 0, true)
      ],
      32
      /* NEED_HYDRATION */
    )) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_1$5 = /* @__PURE__ */ _export_sfc(_sfc_main$1c, [["render", _sfc_render$z], ["__scopeId", "data-v-c9b1ed30"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-dropdown-item/u-dropdown-item.vue"]]);
  const _sfc_main$1b = {
    name: "u-dropdown",
    emits: ["open", "close"],
    props: {
      // 菜单标题和选项的激活态颜色
      activeColor: {
        type: String,
        default: "#2979ff"
      },
      // 菜单标题和选项的未激活态颜色
      inactiveColor: {
        type: String,
        default: "#606266"
      },
      // 点击遮罩是否关闭菜单
      closeOnClickMask: {
        type: Boolean,
        default: true
      },
      // 点击当前激活项标题是否关闭菜单
      closeOnClickSelf: {
        type: Boolean,
        default: true
      },
      // 过渡时间
      duration: {
        type: [Number, String],
        default: 300
      },
      // 标题菜单的高度，单位任意，数值默认为rpx单位
      height: {
        type: [Number, String],
        default: 80
      },
      // 是否显示下边框
      borderBottom: {
        type: Boolean,
        default: false
      },
      // 标题的字体大小
      titleSize: {
        type: [Number, String],
        default: 28
      },
      // 下拉出来的内容部分的圆角值
      borderRadius: {
        type: [Number, String],
        default: 0
      },
      // 菜单右侧的icon图标
      menuIcon: {
        type: String,
        default: "arrow-down"
      },
      // 菜单右侧图标的大小
      menuIconSize: {
        type: [Number, String],
        default: 26
      }
    },
    data() {
      return {
        showDropdown: true,
        // 是否打开下来菜单,
        menuList: [],
        // 显示的菜单
        active: false,
        // 下拉菜单的状态
        // 当前是第几个菜单处于激活状态，小程序中此处不能写成false或者""，否则后续将current赋值为0，
        // 无能的TX没有使用===而是使用==判断，导致程序认为前后二者没有变化，从而不会触发视图更新
        current: 99999,
        // 外层内容的样式，初始时处于底层，且透明
        contentStyle: {
          zIndex: -1,
          opacity: 0
        },
        // 让某个菜单保持高亮的状态
        highlightIndex: 99999,
        contentHeight: 0
      };
    },
    computed: {
      // 下拉出来部分的样式
      popupStyle() {
        let style = {};
        style.transform = `translateY(${this.active ? 0 : "-100%"})`;
        style["transition-duration"] = this.duration / 1e3 + "s";
        style.borderRadius = `0 0 ${this.$u.addUnit(this.borderRadius)} ${this.$u.addUnit(this.borderRadius)}`;
        return style;
      }
    },
    created() {
      this.children = [];
    },
    mounted() {
      this.getContentHeight();
    },
    methods: {
      init() {
        this.menuList = [];
        this.children.map((child) => {
          child.init();
        });
      },
      // 点击菜单
      menuClick(index) {
        if (this.menuList[index].disabled)
          return;
        if (index === this.current && this.closeOnClickSelf) {
          this.close();
          setTimeout(() => {
            this.children[index].active = false;
          }, this.duration);
          return;
        }
        this.open(index);
      },
      // 打开下拉菜单
      open(index) {
        this.contentStyle = {
          zIndex: 11
        };
        this.active = true;
        this.current = index;
        this.children.map((val, idx) => {
          val.active = index == idx ? true : false;
        });
        this.$emit("open", this.current);
      },
      // 设置下拉菜单处于收起状态
      close() {
        this.$emit("close", this.current);
        this.active = false;
        this.current = 99999;
        this.contentStyle = {
          zIndex: -1,
          opacity: 0
        };
      },
      // 点击遮罩
      maskClick() {
        if (!this.closeOnClickMask)
          return;
        this.close();
      },
      // 外部手动设置某个菜单高亮
      highlight(index = void 0) {
        this.highlightIndex = index !== void 0 ? index : 99999;
      },
      // 获取下拉菜单内容的高度
      getContentHeight() {
        let windowHeight = this.$u.sys().windowHeight;
        this.$uGetRect(".u-dropdown__menu").then((res) => {
          this.contentHeight = windowHeight - res.bottom;
        });
      }
    }
  };
  function _sfc_render$y(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_icon = resolveEasycom(vue.resolveDynamicComponent("u-icon"), __easycom_0$6);
    return vue.openBlock(), vue.createElementBlock("view", { class: "u-dropdown" }, [
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["u-dropdown__menu", {
            "u-border-bottom": $props.borderBottom
          }]),
          style: vue.normalizeStyle({
            height: _ctx.$u.addUnit($props.height)
          })
        },
        [
          (vue.openBlock(true), vue.createElementBlock(
            vue.Fragment,
            null,
            vue.renderList($data.menuList, (item, index) => {
              return vue.openBlock(), vue.createElementBlock("view", {
                class: "u-dropdown__menu__item",
                key: index,
                onClick: vue.withModifiers(($event) => $options.menuClick(index), ["stop"])
              }, [
                vue.createElementVNode("view", { class: "u-flex" }, [
                  vue.createElementVNode(
                    "text",
                    {
                      class: "u-dropdown__menu__item__text",
                      style: vue.normalizeStyle({
                        color: item.disabled ? "#c0c4cc" : index === $data.current || $data.highlightIndex == index ? $props.activeColor : $props.inactiveColor,
                        fontSize: _ctx.$u.addUnit($props.titleSize)
                      })
                    },
                    vue.toDisplayString(item.title),
                    5
                    /* TEXT, STYLE */
                  ),
                  vue.createElementVNode(
                    "view",
                    {
                      class: vue.normalizeClass(["u-dropdown__menu__item__arrow", {
                        "u-dropdown__menu__item__arrow--rotate": index === $data.current
                      }])
                    },
                    [
                      vue.createVNode(_component_u_icon, {
                        "custom-style": { display: "flex" },
                        name: $props.menuIcon,
                        size: _ctx.$u.addUnit($props.menuIconSize),
                        color: index === $data.current || $data.highlightIndex == index ? $props.activeColor : "#c0c4cc"
                      }, null, 8, ["name", "size", "color"])
                    ],
                    2
                    /* CLASS */
                  )
                ])
              ], 8, ["onClick"]);
            }),
            128
            /* KEYED_FRAGMENT */
          ))
        ],
        6
        /* CLASS, STYLE */
      ),
      vue.createElementVNode(
        "view",
        {
          class: "u-dropdown__content",
          style: vue.normalizeStyle([$data.contentStyle, {
            transition: `opacity ${$props.duration / 1e3}s linear`,
            top: _ctx.$u.addUnit($props.height),
            height: $data.contentHeight + "px"
          }]),
          onClick: _cache[1] || (_cache[1] = (...args) => $options.maskClick && $options.maskClick(...args)),
          onTouchmove: _cache[2] || (_cache[2] = vue.withModifiers(() => {
          }, ["stop", "prevent"]))
        },
        [
          vue.createElementVNode(
            "view",
            {
              onClick: _cache[0] || (_cache[0] = vue.withModifiers(() => {
              }, ["stop", "prevent"])),
              class: "u-dropdown__content__popup",
              style: vue.normalizeStyle([$options.popupStyle])
            },
            [
              vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
            ],
            4
            /* STYLE */
          ),
          vue.createElementVNode("view", { class: "u-dropdown__content__mask" })
        ],
        36
        /* STYLE, NEED_HYDRATION */
      )
    ]);
  }
  const __easycom_2$4 = /* @__PURE__ */ _export_sfc(_sfc_main$1b, [["render", _sfc_render$y], ["__scopeId", "data-v-efa9add2"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-dropdown/u-dropdown.vue"]]);
  let mpMixins = {};
  mpMixins = {
    data() {
      return {
        is_show: "none"
      };
    },
    watch: {
      show(newVal) {
        this.is_show = this.show;
      }
    },
    created() {
      this.swipeaction = this.getSwipeAction();
      if (this.swipeaction && Array.isArray(this.swipeaction.children)) {
        this.swipeaction.children.push(this);
      }
    },
    mounted() {
      this.is_show = this.show;
    },
    methods: {
      // wxs 中调用
      closeSwipe(e) {
        if (this.autoClose && this.swipeaction) {
          this.swipeaction.closeOther(this);
        }
      },
      change(e) {
        this.$emit("change", e.open);
        if (this.is_show !== e.open) {
          this.is_show = e.open;
        }
      },
      appTouchStart(e) {
        const {
          clientX
        } = e.changedTouches[0];
        this.clientX = clientX;
        this.timestamp = (/* @__PURE__ */ new Date()).getTime();
      },
      appTouchEnd(e, index, item, position) {
        const {
          clientX
        } = e.changedTouches[0];
        let diff = Math.abs(this.clientX - clientX);
        let time = (/* @__PURE__ */ new Date()).getTime() - this.timestamp;
        if (diff < 40 && time < 300) {
          this.$emit("click", {
            content: item,
            index,
            position
          });
        }
      },
      onClickForPC(index, item, position) {
        return;
      }
    }
  };
  const mpwxs = mpMixins;
  let bindIngXMixins = {};
  let otherMixins = {};
  const block0 = (Comp) => {
    (Comp.$wxs || (Comp.$wxs = [])).push("wxsswipe");
    (Comp.$wxsModules || (Comp.$wxsModules = {}))["wxsswipe"] = "afd46426";
  };
  const block1 = (Comp) => {
    (Comp.$renderjs || (Comp.$renderjs = [])).push("renderswipe");
    (Comp.$renderjsModules || (Comp.$renderjsModules = {}))["renderswipe"] = "5a1e922e";
  };
  const _sfc_main$1a = {
    mixins: [mpwxs, bindIngXMixins, otherMixins],
    emits: ["click", "change"],
    props: {
      // 控制开关
      show: {
        type: String,
        default: "none"
      },
      // 禁用
      disabled: {
        type: Boolean,
        default: false
      },
      // 是否自动关闭
      autoClose: {
        type: Boolean,
        default: true
      },
      // 滑动缺省距离
      threshold: {
        type: Number,
        default: 20
      },
      // 左侧按钮内容
      leftOptions: {
        type: Array,
        default() {
          return [];
        }
      },
      // 右侧按钮内容
      rightOptions: {
        type: Array,
        default() {
          return [];
        }
      }
    },
    // TODO vue3
    unmounted() {
      this.__isUnmounted = true;
      this.uninstall();
    },
    methods: {
      uninstall() {
        if (this.swipeaction) {
          this.swipeaction.children.forEach((item, index) => {
            if (item === this) {
              this.swipeaction.children.splice(index, 1);
            }
          });
        }
      },
      /**
       * 获取父元素实例
       */
      getSwipeAction(name = "uniSwipeAction") {
        let parent = this.$parent;
        let parentName = parent.$options.name;
        while (parentName !== name) {
          parent = parent.$parent;
          if (!parent)
            return false;
          parentName = parent.$options.name;
        }
        return parent;
      }
    }
  };
  function _sfc_render$x(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      vue.Fragment,
      null,
      [
        vue.createCommentVNode(" 在微信小程序 app vue端 h5 使用wxs 实现"),
        vue.createElementVNode("view", { class: "uni-swipe" }, [
          vue.createElementVNode("view", {
            class: "uni-swipe_box",
            "change:prop": _ctx.wxsswipe.showWatch,
            prop: vue.wp(_ctx.is_show),
            "data-threshold": $props.threshold,
            "data-disabled": $props.disabled,
            onTouchstart: _cache[2] || (_cache[2] = (...args) => _ctx.wxsswipe.touchstart && _ctx.wxsswipe.touchstart(...args)),
            onTouchmove: _cache[3] || (_cache[3] = (...args) => _ctx.wxsswipe.touchmove && _ctx.wxsswipe.touchmove(...args)),
            onTouchend: _cache[4] || (_cache[4] = (...args) => _ctx.wxsswipe.touchend && _ctx.wxsswipe.touchend(...args))
          }, [
            vue.createCommentVNode(" 在微信小程序 app vue端 h5 使用wxs 实现"),
            vue.createElementVNode("view", { class: "uni-swipe_button-group button-group--left" }, [
              vue.renderSlot(_ctx.$slots, "left", {}, () => [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($props.leftOptions, (item, index) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      key: index,
                      style: vue.normalizeStyle({
                        backgroundColor: item.style && item.style.backgroundColor ? item.style.backgroundColor : "#C7C6CD"
                      }),
                      class: "uni-swipe_button button-hock",
                      onTouchstart: _cache[0] || (_cache[0] = vue.withModifiers((...args) => _ctx.appTouchStart && _ctx.appTouchStart(...args), ["stop"])),
                      onTouchend: vue.withModifiers(($event) => _ctx.appTouchEnd($event, index, item, "left"), ["stop"]),
                      onClick: vue.withModifiers(($event) => _ctx.onClickForPC(index, item, "left"), ["stop"])
                    }, [
                      vue.createElementVNode(
                        "text",
                        {
                          class: "uni-swipe_button-text",
                          style: vue.normalizeStyle({ color: item.style && item.style.color ? item.style.color : "#FFFFFF", fontSize: item.style && item.style.fontSize ? item.style.fontSize : "16px" })
                        },
                        vue.toDisplayString(item.text),
                        5
                        /* TEXT, STYLE */
                      )
                    ], 44, ["onTouchend", "onClick"]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ], true)
            ]),
            vue.createElementVNode("view", { class: "uni-swipe_text--center" }, [
              vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
            ]),
            vue.createElementVNode("view", { class: "uni-swipe_button-group button-group--right" }, [
              vue.renderSlot(_ctx.$slots, "right", {}, () => [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($props.rightOptions, (item, index) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      key: index,
                      style: vue.normalizeStyle({
                        backgroundColor: item.style && item.style.backgroundColor ? item.style.backgroundColor : "#C7C6CD"
                      }),
                      class: "uni-swipe_button button-hock",
                      onTouchstart: _cache[1] || (_cache[1] = vue.withModifiers((...args) => _ctx.appTouchStart && _ctx.appTouchStart(...args), ["stop"])),
                      onTouchend: vue.withModifiers(($event) => _ctx.appTouchEnd($event, index, item, "right"), ["stop"]),
                      onClick: vue.withModifiers(($event) => _ctx.onClickForPC(index, item, "right"), ["stop"])
                    }, [
                      vue.createElementVNode(
                        "text",
                        {
                          class: "uni-swipe_button-text",
                          style: vue.normalizeStyle({ color: item.style && item.style.color ? item.style.color : "#FFFFFF", fontSize: item.style && item.style.fontSize ? item.style.fontSize : "16px" })
                        },
                        vue.toDisplayString(item.text),
                        5
                        /* TEXT, STYLE */
                      )
                    ], 44, ["onTouchend", "onClick"]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ], true)
            ])
          ], 40, ["change:prop", "prop", "data-threshold", "data-disabled"])
        ]),
        vue.createCommentVNode(" app nvue端 使用 bindingx "),
        vue.createCommentVNode(" 其他平台使用 js ，长列表性能可能会有影响")
      ],
      2112
      /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
    );
  }
  if (typeof block0 === "function")
    block0(_sfc_main$1a);
  if (typeof block1 === "function")
    block1(_sfc_main$1a);
  const __easycom_2$3 = /* @__PURE__ */ _export_sfc(_sfc_main$1a, [["render", _sfc_render$x], ["__scopeId", "data-v-8ff2a577"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/uni-swipe-action/components/uni-swipe-action-item/uni-swipe-action-item.vue"]]);
  const _sfc_main$19 = {
    name: "uniSwipeAction",
    data() {
      return {};
    },
    created() {
      this.children = [];
    },
    methods: {
      // 公开给用户使用，重制组件样式
      resize() {
      },
      // 公开给用户使用，关闭全部 已经打开的组件
      closeAll() {
        this.children.forEach((vm) => {
          vm.is_show = "none";
        });
      },
      closeOther(vm) {
        if (this.openItem && this.openItem !== vm) {
          this.openItem.is_show = "none";
        }
        this.openItem = vm;
      }
    }
  };
  function _sfc_render$w(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.renderSlot(_ctx.$slots, "default")
    ]);
  }
  const __easycom_3$2 = /* @__PURE__ */ _export_sfc(_sfc_main$19, [["render", _sfc_render$w], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/uni-swipe-action/components/uni-swipe-action/uni-swipe-action.vue"]]);
  const _sfc_main$18 = {
    name: "u-empty",
    props: {
      // 图标路径
      src: {
        type: String,
        default: ""
      },
      // 提示文字
      text: {
        type: String,
        default: ""
      },
      // 文字颜色
      color: {
        type: String,
        default: "#c0c4cc"
      },
      // 图标的颜色
      iconColor: {
        type: String,
        default: "#c0c4cc"
      },
      // 图标的大小
      iconSize: {
        type: [String, Number],
        default: 120
      },
      // 文字大小，单位rpx
      fontSize: {
        type: [String, Number],
        default: 26
      },
      // 选择预置的图标类型
      mode: {
        type: String,
        default: "data"
      },
      //  图标宽度，单位rpx
      imgWidth: {
        type: [String, Number],
        default: 120
      },
      // 图标高度，单位rpx
      imgHeight: {
        type: [String, Number],
        default: "auto"
      },
      // 是否显示组件
      show: {
        type: Boolean,
        default: true
      },
      // 组件距离上一个元素之间的距离
      marginTop: {
        type: [String, Number],
        default: 0
      },
      iconStyle: {
        type: Object,
        default() {
          return {};
        }
      }
    },
    data() {
      return {
        icons: {
          car: "购物车为空",
          page: "页面不存在",
          search: "没有搜索结果",
          address: "没有收货地址",
          wifi: "没有WiFi",
          order: "订单为空",
          coupon: "没有优惠券",
          favor: "暂无收藏",
          permission: "无权限",
          history: "无历史记录",
          news: "无新闻列表",
          message: "消息列表为空",
          list: "列表为空",
          data: "数据为空"
        }
        // icons: [{
        // 	icon: 'car',
        // 	text: '购物车为空'
        // },{
        // 	icon: 'page',
        // 	text: '页面不存在'
        // },{
        // 	icon: 'search',
        // 	text: '没有搜索结果'
        // },{
        // 	icon: 'address',
        // 	text: '没有收货地址'
        // },{
        // 	icon: 'wifi',
        // 	text: '没有WiFi'
        // },{
        // 	icon: 'order',
        // 	text: '订单为空'
        // },{
        // 	icon: 'coupon',
        // 	text: '没有优惠券'
        // },{
        // 	icon: 'favor',
        // 	text: '暂无收藏'
        // },{
        // 	icon: 'permission',
        // 	text: '无权限'
        // },{
        // 	icon: 'history',
        // 	text: '无历史记录'
        // },{
        // 	icon: 'news',
        // 	text: '无新闻列表'
        // },{
        // 	icon: 'message',
        // 	text: '消息列表为空'
        // },{
        // 	icon: 'list',
        // 	text: '列表为空'
        // },{
        // 	icon: 'data',
        // 	text: '数据为空'
        // }],
      };
    }
  };
  function _sfc_render$v(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_icon = resolveEasycom(vue.resolveDynamicComponent("u-icon"), __easycom_0$6);
    return $props.show ? (vue.openBlock(), vue.createElementBlock(
      "view",
      {
        key: 0,
        class: "u-empty",
        style: vue.normalizeStyle({
          marginTop: $props.marginTop + "rpx"
        })
      },
      [
        vue.createVNode(_component_u_icon, {
          name: $props.src ? $props.src : "empty-" + $props.mode,
          "custom-style": $props.iconStyle,
          label: $props.text ? $props.text : $data.icons[$props.mode],
          "label-pos": "bottom",
          "label-color": $props.color,
          "label-size": $props.fontSize,
          size: $props.iconSize,
          color: $props.iconColor,
          "margin-top": "14"
        }, null, 8, ["name", "custom-style", "label", "label-color", "label-size", "size", "color"]),
        vue.createElementVNode("view", { class: "u-slot-wrap" }, [
          vue.renderSlot(_ctx.$slots, "bottom", {}, void 0, true)
        ])
      ],
      4
      /* STYLE */
    )) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_4$2 = /* @__PURE__ */ _export_sfc(_sfc_main$18, [["render", _sfc_render$v], ["__scopeId", "data-v-486b9546"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-empty/u-empty.vue"]]);
  function getDevtoolsGlobalHook() {
    return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;
  }
  function getTarget() {
    return typeof navigator !== "undefined" && typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {};
  }
  const isProxyAvailable = typeof Proxy === "function";
  const HOOK_SETUP = "devtools-plugin:setup";
  const HOOK_PLUGIN_SETTINGS_SET = "plugin:settings:set";
  class ApiProxy {
    constructor(plugin, hook) {
      this.target = null;
      this.targetQueue = [];
      this.onQueue = [];
      this.plugin = plugin;
      this.hook = hook;
      const defaultSettings = {};
      if (plugin.settings) {
        for (const id in plugin.settings) {
          const item = plugin.settings[id];
          defaultSettings[id] = item.defaultValue;
        }
      }
      const localSettingsSaveId = `__vue-devtools-plugin-settings__${plugin.id}`;
      let currentSettings = { ...defaultSettings };
      try {
        const raw = localStorage.getItem(localSettingsSaveId);
        const data = JSON.parse(raw);
        Object.assign(currentSettings, data);
      } catch (e) {
      }
      this.fallbacks = {
        getSettings() {
          return currentSettings;
        },
        setSettings(value) {
          try {
            localStorage.setItem(localSettingsSaveId, JSON.stringify(value));
          } catch (e) {
          }
          currentSettings = value;
        }
      };
      hook.on(HOOK_PLUGIN_SETTINGS_SET, (pluginId, value) => {
        if (pluginId === this.plugin.id) {
          this.fallbacks.setSettings(value);
        }
      });
      this.proxiedOn = new Proxy({}, {
        get: (_target, prop) => {
          if (this.target) {
            return this.target.on[prop];
          } else {
            return (...args) => {
              this.onQueue.push({
                method: prop,
                args
              });
            };
          }
        }
      });
      this.proxiedTarget = new Proxy({}, {
        get: (_target, prop) => {
          if (this.target) {
            return this.target[prop];
          } else if (prop === "on") {
            return this.proxiedOn;
          } else if (Object.keys(this.fallbacks).includes(prop)) {
            return (...args) => {
              this.targetQueue.push({
                method: prop,
                args,
                resolve: () => {
                }
              });
              return this.fallbacks[prop](...args);
            };
          } else {
            return (...args) => {
              return new Promise((resolve) => {
                this.targetQueue.push({
                  method: prop,
                  args,
                  resolve
                });
              });
            };
          }
        }
      });
    }
    async setRealTarget(target) {
      this.target = target;
      for (const item of this.onQueue) {
        this.target.on[item.method](...item.args);
      }
      for (const item of this.targetQueue) {
        item.resolve(await this.target[item.method](...item.args));
      }
    }
  }
  function setupDevtoolsPlugin(pluginDescriptor, setupFn) {
    const target = getTarget();
    const hook = getDevtoolsGlobalHook();
    const enableProxy = isProxyAvailable && pluginDescriptor.enableEarlyProxy;
    if (hook && (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)) {
      hook.emit(HOOK_SETUP, pluginDescriptor, setupFn);
    } else {
      const proxy = enableProxy ? new ApiProxy(pluginDescriptor, hook) : null;
      const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
      list.push({
        pluginDescriptor,
        setupFn,
        proxy
      });
      if (proxy)
        setupFn(proxy.proxiedTarget);
    }
  }
  /*!
   * vuex v4.1.0
   * (c) 2022 Evan You
   * @license MIT
   */
  var storeKey = "store";
  function useStore(key) {
    if (key === void 0)
      key = null;
    return vue.inject(key !== null ? key : storeKey);
  }
  function forEachValue(obj, fn) {
    Object.keys(obj).forEach(function(key) {
      return fn(obj[key], key);
    });
  }
  function isObject(obj) {
    return obj !== null && typeof obj === "object";
  }
  function isPromise(val) {
    return val && typeof val.then === "function";
  }
  function assert(condition, msg) {
    if (!condition) {
      throw new Error("[vuex] " + msg);
    }
  }
  function partial(fn, arg) {
    return function() {
      return fn(arg);
    };
  }
  function genericSubscribe(fn, subs, options) {
    if (subs.indexOf(fn) < 0) {
      options && options.prepend ? subs.unshift(fn) : subs.push(fn);
    }
    return function() {
      var i = subs.indexOf(fn);
      if (i > -1) {
        subs.splice(i, 1);
      }
    };
  }
  function resetStore(store2, hot) {
    store2._actions = /* @__PURE__ */ Object.create(null);
    store2._mutations = /* @__PURE__ */ Object.create(null);
    store2._wrappedGetters = /* @__PURE__ */ Object.create(null);
    store2._modulesNamespaceMap = /* @__PURE__ */ Object.create(null);
    var state2 = store2.state;
    installModule(store2, state2, [], store2._modules.root, true);
    resetStoreState(store2, state2, hot);
  }
  function resetStoreState(store2, state2, hot) {
    var oldState = store2._state;
    var oldScope = store2._scope;
    store2.getters = {};
    store2._makeLocalGettersCache = /* @__PURE__ */ Object.create(null);
    var wrappedGetters = store2._wrappedGetters;
    var computedObj = {};
    var computedCache = {};
    var scope = vue.effectScope(true);
    scope.run(function() {
      forEachValue(wrappedGetters, function(fn, key) {
        computedObj[key] = partial(fn, store2);
        computedCache[key] = vue.computed(function() {
          return computedObj[key]();
        });
        Object.defineProperty(store2.getters, key, {
          get: function() {
            return computedCache[key].value;
          },
          enumerable: true
          // for local getters
        });
      });
    });
    store2._state = vue.reactive({
      data: state2
    });
    store2._scope = scope;
    if (store2.strict) {
      enableStrictMode(store2);
    }
    if (oldState) {
      if (hot) {
        store2._withCommit(function() {
          oldState.data = null;
        });
      }
    }
    if (oldScope) {
      oldScope.stop();
    }
  }
  function installModule(store2, rootState, path, module, hot) {
    var isRoot = !path.length;
    var namespace = store2._modules.getNamespace(path);
    if (module.namespaced) {
      if (store2._modulesNamespaceMap[namespace] && true) {
        console.error("[vuex] duplicate namespace " + namespace + " for the namespaced module " + path.join("/"));
      }
      store2._modulesNamespaceMap[namespace] = module;
    }
    if (!isRoot && !hot) {
      var parentState = getNestedState(rootState, path.slice(0, -1));
      var moduleName = path[path.length - 1];
      store2._withCommit(function() {
        {
          if (moduleName in parentState) {
            console.warn(
              '[vuex] state field "' + moduleName + '" was overridden by a module with the same name at "' + path.join(".") + '"'
            );
          }
        }
        parentState[moduleName] = module.state;
      });
    }
    var local = module.context = makeLocalContext(store2, namespace, path);
    module.forEachMutation(function(mutation, key) {
      var namespacedType = namespace + key;
      registerMutation(store2, namespacedType, mutation, local);
    });
    module.forEachAction(function(action, key) {
      var type2 = action.root ? key : namespace + key;
      var handler = action.handler || action;
      registerAction(store2, type2, handler, local);
    });
    module.forEachGetter(function(getter, key) {
      var namespacedType = namespace + key;
      registerGetter(store2, namespacedType, getter, local);
    });
    module.forEachChild(function(child, key) {
      installModule(store2, rootState, path.concat(key), child, hot);
    });
  }
  function makeLocalContext(store2, namespace, path) {
    var noNamespace = namespace === "";
    var local = {
      dispatch: noNamespace ? store2.dispatch : function(_type, _payload, _options) {
        var args = unifyObjectStyle(_type, _payload, _options);
        var payload = args.payload;
        var options = args.options;
        var type2 = args.type;
        if (!options || !options.root) {
          type2 = namespace + type2;
          if (!store2._actions[type2]) {
            console.error("[vuex] unknown local action type: " + args.type + ", global type: " + type2);
            return;
          }
        }
        return store2.dispatch(type2, payload);
      },
      commit: noNamespace ? store2.commit : function(_type, _payload, _options) {
        var args = unifyObjectStyle(_type, _payload, _options);
        var payload = args.payload;
        var options = args.options;
        var type2 = args.type;
        if (!options || !options.root) {
          type2 = namespace + type2;
          if (!store2._mutations[type2]) {
            console.error("[vuex] unknown local mutation type: " + args.type + ", global type: " + type2);
            return;
          }
        }
        store2.commit(type2, payload, options);
      }
    };
    Object.defineProperties(local, {
      getters: {
        get: noNamespace ? function() {
          return store2.getters;
        } : function() {
          return makeLocalGetters(store2, namespace);
        }
      },
      state: {
        get: function() {
          return getNestedState(store2.state, path);
        }
      }
    });
    return local;
  }
  function makeLocalGetters(store2, namespace) {
    if (!store2._makeLocalGettersCache[namespace]) {
      var gettersProxy = {};
      var splitPos = namespace.length;
      Object.keys(store2.getters).forEach(function(type2) {
        if (type2.slice(0, splitPos) !== namespace) {
          return;
        }
        var localType = type2.slice(splitPos);
        Object.defineProperty(gettersProxy, localType, {
          get: function() {
            return store2.getters[type2];
          },
          enumerable: true
        });
      });
      store2._makeLocalGettersCache[namespace] = gettersProxy;
    }
    return store2._makeLocalGettersCache[namespace];
  }
  function registerMutation(store2, type2, handler, local) {
    var entry = store2._mutations[type2] || (store2._mutations[type2] = []);
    entry.push(function wrappedMutationHandler(payload) {
      handler.call(store2, local.state, payload);
    });
  }
  function registerAction(store2, type2, handler, local) {
    var entry = store2._actions[type2] || (store2._actions[type2] = []);
    entry.push(function wrappedActionHandler(payload) {
      var res = handler.call(store2, {
        dispatch: local.dispatch,
        commit: local.commit,
        getters: local.getters,
        state: local.state,
        rootGetters: store2.getters,
        rootState: store2.state
      }, payload);
      if (!isPromise(res)) {
        res = Promise.resolve(res);
      }
      if (store2._devtoolHook) {
        return res.catch(function(err) {
          store2._devtoolHook.emit("vuex:error", err);
          throw err;
        });
      } else {
        return res;
      }
    });
  }
  function registerGetter(store2, type2, rawGetter, local) {
    if (store2._wrappedGetters[type2]) {
      {
        console.error("[vuex] duplicate getter key: " + type2);
      }
      return;
    }
    store2._wrappedGetters[type2] = function wrappedGetter(store3) {
      return rawGetter(
        local.state,
        // local state
        local.getters,
        // local getters
        store3.state,
        // root state
        store3.getters
        // root getters
      );
    };
  }
  function enableStrictMode(store2) {
    vue.watch(function() {
      return store2._state.data;
    }, function() {
      {
        assert(store2._committing, "do not mutate vuex store state outside mutation handlers.");
      }
    }, { deep: true, flush: "sync" });
  }
  function getNestedState(state2, path) {
    return path.reduce(function(state3, key) {
      return state3[key];
    }, state2);
  }
  function unifyObjectStyle(type2, payload, options) {
    if (isObject(type2) && type2.type) {
      options = payload;
      payload = type2;
      type2 = type2.type;
    }
    {
      assert(typeof type2 === "string", "expects string as the type, but found " + typeof type2 + ".");
    }
    return { type: type2, payload, options };
  }
  var LABEL_VUEX_BINDINGS = "vuex bindings";
  var MUTATIONS_LAYER_ID = "vuex:mutations";
  var ACTIONS_LAYER_ID = "vuex:actions";
  var INSPECTOR_ID = "vuex";
  var actionId = 0;
  function addDevtools(app, store2) {
    setupDevtoolsPlugin(
      {
        id: "org.vuejs.vuex",
        app,
        label: "Vuex",
        homepage: "https://next.vuex.vuejs.org/",
        logo: "https://vuejs.org/images/icons/favicon-96x96.png",
        packageName: "vuex",
        componentStateTypes: [LABEL_VUEX_BINDINGS]
      },
      function(api) {
        api.addTimelineLayer({
          id: MUTATIONS_LAYER_ID,
          label: "Vuex Mutations",
          color: COLOR_LIME_500
        });
        api.addTimelineLayer({
          id: ACTIONS_LAYER_ID,
          label: "Vuex Actions",
          color: COLOR_LIME_500
        });
        api.addInspector({
          id: INSPECTOR_ID,
          label: "Vuex",
          icon: "storage",
          treeFilterPlaceholder: "Filter stores..."
        });
        api.on.getInspectorTree(function(payload) {
          if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
            if (payload.filter) {
              var nodes = [];
              flattenStoreForInspectorTree(nodes, store2._modules.root, payload.filter, "");
              payload.rootNodes = nodes;
            } else {
              payload.rootNodes = [
                formatStoreForInspectorTree(store2._modules.root, "")
              ];
            }
          }
        });
        api.on.getInspectorState(function(payload) {
          if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
            var modulePath = payload.nodeId;
            makeLocalGetters(store2, modulePath);
            payload.state = formatStoreForInspectorState(
              getStoreModule(store2._modules, modulePath),
              modulePath === "root" ? store2.getters : store2._makeLocalGettersCache,
              modulePath
            );
          }
        });
        api.on.editInspectorState(function(payload) {
          if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
            var modulePath = payload.nodeId;
            var path = payload.path;
            if (modulePath !== "root") {
              path = modulePath.split("/").filter(Boolean).concat(path);
            }
            store2._withCommit(function() {
              payload.set(store2._state.data, path, payload.state.value);
            });
          }
        });
        store2.subscribe(function(mutation, state2) {
          var data = {};
          if (mutation.payload) {
            data.payload = mutation.payload;
          }
          data.state = state2;
          api.notifyComponentUpdate();
          api.sendInspectorTree(INSPECTOR_ID);
          api.sendInspectorState(INSPECTOR_ID);
          api.addTimelineEvent({
            layerId: MUTATIONS_LAYER_ID,
            event: {
              time: Date.now(),
              title: mutation.type,
              data
            }
          });
        });
        store2.subscribeAction({
          before: function(action, state2) {
            var data = {};
            if (action.payload) {
              data.payload = action.payload;
            }
            action._id = actionId++;
            action._time = Date.now();
            data.state = state2;
            api.addTimelineEvent({
              layerId: ACTIONS_LAYER_ID,
              event: {
                time: action._time,
                title: action.type,
                groupId: action._id,
                subtitle: "start",
                data
              }
            });
          },
          after: function(action, state2) {
            var data = {};
            var duration = Date.now() - action._time;
            data.duration = {
              _custom: {
                type: "duration",
                display: duration + "ms",
                tooltip: "Action duration",
                value: duration
              }
            };
            if (action.payload) {
              data.payload = action.payload;
            }
            data.state = state2;
            api.addTimelineEvent({
              layerId: ACTIONS_LAYER_ID,
              event: {
                time: Date.now(),
                title: action.type,
                groupId: action._id,
                subtitle: "end",
                data
              }
            });
          }
        });
      }
    );
  }
  var COLOR_LIME_500 = 8702998;
  var COLOR_DARK = 6710886;
  var COLOR_WHITE = 16777215;
  var TAG_NAMESPACED = {
    label: "namespaced",
    textColor: COLOR_WHITE,
    backgroundColor: COLOR_DARK
  };
  function extractNameFromPath(path) {
    return path && path !== "root" ? path.split("/").slice(-2, -1)[0] : "Root";
  }
  function formatStoreForInspectorTree(module, path) {
    return {
      id: path || "root",
      // all modules end with a `/`, we want the last segment only
      // cart/ -> cart
      // nested/cart/ -> cart
      label: extractNameFromPath(path),
      tags: module.namespaced ? [TAG_NAMESPACED] : [],
      children: Object.keys(module._children).map(
        function(moduleName) {
          return formatStoreForInspectorTree(
            module._children[moduleName],
            path + moduleName + "/"
          );
        }
      )
    };
  }
  function flattenStoreForInspectorTree(result, module, filter, path) {
    if (path.includes(filter)) {
      result.push({
        id: path || "root",
        label: path.endsWith("/") ? path.slice(0, path.length - 1) : path || "Root",
        tags: module.namespaced ? [TAG_NAMESPACED] : []
      });
    }
    Object.keys(module._children).forEach(function(moduleName) {
      flattenStoreForInspectorTree(result, module._children[moduleName], filter, path + moduleName + "/");
    });
  }
  function formatStoreForInspectorState(module, getters2, path) {
    getters2 = path === "root" ? getters2 : getters2[path];
    var gettersKeys = Object.keys(getters2);
    var storeState = {
      state: Object.keys(module.state).map(function(key) {
        return {
          key,
          editable: true,
          value: module.state[key]
        };
      })
    };
    if (gettersKeys.length) {
      var tree = transformPathsToObjectTree(getters2);
      storeState.getters = Object.keys(tree).map(function(key) {
        return {
          key: key.endsWith("/") ? extractNameFromPath(key) : key,
          editable: false,
          value: canThrow(function() {
            return tree[key];
          })
        };
      });
    }
    return storeState;
  }
  function transformPathsToObjectTree(getters2) {
    var result = {};
    Object.keys(getters2).forEach(function(key) {
      var path = key.split("/");
      if (path.length > 1) {
        var target = result;
        var leafKey = path.pop();
        path.forEach(function(p) {
          if (!target[p]) {
            target[p] = {
              _custom: {
                value: {},
                display: p,
                tooltip: "Module",
                abstract: true
              }
            };
          }
          target = target[p]._custom.value;
        });
        target[leafKey] = canThrow(function() {
          return getters2[key];
        });
      } else {
        result[key] = canThrow(function() {
          return getters2[key];
        });
      }
    });
    return result;
  }
  function getStoreModule(moduleMap, path) {
    var names = path.split("/").filter(function(n) {
      return n;
    });
    return names.reduce(
      function(module, moduleName, i) {
        var child = module[moduleName];
        if (!child) {
          throw new Error('Missing module "' + moduleName + '" for path "' + path + '".');
        }
        return i === names.length - 1 ? child : child._children;
      },
      path === "root" ? moduleMap : moduleMap.root._children
    );
  }
  function canThrow(cb) {
    try {
      return cb();
    } catch (e) {
      return e;
    }
  }
  var Module = function Module2(rawModule, runtime) {
    this.runtime = runtime;
    this._children = /* @__PURE__ */ Object.create(null);
    this._rawModule = rawModule;
    var rawState = rawModule.state;
    this.state = (typeof rawState === "function" ? rawState() : rawState) || {};
  };
  var prototypeAccessors$1 = { namespaced: { configurable: true } };
  prototypeAccessors$1.namespaced.get = function() {
    return !!this._rawModule.namespaced;
  };
  Module.prototype.addChild = function addChild(key, module) {
    this._children[key] = module;
  };
  Module.prototype.removeChild = function removeChild(key) {
    delete this._children[key];
  };
  Module.prototype.getChild = function getChild(key) {
    return this._children[key];
  };
  Module.prototype.hasChild = function hasChild(key) {
    return key in this._children;
  };
  Module.prototype.update = function update2(rawModule) {
    this._rawModule.namespaced = rawModule.namespaced;
    if (rawModule.actions) {
      this._rawModule.actions = rawModule.actions;
    }
    if (rawModule.mutations) {
      this._rawModule.mutations = rawModule.mutations;
    }
    if (rawModule.getters) {
      this._rawModule.getters = rawModule.getters;
    }
  };
  Module.prototype.forEachChild = function forEachChild(fn) {
    forEachValue(this._children, fn);
  };
  Module.prototype.forEachGetter = function forEachGetter(fn) {
    if (this._rawModule.getters) {
      forEachValue(this._rawModule.getters, fn);
    }
  };
  Module.prototype.forEachAction = function forEachAction(fn) {
    if (this._rawModule.actions) {
      forEachValue(this._rawModule.actions, fn);
    }
  };
  Module.prototype.forEachMutation = function forEachMutation(fn) {
    if (this._rawModule.mutations) {
      forEachValue(this._rawModule.mutations, fn);
    }
  };
  Object.defineProperties(Module.prototype, prototypeAccessors$1);
  var ModuleCollection = function ModuleCollection2(rawRootModule) {
    this.register([], rawRootModule, false);
  };
  ModuleCollection.prototype.get = function get(path) {
    return path.reduce(function(module, key) {
      return module.getChild(key);
    }, this.root);
  };
  ModuleCollection.prototype.getNamespace = function getNamespace(path) {
    var module = this.root;
    return path.reduce(function(namespace, key) {
      module = module.getChild(key);
      return namespace + (module.namespaced ? key + "/" : "");
    }, "");
  };
  ModuleCollection.prototype.update = function update$1(rawRootModule) {
    update([], this.root, rawRootModule);
  };
  ModuleCollection.prototype.register = function register(path, rawModule, runtime) {
    var this$1$1 = this;
    if (runtime === void 0)
      runtime = true;
    {
      assertRawModule(path, rawModule);
    }
    var newModule = new Module(rawModule, runtime);
    if (path.length === 0) {
      this.root = newModule;
    } else {
      var parent = this.get(path.slice(0, -1));
      parent.addChild(path[path.length - 1], newModule);
    }
    if (rawModule.modules) {
      forEachValue(rawModule.modules, function(rawChildModule, key) {
        this$1$1.register(path.concat(key), rawChildModule, runtime);
      });
    }
  };
  ModuleCollection.prototype.unregister = function unregister(path) {
    var parent = this.get(path.slice(0, -1));
    var key = path[path.length - 1];
    var child = parent.getChild(key);
    if (!child) {
      {
        console.warn(
          "[vuex] trying to unregister module '" + key + "', which is not registered"
        );
      }
      return;
    }
    if (!child.runtime) {
      return;
    }
    parent.removeChild(key);
  };
  ModuleCollection.prototype.isRegistered = function isRegistered(path) {
    var parent = this.get(path.slice(0, -1));
    var key = path[path.length - 1];
    if (parent) {
      return parent.hasChild(key);
    }
    return false;
  };
  function update(path, targetModule, newModule) {
    {
      assertRawModule(path, newModule);
    }
    targetModule.update(newModule);
    if (newModule.modules) {
      for (var key in newModule.modules) {
        if (!targetModule.getChild(key)) {
          {
            console.warn(
              "[vuex] trying to add a new module '" + key + "' on hot reloading, manual reload is needed"
            );
          }
          return;
        }
        update(
          path.concat(key),
          targetModule.getChild(key),
          newModule.modules[key]
        );
      }
    }
  }
  var functionAssert = {
    assert: function(value) {
      return typeof value === "function";
    },
    expected: "function"
  };
  var objectAssert = {
    assert: function(value) {
      return typeof value === "function" || typeof value === "object" && typeof value.handler === "function";
    },
    expected: 'function or object with "handler" function'
  };
  var assertTypes = {
    getters: functionAssert,
    mutations: functionAssert,
    actions: objectAssert
  };
  function assertRawModule(path, rawModule) {
    Object.keys(assertTypes).forEach(function(key) {
      if (!rawModule[key]) {
        return;
      }
      var assertOptions = assertTypes[key];
      forEachValue(rawModule[key], function(value, type2) {
        assert(
          assertOptions.assert(value),
          makeAssertionMessage(path, key, type2, value, assertOptions.expected)
        );
      });
    });
  }
  function makeAssertionMessage(path, key, type2, value, expected) {
    var buf = key + " should be " + expected + ' but "' + key + "." + type2 + '"';
    if (path.length > 0) {
      buf += ' in module "' + path.join(".") + '"';
    }
    buf += " is " + JSON.stringify(value) + ".";
    return buf;
  }
  function createStore(options) {
    return new Store(options);
  }
  var Store = function Store2(options) {
    var this$1$1 = this;
    if (options === void 0)
      options = {};
    {
      assert(typeof Promise !== "undefined", "vuex requires a Promise polyfill in this browser.");
      assert(this instanceof Store2, "store must be called with the new operator.");
    }
    var plugins = options.plugins;
    if (plugins === void 0)
      plugins = [];
    var strict = options.strict;
    if (strict === void 0)
      strict = false;
    var devtools = options.devtools;
    this._committing = false;
    this._actions = /* @__PURE__ */ Object.create(null);
    this._actionSubscribers = [];
    this._mutations = /* @__PURE__ */ Object.create(null);
    this._wrappedGetters = /* @__PURE__ */ Object.create(null);
    this._modules = new ModuleCollection(options);
    this._modulesNamespaceMap = /* @__PURE__ */ Object.create(null);
    this._subscribers = [];
    this._makeLocalGettersCache = /* @__PURE__ */ Object.create(null);
    this._scope = null;
    this._devtools = devtools;
    var store2 = this;
    var ref = this;
    var dispatch = ref.dispatch;
    var commit = ref.commit;
    this.dispatch = function boundDispatch(type2, payload) {
      return dispatch.call(store2, type2, payload);
    };
    this.commit = function boundCommit(type2, payload, options2) {
      return commit.call(store2, type2, payload, options2);
    };
    this.strict = strict;
    var state2 = this._modules.root.state;
    installModule(this, state2, [], this._modules.root);
    resetStoreState(this, state2);
    plugins.forEach(function(plugin) {
      return plugin(this$1$1);
    });
  };
  var prototypeAccessors = { state: { configurable: true } };
  Store.prototype.install = function install2(app, injectKey) {
    app.provide(injectKey || storeKey, this);
    app.config.globalProperties.$store = this;
    var useDevtools = this._devtools !== void 0 ? this._devtools : true;
    if (useDevtools) {
      addDevtools(app, this);
    }
  };
  prototypeAccessors.state.get = function() {
    return this._state.data;
  };
  prototypeAccessors.state.set = function(v) {
    {
      assert(false, "use store.replaceState() to explicit replace store state.");
    }
  };
  Store.prototype.commit = function commit(_type, _payload, _options) {
    var this$1$1 = this;
    var ref = unifyObjectStyle(_type, _payload, _options);
    var type2 = ref.type;
    var payload = ref.payload;
    var options = ref.options;
    var mutation = { type: type2, payload };
    var entry = this._mutations[type2];
    if (!entry) {
      {
        console.error("[vuex] unknown mutation type: " + type2);
      }
      return;
    }
    this._withCommit(function() {
      entry.forEach(function commitIterator(handler) {
        handler(payload);
      });
    });
    this._subscribers.slice().forEach(function(sub) {
      return sub(mutation, this$1$1.state);
    });
    if (options && options.silent) {
      console.warn(
        "[vuex] mutation type: " + type2 + ". Silent option has been removed. Use the filter functionality in the vue-devtools"
      );
    }
  };
  Store.prototype.dispatch = function dispatch(_type, _payload) {
    var this$1$1 = this;
    var ref = unifyObjectStyle(_type, _payload);
    var type2 = ref.type;
    var payload = ref.payload;
    var action = { type: type2, payload };
    var entry = this._actions[type2];
    if (!entry) {
      {
        console.error("[vuex] unknown action type: " + type2);
      }
      return;
    }
    try {
      this._actionSubscribers.slice().filter(function(sub) {
        return sub.before;
      }).forEach(function(sub) {
        return sub.before(action, this$1$1.state);
      });
    } catch (e) {
      {
        console.warn("[vuex] error in before action subscribers: ");
        console.error(e);
      }
    }
    var result = entry.length > 1 ? Promise.all(entry.map(function(handler) {
      return handler(payload);
    })) : entry[0](payload);
    return new Promise(function(resolve, reject) {
      result.then(function(res) {
        try {
          this$1$1._actionSubscribers.filter(function(sub) {
            return sub.after;
          }).forEach(function(sub) {
            return sub.after(action, this$1$1.state);
          });
        } catch (e) {
          {
            console.warn("[vuex] error in after action subscribers: ");
            console.error(e);
          }
        }
        resolve(res);
      }, function(error) {
        try {
          this$1$1._actionSubscribers.filter(function(sub) {
            return sub.error;
          }).forEach(function(sub) {
            return sub.error(action, this$1$1.state, error);
          });
        } catch (e) {
          {
            console.warn("[vuex] error in error action subscribers: ");
            console.error(e);
          }
        }
        reject(error);
      });
    });
  };
  Store.prototype.subscribe = function subscribe(fn, options) {
    return genericSubscribe(fn, this._subscribers, options);
  };
  Store.prototype.subscribeAction = function subscribeAction(fn, options) {
    var subs = typeof fn === "function" ? { before: fn } : fn;
    return genericSubscribe(subs, this._actionSubscribers, options);
  };
  Store.prototype.watch = function watch$1(getter, cb, options) {
    var this$1$1 = this;
    {
      assert(typeof getter === "function", "store.watch only accepts a function.");
    }
    return vue.watch(function() {
      return getter(this$1$1.state, this$1$1.getters);
    }, cb, Object.assign({}, options));
  };
  Store.prototype.replaceState = function replaceState(state2) {
    var this$1$1 = this;
    this._withCommit(function() {
      this$1$1._state.data = state2;
    });
  };
  Store.prototype.registerModule = function registerModule(path, rawModule, options) {
    if (options === void 0)
      options = {};
    if (typeof path === "string") {
      path = [path];
    }
    {
      assert(Array.isArray(path), "module path must be a string or an Array.");
      assert(path.length > 0, "cannot register the root module by using registerModule.");
    }
    this._modules.register(path, rawModule);
    installModule(this, this.state, path, this._modules.get(path), options.preserveState);
    resetStoreState(this, this.state);
  };
  Store.prototype.unregisterModule = function unregisterModule(path) {
    var this$1$1 = this;
    if (typeof path === "string") {
      path = [path];
    }
    {
      assert(Array.isArray(path), "module path must be a string or an Array.");
    }
    this._modules.unregister(path);
    this._withCommit(function() {
      var parentState = getNestedState(this$1$1.state, path.slice(0, -1));
      delete parentState[path[path.length - 1]];
    });
    resetStore(this);
  };
  Store.prototype.hasModule = function hasModule(path) {
    if (typeof path === "string") {
      path = [path];
    }
    {
      assert(Array.isArray(path), "module path must be a string or an Array.");
    }
    return this._modules.isRegistered(path);
  };
  Store.prototype.hotUpdate = function hotUpdate(newOptions) {
    this._modules.update(newOptions);
    resetStore(this, true);
  };
  Store.prototype._withCommit = function _withCommit(fn) {
    var committing = this._committing;
    this._committing = true;
    fn();
    this._committing = committing;
  };
  Object.defineProperties(Store.prototype, prototypeAccessors);
  const getters = {
    token: (state2) => state2.user.token,
    userInfo: (state2) => state2.user.userInfo,
    dictionaryList: (state2) => state2.base.dictionaryList,
    relationData: (state2) => state2.base.relationData,
    badgeNum: (state2) => state2.chat.badgeNum,
    msgInfo: (state2) => state2.chat.msgInfo
  };
  function getDictionaryDataAll() {
    return request({
      url: "/api/system/DictionaryData/All",
      options: {
        load: false
      }
    });
  }
  function getOrganizeSelector() {
    return request({
      url: "/api/permission/Organize/Selector/0",
      options: {
        load: false
      }
    });
  }
  function getDepartmentSelector() {
    return request({
      url: "/api/permission/Organize/Department/Selector/0",
      options: {
        load: false
      }
    });
  }
  function getPositionSelector() {
    return request({
      url: "/api/permission/Position/Selector",
      options: {
        load: false
      }
    });
  }
  function getUserSelector() {
    return request({
      url: "/api/permission/Users/Selector",
      options: {
        load: false
      }
    });
  }
  function getUserAll() {
    return request({
      url: "/api/permission/Users/All",
      options: {
        load: false
      }
    });
  }
  function login(data) {
    return request({
      url: "/api/oauth/Login",
      method: "post",
      data,
      header: {
        "Content-Type": "application/x-www-form-urlencoded"
      }
    });
  }
  function logout() {
    return request({
      url: "/api/oauth/Logout"
    });
  }
  function getCurrentUser() {
    return request({
      url: "/api/oauth/CurrentUser",
      options: {
        load: false
      }
    });
  }
  function getDefaultConfig(account) {
    return request({
      url: `/api/oauth/getConfig/${account}`,
      method: "get"
    });
  }
  const state$1 = {
    dictionaryList: [],
    organizeTree: [],
    departmentTree: [],
    positionTree: [],
    userTree: [],
    userList: [],
    relationData: {}
  };
  const mutations$1 = {
    SET_DICTIONARY_LIST: (state2, dictionaryList) => {
      state2.dictionaryList = dictionaryList;
    },
    SET_ORGANIZE_TREE: (state2, organizeTree) => {
      state2.organizeTree = organizeTree;
    },
    SET_DEPARTMENT_LIST: (state2, departmentTree) => {
      state2.departmentTree = departmentTree;
    },
    SET_POSITION_TREE: (state2, positionTree) => {
      state2.positionTree = positionTree;
    },
    SET_USER_TREE: (state2, userTree) => {
      state2.userTree = userTree;
    },
    SET_USER_LIST: (state2, userList) => {
      state2.userList = userList;
    },
    UPDATE_RELATION_DATA(state2, val) {
      state2.relationData = val;
    }
  };
  const actions$1 = {
    getDictionaryDataAll({
      commit
    }) {
      return new Promise((resolve, reject) => {
        getDictionaryDataAll().then((res) => {
          commit("SET_DICTIONARY_LIST", res.data.list);
          resolve(res.data.list);
        }).catch((error) => {
          reject(error);
        });
      });
    },
    getDictionaryData({
      state: state2,
      dispatch
    }, info) {
      return new Promise(async (resolve) => {
        let list = [], data = [], json = [];
        if (!state2.dictionaryList.length) {
          list = await dispatch("getDictionaryDataAll");
        } else {
          list = state2.dictionaryList;
        }
        if (info.sort) {
          data = list.filter((o) => o.enCode === info.sort)[0];
          if (!info.id) {
            json = data.dictionaryList;
          } else {
            let rowData = [];
            if (!data.isTree) {
              rowData = data.dictionaryList.fliter((o) => o.id == info.id);
            } else {
              const findData = (list2) => {
                for (let i = 0; i < list2.length; i++) {
                  const e = list2[i];
                  if (e.id == info.id) {
                    rowData[0] = e;
                    break;
                  }
                  if (e.children && e.children.length) {
                    findData(e.children);
                  }
                }
              };
              findData(data.dictionaryList);
            }
            if (rowData.length) {
              json = rowData[0];
            } else {
              json = {
                id: "",
                fullName: ""
              };
            }
          }
        }
        resolve(json);
      });
    },
    getOrganizeTree({
      state: state2,
      commit
    }) {
      return new Promise((resolve, reject) => {
        if (!state2.organizeTree.length) {
          getOrganizeSelector().then((res) => {
            commit("SET_ORGANIZE_TREE", res.data.list);
            resolve(res.data.list);
          }).catch((error) => {
            reject(error);
          });
        } else {
          resolve(state2.organizeTree);
        }
      });
    },
    getDepartmentTree({
      state: state2,
      commit
    }) {
      return new Promise((resolve, reject) => {
        if (!state2.departmentTree.length) {
          getDepartmentSelector().then((res) => {
            commit("SET_DEPARTMENT_LIST", res.data.list);
            resolve(res.data.list);
          }).catch((error) => {
            reject(error);
          });
        } else {
          resolve(state2.departmentTree);
        }
      });
    },
    getPositionTree({
      state: state2,
      commit
    }) {
      return new Promise((resolve, reject) => {
        if (!state2.positionTree.length) {
          getPositionSelector().then((res) => {
            commit("SET_POSITION_TREE", res.data.list);
            resolve(res.data.list);
          }).catch((error) => {
            reject(error);
          });
        } else {
          resolve(state2.positionTree);
        }
      });
    },
    getUserTree({
      state: state2,
      commit
    }) {
      return new Promise((resolve, reject) => {
        if (!state2.userTree.length) {
          getUserSelector().then((res) => {
            commit("SET_USER_TREE", res.data.list);
            resolve(res.data.list);
          }).catch((error) => {
            reject(error);
          });
        } else {
          resolve(state2.userTree);
        }
      });
    },
    getUserList({
      state: state2,
      commit
    }) {
      return new Promise((resolve, reject) => {
        if (!state2.userList.length) {
          getUserAll().then((res) => {
            commit("SET_USER_LIST", res.data.list);
            resolve(res.data.list);
          }).catch((error) => {
            reject(error);
          });
        } else {
          resolve(state2.userList);
        }
      });
    },
    getUserInfo({
      state: state2,
      dispatch
    }, id) {
      return new Promise(async (resolve) => {
        let list = [];
        if (!state2.userList.length) {
          list = await dispatch("getUserList");
        } else {
          list = state2.userList;
        }
        let item = list.filter((o) => o.id === id)[0];
        resolve(item || {});
      });
    }
  };
  const base = {
    namespaced: true,
    state: state$1,
    mutations: mutations$1,
    actions: actions$1
  };
  const state = {
    token: "",
    userInfo: {}
  };
  const mutations = {
    SET_TOKEN: (state2, token) => {
      state2.token = token;
    },
    SET_USERINFO: (state2, userInfo) => {
      state2.userInfo = userInfo;
    }
  };
  const actions = {
    getCurrentUser({
      commit
    }) {
      return new Promise((resolve, reject) => {
        getCurrentUser().then((res) => {
          const userInfo = res.data.userInfo || {};
          const permissionList = res.data.permissionList || [];
          const sysConfigInfo = res.data.sysConfigInfo || {};
          const sysVersion = sysConfigInfo.sysVersion || "";
          const copyright = sysConfigInfo.copyright || "";
          commit("SET_USERINFO", userInfo);
          uni.setStorageSync("sysVersion", sysVersion);
          uni.setStorageSync("permissionList", permissionList);
          uni.setStorageSync("sysConfigInfo", sysConfigInfo);
          uni.setStorageSync("copyright", copyright);
          uni.setStorageSync("userInfo", userInfo);
          uni.setStorageSync("watermarkFlag", true);
          uni.setStorageSync("watermarkTime", null);
          uni.setStorageSync("projectName", null);
          uni.setStorageSync("latAndLon", null);
          uni.setStorageSync("watermarkValue", [
            { name: "经纬度", value: uni.getStorageSync("latAndLon"), flag: true },
            { name: "日期", value: uni.getStorageSync("watermarkTime"), flag: true },
            { name: "人员", value: uni.getStorageSync("userInfo").userName, flag: true },
            { name: "项目名称", value: uni.getStorageSync("projectName"), flag: true }
          ]);
          resolve(userInfo);
        }).catch((error) => {
          reject(error);
        });
      });
    },
    logout({
      commit,
      dispatch
    }) {
      return new Promise((resolve, reject) => {
        logout().then(() => {
          commit("SET_TOKEN", "");
          commit("SET_USERINFO", {});
          dispatch("resetToken");
          resolve();
        }).catch((error) => {
          reject(error);
        });
      });
    },
    // remove token
    resetToken({
      commit
    }) {
      return new Promise((resolve) => {
        uni.removeStorageSync("token");
        uni.removeStorageSync("userInfo");
        uni.removeStorageSync("permissionList");
        resolve();
      });
    }
  };
  const user = {
    namespaced: true,
    state,
    mutations,
    actions
  };
  const store = createStore({
    modules: {
      base,
      user
    },
    getters
  });
  const baseURL = "http://106.14.80.181:30019";
  const define = {
    baseURL,
    webSocketUrl: "ws://106.14.80.181:30019/websocket",
    comUploadUrl: baseURL + "/api/file/Uploader/",
    timeout: 1e6,
    report: baseURL + "/Report"
  };
  const host = define.baseURL;
  const defaultOpt = {
    load: true
  };
  function request(config2) {
    config2.options = Object.assign(defaultOpt, config2.options);
    const token = uni.getStorageSync("token") || "";
    let header = {
      "Content-Type": "application/json;charset=UTF-8",
      "cityk-origin": "app",
      ...config2.header
    };
    if (token)
      header["Authorization"] = token;
    let url2 = config2.url.indexOf("http") > -1 ? config2.url : host + config2.url;
    if (config2.url === "/api/oauth/Login") {
      url2 += "?client_id=admin&client_secret=123456&scope=all&grant_type=password";
    }
    if (config2.options.load) {
      uni.showLoading({
        title: config2.options.loadText || "正在加载"
      });
    }
    return new Promise((resolve, reject) => {
      uni.request({
        url: url2,
        data: config2.data || null,
        method: config2.method || "GET",
        header,
        timeout: define.timeout,
        success: (res) => {
          if (config2.options.load) {
            uni.hideLoading();
          }
          if (res.statusCode === 200) {
            if (res.data.code == 200) {
              resolve(res.data);
            } else {
              ajaxError(res.data);
              reject(res.data.msg);
            }
          } else {
            ajaxError(res.data);
            reject(res.errMsg);
          }
        },
        fail: (err) => {
          if (config2.options.load) {
            uni.hideLoading();
          }
          reject(err);
        }
      });
    });
  }
  function ajaxError(data) {
    uni.showToast({
      title: data.msg || "请求出错，请重试",
      icon: "none",
      complete() {
        if (data.code === 600 || data.code === 601 || data.code === 602) {
          setTimeout(() => {
            store.dispatch("user/resetToken").then(() => {
              uni.reLaunch({
                url: "/pages/login/index"
              });
            });
          }, 1500);
        }
      }
    });
  }
  function getMember(data) {
    return request({
      url: "/api/project/ProjMember/getList",
      method: "post",
      data
    });
  }
  function getSampleBase(data) {
    return request({
      url: "/api/sample/Base/getList",
      method: "post",
      data
    });
  }
  function getProjectBaseList(data) {
    return request({
      url: "/api/project/ProjBase/getList",
      method: "post",
      data
    });
  }
  function getProjectDetail(id) {
    return request({
      url: `/api/project/ProjBase/detail/${id}`,
      method: "get"
    });
  }
  function delProjectDetail$1(id) {
    return request({
      url: `/api/project/ProjBase/${id}`,
      method: "delete"
    });
  }
  function getHoleBaseList(data) {
    return request({
      url: `/api/project/HoleBase/getList`,
      method: "post",
      data
    });
  }
  function getHoleBaseDetail(id) {
    return request({
      url: `/api/project/HoleBase/detail/${id}`,
      method: "get"
    });
  }
  function delHoleBaseDetail$1(id) {
    return request({
      url: `/api/project/HoleBase/${id}`,
      method: "delete"
    });
  }
  function getQCSampleList(data) {
    return request({
      url: `/api/project/QCSample/getList`,
      method: "post",
      data
    });
  }
  function delQCSampleDetail(id) {
    return request({
      url: `/api/project/QCSample/${id}`,
      method: "delete"
    });
  }
  function getHoleRecordList(data) {
    return request({
      url: `/api/project/HoleRecord/getList`,
      method: "post",
      data
    });
  }
  function getHoleRecordDetail(id) {
    return request({
      url: `/api/project/HoleRecord/${id}`,
      method: "get"
    });
  }
  function addHoleRecord(data) {
    return request({
      url: `/api/project/HoleRecord`,
      method: "post",
      data
    });
  }
  function updateHoleRecord(id, data) {
    return request({
      url: `/api/project/HoleRecord/${id}`,
      method: "put",
      data
    });
  }
  function delHoleRecordDetail(id) {
    return request({
      url: `/api/project/HoleRecord/${id}`,
      method: "delete"
    });
  }
  function getSoilRecordList(data) {
    return request({
      url: `/api/project/SoilSample/getList`,
      method: "post",
      data
    });
  }
  function getSoilRecordDetail(id) {
    return request({
      url: `/api/project/SoilSample/${id}`,
      method: "get"
    });
  }
  function addSoilRecord(data) {
    return request({
      url: `/api/project/SoilSample`,
      method: "post",
      data
    });
  }
  function updateSoilRecord(id, data) {
    return request({
      url: `/api/project/SoilSample/${id}`,
      method: "put",
      data
    });
  }
  function delSoilRecordDetail(id) {
    return request({
      url: `/api/project/SoilSample/${id}`,
      method: "delete"
    });
  }
  function getWellBaseList(data) {
    return request({
      url: `/api/project/WellBase/getList`,
      method: "post",
      data
    });
  }
  function getWellBaseDetail(id) {
    return request({
      url: `/api/project/WellBase/${id}`,
      method: "get"
    });
  }
  function addWellBase(data) {
    return request({
      url: `/api/project/WellBase`,
      method: "post",
      data
    });
  }
  function updateWellBase(id, data) {
    return request({
      url: `/api/project/WellBase/${id}`,
      method: "put",
      data
    });
  }
  function getWellWashRecordList(data) {
    return request({
      url: `/api/project/WellWashRecord/getList`,
      method: "post",
      data
    });
  }
  function getWellWashRecordDetail(id) {
    return request({
      url: `/api/project/WellWashRecord/${id}`,
      method: "get"
    });
  }
  function addWellWashRecord(data) {
    return request({
      url: `/api/project/WellWashRecord`,
      method: "post",
      data
    });
  }
  function updateWellWashRecord(id, data) {
    return request({
      url: `/api/project/WellWashRecord/${id}`,
      method: "put",
      data
    });
  }
  function delWellWashRecordDetail(id) {
    return request({
      url: `/api/project/WellWashRecord/${id}`,
      method: "delete"
    });
  }
  function getWaterSampleList(data) {
    return request({
      url: `/api/project/WaterSample/getList`,
      method: "post",
      data
    });
  }
  function getWaterSampleDetail(id) {
    return request({
      url: `/api/project/WaterSample/${id}`,
      method: "get"
    });
  }
  function addWaterSample(data) {
    return request({
      url: `/api/project/WaterSample`,
      method: "post",
      data
    });
  }
  function updateWaterSample(id, data) {
    return request({
      url: `/api/project/WaterSample/${id}`,
      method: "put",
      data
    });
  }
  function getMenuId$1(moduleName) {
    let menuList = [];
    if (menuList.length === 0) {
      menuList = uni.getStorageSync("permissionList");
    }
    for (let val of menuList) {
      if (val.moduleName === moduleName) {
        return val.modelId;
      }
    }
    return;
  }
  function searchId(id) {
    let menuList = uni.getStorageSync("permissionList");
    for (let val of menuList) {
      if (val.modelId === id) {
        formatAppLog("log", "at utils/getMenuId.js:19", val.moduleName);
        return;
      }
    }
  }
  const _sfc_main$17 = {
    __name: "index",
    setup(__props) {
      const store2 = useStore();
      const dropdownZone = vue.reactive([
        {
          label: "默认排序",
          value: 1
        },
        {
          label: "生序",
          value: 2
        },
        {
          label: "降序",
          value: 3
        }
      ]);
      const dropdownStatus = vue.reactive([
        {
          label: "默认排序",
          value: 1
        },
        {
          label: "生序",
          value: 2
        },
        {
          label: "降序",
          value: 3
        }
      ]);
      const dropdownType = vue.reactive([
        {
          label: "默认排序",
          value: 1
        },
        {
          label: "生序",
          value: 2
        },
        {
          label: "降序",
          value: 3
        }
      ]);
      const swiperOptions = vue.ref([
        {
          text: "删除",
          style: {
            backgroundColor: "#dd524d"
          }
        }
      ]);
      const searchKeyWord = vue.ref();
      function swipeClick(e, ctx, id) {
        uni.showModal({
          title: "提示",
          content: "您确定要删除此项吗？",
          success: (res) => {
            if (res.confirm) {
              delProjectDetail$1(id).then((res2) => {
                getMenuList2();
              });
              uni.showToast({
                title: "移除成功",
                icon: "none"
              });
            }
          }
        });
      }
      const tableData = vue.ref([]);
      async function getMenuList2(name) {
        const menuId = getMenuId$1("项目列表");
        let queryData = {
          currentPage: 1,
          // pageSize: 0,
          sort: "asc",
          sidx: "encode",
          menuId,
          name: searchKeyWord.value
        };
        getProjectBaseList(queryData).then((res) => {
          tableData.value = res.data;
        });
      }
      function goToDeatil(id, name) {
        uni.setStorageSync("projectId", id);
        uni.setStorageSync("projectName", name);
        formatAppLog("log", "at pages/sampleDetection/index.vue:155", name);
        uni.navigateTo({
          url: `/pages/sampleDetection/detail/index?id=${id}`
        });
      }
      onLoad(() => {
        store2.dispatch("user/getCurrentUser");
        getMenuList2();
      });
      onPullDownRefresh(async () => {
        await getMenuList2();
        uni.stopPullDownRefresh();
      });
      return (_ctx, _cache) => {
        const _component_u_search = resolveEasycom(vue.resolveDynamicComponent("u-search"), __easycom_1$7);
        const _component_u_dropdown_item = resolveEasycom(vue.resolveDynamicComponent("u-dropdown-item"), __easycom_1$5);
        const _component_u_dropdown = resolveEasycom(vue.resolveDynamicComponent("u-dropdown"), __easycom_2$4);
        const _component_uni_swipe_action_item = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action-item"), __easycom_2$3);
        const _component_uni_swipe_action = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action"), __easycom_3$2);
        const _component_u_empty = resolveEasycom(vue.resolveDynamicComponent("u-empty"), __easycom_4$2);
        return vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          null,
          [
            vue.createElementVNode("view", { class: "status_bar" }, [
              vue.createElementVNode("view", { class: "top_view" })
            ]),
            vue.createElementVNode("view", { class: "sp-container" }, [
              vue.createElementVNode("view", { class: "search-box" }, [
                vue.createVNode(_component_u_search, {
                  placeholder: "请输入项目名称",
                  modelValue: searchKeyWord.value,
                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => searchKeyWord.value = $event),
                  onSearch: _cache[1] || (_cache[1] = ($event) => getMenuList2())
                }, null, 8, ["modelValue"])
              ]),
              vue.createElementVNode("view", { class: "sort-box" }, [
                vue.createVNode(_component_u_dropdown, {
                  ref: "dropdown1",
                  onOpen: _ctx.open,
                  onClose: _ctx.close
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_dropdown_item, {
                      modelValue: _ctx.selectedItem,
                      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => _ctx.selectedItem = $event),
                      title: "行政区域",
                      options: dropdownZone
                    }, null, 8, ["modelValue", "options"]),
                    vue.createVNode(_component_u_dropdown_item, {
                      modelValue: _ctx.selectedItem,
                      "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => _ctx.selectedItem = $event),
                      title: "项目状态",
                      options: dropdownStatus
                    }, null, 8, ["modelValue", "options"]),
                    vue.createVNode(_component_u_dropdown_item, {
                      modelValue: _ctx.selectedItem,
                      "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => _ctx.selectedItem = $event),
                      title: "项目类型",
                      options: dropdownType
                    }, null, 8, ["modelValue", "options"])
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["onOpen", "onClose"])
              ]),
              vue.createElementVNode("view", { class: "content-box" }, [
                tableData.value.length ? (vue.openBlock(), vue.createBlock(
                  _component_uni_swipe_action,
                  {
                    key: 0,
                    ref: "swipeAction"
                  },
                  {
                    default: vue.withCtx(() => [
                      (vue.openBlock(true), vue.createElementBlock(
                        vue.Fragment,
                        null,
                        vue.renderList(tableData.value, (item) => {
                          return vue.openBlock(), vue.createBlock(_component_uni_swipe_action_item, {
                            class: "swipe-item items-box",
                            key: item.id,
                            "right-options": swiperOptions.value,
                            onChange: _cache[5] || (_cache[5] = ($event) => _ctx.swipeChange($event)),
                            onClick: ($event) => swipeClick($event, _ctx.content, item.id)
                          }, {
                            default: vue.withCtx(() => [
                              vue.createElementVNode("view", {
                                class: "item-box",
                                onClick: ($event) => goToDeatil(item.id, item.name)
                              }, [
                                vue.createElementVNode("view", { class: "left-item" }, [
                                  vue.createElementVNode(
                                    "view",
                                    { class: "title" },
                                    vue.toDisplayString(item.name),
                                    1
                                    /* TEXT */
                                  ),
                                  vue.createElementVNode("view", { class: "center-zone" }, [
                                    vue.createElementVNode(
                                      "text",
                                      { class: "area" },
                                      vue.toDisplayString(item.organizetext),
                                      1
                                      /* TEXT */
                                    ),
                                    vue.createElementVNode(
                                      "text",
                                      { class: "project" },
                                      vue.toDisplayString(item.typetext),
                                      1
                                      /* TEXT */
                                    )
                                  ]),
                                  vue.createElementVNode(
                                    "text",
                                    { class: "time" },
                                    vue.toDisplayString(item.registertime),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                vue.createCommentVNode(' 	<view class="right-box">\n									<img style="width: 30px;" src="@/static/tabbar-icons/feeds.png" alt="" />\n									<img style="width: 30px;" src="@/static/tabbar-icons/feeds.png" alt="" />\n									<img style="width: 30px;" src="@/static/tabbar-icons/feeds.png" alt="" />\n									<img style="width: 30px;" src="@/static/tabbar-icons/feeds.png" alt="" />\n								</view> ')
                              ], 8, ["onClick"])
                            ]),
                            _: 2
                            /* DYNAMIC */
                          }, 1032, ["right-options", "onClick"]);
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]),
                    _: 1
                    /* STABLE */
                  },
                  512
                  /* NEED_PATCH */
                )) : (vue.openBlock(), vue.createBlock(_component_u_empty, {
                  key: 1,
                  style: { "margin-top": "40px" },
                  text: "暂无数据",
                  mode: "list"
                }))
              ])
            ])
          ],
          64
          /* STABLE_FRAGMENT */
        );
      };
    }
  };
  const PagesSampleDetectionIndex = /* @__PURE__ */ _export_sfc(_sfc_main$17, [["__scopeId", "data-v-db08574c"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/index.vue"]]);
  function broadcast(componentName, eventName, params) {
  }
  const Emitter = {
    methods: {
      /**
       * 派发 (向上查找) (一个)
       * @param componentName // 需要找的组件的名称
       * @param eventName // 事件名称
       * @param params // 需要传递的参数
       */
      dispatch(componentName, eventName, params) {
        let parent = this.$parent || this.$root;
        let name = parent.$options.name;
        while (parent && (!name || name !== componentName)) {
          parent = parent.$parent;
          if (parent) {
            name = parent.$options.name;
          }
        }
        if (parent) {
          parent[eventName](params);
        }
      },
      /**
       * 广播 (向下查找) (广播多个)
       * @param componentName // 需要找的组件的名称
       * @param eventName // 事件名称
       * @param params // 需要传递的参数
       */
      broadcast(componentName, eventName, params) {
        broadcast.call(this, componentName, eventName, params);
      }
    }
  };
  const _sfc_main$16 = {
    name: "u-input",
    emits: ["update:modelValue", "input", "change", "confirm", "clear", "blur", "focus", "click", "touchstart"],
    mixins: [Emitter],
    props: {
      value: {
        type: [String, Number],
        default: ""
      },
      modelValue: {
        type: [String, Number],
        default: ""
      },
      // 输入框的类型，textarea，text，number
      type: {
        type: String,
        default: "text"
      },
      inputAlign: {
        type: String,
        default: ""
      },
      placeholder: {
        type: String,
        default: "请输入内容"
      },
      disabled: {
        type: Boolean,
        default: false
      },
      maxlength: {
        type: [Number, String],
        default: 140
      },
      placeholderStyle: {
        type: String,
        default: "color: #c0c4cc;"
      },
      confirmType: {
        type: String,
        default: "done"
      },
      // 输入框的自定义样式
      customStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 如果 textarea 是在一个 position:fixed 的区域，需要显示指定属性 fixed 为 true
      fixed: {
        type: Boolean,
        default: false
      },
      // 是否自动获得焦点
      focus: {
        type: Boolean,
        default: false
      },
      // 密码类型时，是否显示右侧的密码图标
      passwordIcon: {
        type: Boolean,
        default: true
      },
      // input|textarea是否显示边框
      border: {
        type: Boolean,
        default: false
      },
      // 输入框的边框颜色
      borderColor: {
        type: String,
        default: "#dcdfe6"
      },
      autoHeight: {
        type: Boolean,
        default: true
      },
      // type=select时，旋转右侧的图标，标识当前处于打开还是关闭select的状态
      // open-打开，close-关闭
      selectOpen: {
        type: Boolean,
        default: false
      },
      // 高度，单位rpx
      height: {
        type: [Number, String],
        default: ""
      },
      // 是否可清空
      clearable: {
        type: [Boolean, String]
      },
      // 指定光标与键盘的距离，单位 px
      cursorSpacing: {
        type: [Number, String],
        default: 0
      },
      // 光标起始位置，自动聚焦时有效，需与selection-end搭配使用
      selectionStart: {
        type: [Number, String],
        default: -1
      },
      // 光标结束位置，自动聚焦时有效，需与selection-start搭配使用
      selectionEnd: {
        type: [Number, String],
        default: -1
      },
      // 是否自动去除两端的空格
      trim: {
        type: Boolean,
        default: true
      },
      // 是否显示键盘上方带有”完成“按钮那一栏
      showConfirmbar: {
        type: Boolean,
        default: true
      },
      // 弹出键盘时是否自动调节高度，uni-app默认值是true
      adjustPosition: {
        type: Boolean,
        default: true
      },
      // input的背景色
      backgroundColor: {
        type: String
      },
      // input的padding
      padding: {
        type: String
      }
    },
    data() {
      return {
        defaultValue: "",
        inputHeight: 70,
        // input的高度
        textareaHeight: 100,
        // textarea的高度
        validateState: false,
        // 当前input的验证状态，用于错误时，边框是否改为红色
        focused: false,
        // 当前是否处于获得焦点的状态
        showPassword: false,
        // 是否预览密码
        lastValue: "",
        // 用于头条小程序，判断@input中，前后的值是否发生了变化，因为头条中文下，按下键没有输入内容，也会触发@input时间
        uForm: {
          inputAlign: "",
          clearable: ""
        }
      };
    },
    watch: {
      valueCom(nVal, oVal) {
        this.defaultValue = nVal;
        if (nVal != oVal && this.type == "select")
          this.handleInput({
            detail: {
              value: nVal
            }
          });
      }
    },
    computed: {
      valueCom() {
        return this.modelValue;
      },
      inputAlignCom() {
        return this.inputAlign || this.uForm.inputAlign || "left";
      },
      clearableCom() {
        if (typeof this.clearable == "boolean")
          return this.clearable;
        if (typeof this.uForm.clearable == "boolean")
          return this.uForm.clearable;
        return true;
      },
      // 因为uniapp的input组件的maxlength组件必须要数值，这里转为数值，给用户可以传入字符串数值
      inputMaxlength() {
        return Number(this.maxlength);
      },
      getStyle() {
        let style = {};
        style.minHeight = this.height ? this.height + "rpx" : this.type == "textarea" ? this.textareaHeight + "rpx" : this.inputHeight + "rpx";
        style = Object.assign(style, this.customStyle);
        return style;
      },
      //
      getCursorSpacing() {
        return Number(this.cursorSpacing);
      },
      // 光标起始位置
      uSelectionStart() {
        return String(this.selectionStart);
      },
      // 光标结束位置
      uSelectionEnd() {
        return String(this.selectionEnd);
      }
    },
    created() {
      this.defaultValue = this.valueCom;
    },
    mounted() {
      let parent = this.$u.$parent.call(this, "u-form");
      if (parent) {
        Object.keys(this.uForm).map((key) => {
          this.uForm[key] = parent[key];
        });
      }
    },
    methods: {
      /**
       * change 事件
       * @param event
       */
      handleInput(event) {
        let value = event.detail.value;
        if (this.trim)
          value = this.$u.trim(value);
        this.$emit("input", value);
        this.$emit("update:modelValue", value);
        this.defaultValue = value;
        setTimeout(() => {
          this.dispatch("u-form-item", "onFieldChange", value);
        }, 40);
      },
      /**
       * blur 事件
       * @param event
       */
      handleBlur(event) {
        setTimeout(() => {
          this.focused = false;
        }, 100);
        this.$emit("blur", event.detail.value);
        setTimeout(() => {
          this.dispatch("u-form-item", "onFieldBlur", event.detail.value);
        }, 40);
      },
      onFormItemError(status) {
        this.validateState = status;
      },
      onFocus(event) {
        this.focused = true;
        this.$emit("focus");
      },
      onConfirm(e) {
        this.$emit("confirm", e.detail.value);
      },
      onClear(event) {
        this.$emit("input", "");
        this.$emit("update:modelValue", "");
        this.$emit("clear");
      },
      inputClick() {
        this.$emit("click");
      }
    }
  };
  function _sfc_render$u(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_icon = resolveEasycom(vue.resolveDynamicComponent("u-icon"), __easycom_0$6);
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["u-input", {
          "u-input--border": $props.border,
          "u-input--error": $data.validateState
        }]),
        style: vue.normalizeStyle({
          padding: $props.padding ? $props.padding : `0 ${$props.border ? 20 : 0}rpx`,
          borderColor: $props.borderColor,
          textAlign: $options.inputAlignCom,
          backgroundColor: $props.backgroundColor
        }),
        onClick: _cache[10] || (_cache[10] = vue.withModifiers((...args) => $options.inputClick && $options.inputClick(...args), ["stop"]))
      },
      [
        $props.type == "textarea" ? (vue.openBlock(), vue.createElementBlock("textarea", {
          key: 0,
          class: "u-input__input u-input__textarea",
          style: vue.normalizeStyle([$options.getStyle]),
          value: $data.defaultValue,
          placeholder: $props.placeholder,
          placeholderStyle: $props.placeholderStyle,
          disabled: $props.disabled,
          maxlength: $options.inputMaxlength,
          fixed: $props.fixed,
          focus: $props.focus,
          autoHeight: $props.autoHeight,
          "selection-end": $options.uSelectionEnd,
          "selection-start": $options.uSelectionStart,
          "cursor-spacing": $options.getCursorSpacing,
          "show-confirm-bar": $props.showConfirmbar,
          "adjust-position": $props.adjustPosition,
          onInput: _cache[0] || (_cache[0] = (...args) => $options.handleInput && $options.handleInput(...args)),
          onBlur: _cache[1] || (_cache[1] = (...args) => $options.handleBlur && $options.handleBlur(...args)),
          onFocus: _cache[2] || (_cache[2] = (...args) => $options.onFocus && $options.onFocus(...args)),
          onConfirm: _cache[3] || (_cache[3] = (...args) => $options.onConfirm && $options.onConfirm(...args))
        }, null, 44, ["value", "placeholder", "placeholderStyle", "disabled", "maxlength", "fixed", "focus", "autoHeight", "selection-end", "selection-start", "cursor-spacing", "show-confirm-bar", "adjust-position"])) : (vue.openBlock(), vue.createElementBlock("input", {
          key: 1,
          class: "u-input__input",
          type: $props.type == "password" ? "text" : $props.type,
          style: vue.normalizeStyle([$options.getStyle]),
          value: $data.defaultValue,
          password: $props.type == "password" && !$data.showPassword,
          placeholder: $props.placeholder,
          placeholderStyle: $props.placeholderStyle,
          disabled: $props.disabled || $props.type === "select",
          maxlength: $options.inputMaxlength,
          focus: $props.focus,
          confirmType: $props.confirmType,
          "cursor-spacing": $options.getCursorSpacing,
          "selection-end": $options.uSelectionEnd,
          "selection-start": $options.uSelectionStart,
          "show-confirm-bar": $props.showConfirmbar,
          "adjust-position": $props.adjustPosition,
          onFocus: _cache[4] || (_cache[4] = (...args) => $options.onFocus && $options.onFocus(...args)),
          onBlur: _cache[5] || (_cache[5] = (...args) => $options.handleBlur && $options.handleBlur(...args)),
          onInput: _cache[6] || (_cache[6] = (...args) => $options.handleInput && $options.handleInput(...args)),
          onConfirm: _cache[7] || (_cache[7] = (...args) => $options.onConfirm && $options.onConfirm(...args))
        }, null, 44, ["type", "value", "password", "placeholder", "placeholderStyle", "disabled", "maxlength", "focus", "confirmType", "cursor-spacing", "selection-end", "selection-start", "show-confirm-bar", "adjust-position"])),
        vue.createElementVNode("view", { class: "u-input__right-icon u-flex" }, [
          $options.clearableCom && $options.valueCom != "" && $data.focused ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 0,
            class: "u-input__right-icon__clear u-input__right-icon__item",
            onClick: _cache[8] || (_cache[8] = (...args) => $options.onClear && $options.onClear(...args))
          }, [
            vue.createVNode(_component_u_icon, {
              size: "32",
              name: "close-circle-fill",
              color: "#c0c4cc"
            })
          ])) : vue.createCommentVNode("v-if", true),
          $props.passwordIcon && $props.type == "password" ? (vue.openBlock(), vue.createElementBlock("view", {
            key: 1,
            class: "u-input__right-icon__clear u-input__right-icon__item"
          }, [
            vue.createVNode(_component_u_icon, {
              size: "32",
              name: !$data.showPassword ? "eye" : "eye-fill",
              color: "#c0c4cc",
              onClick: _cache[9] || (_cache[9] = ($event) => $data.showPassword = !$data.showPassword)
            }, null, 8, ["name"])
          ])) : vue.createCommentVNode("v-if", true),
          $props.type == "select" ? (vue.openBlock(), vue.createElementBlock(
            "view",
            {
              key: 2,
              class: vue.normalizeClass(["u-input__right-icon--select u-input__right-icon__item", {
                "u-input__right-icon--select--reverse": $props.selectOpen
              }])
            },
            [
              vue.createVNode(_component_u_icon, {
                name: "arrow-down-fill",
                size: "26",
                color: "#c0c4cc"
              })
            ],
            2
            /* CLASS */
          )) : vue.createCommentVNode("v-if", true)
        ])
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_2$2 = /* @__PURE__ */ _export_sfc(_sfc_main$16, [["render", _sfc_render$u], ["__scopeId", "data-v-dc846cb1"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-input/u-input.vue"]]);
  function _extends() {
    _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  var formatRegExp = /%[sdj%]/g;
  var warning = function warning2() {
  };
  if (typeof process !== "undefined" && process.env && true && typeof window !== "undefined" && typeof document !== "undefined") {
    warning = function warning2(type2, errors) {
      if (typeof console !== "undefined" && console.warn) {
        if (errors.every(function(e) {
          return typeof e === "string";
        })) {
          formatAppLog("warn", "at uni_modules/vk-uview-ui/libs/util/async-validator.js:30", type2, errors);
        }
      }
    };
  }
  function convertFieldsError(errors) {
    if (!errors || !errors.length)
      return null;
    var fields = {};
    errors.forEach(function(error) {
      var field = error.field;
      fields[field] = fields[field] || [];
      fields[field].push(error);
    });
    return fields;
  }
  function format() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var i = 1;
    var f = args[0];
    var len = args.length;
    if (typeof f === "function") {
      return f.apply(null, args.slice(1));
    }
    if (typeof f === "string") {
      var str = String(f).replace(formatRegExp, function(x) {
        if (x === "%%") {
          return "%";
        }
        if (i >= len) {
          return x;
        }
        switch (x) {
          case "%s":
            return String(args[i++]);
          case "%d":
            return Number(args[i++]);
          case "%j":
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return "[Circular]";
            }
            break;
          default:
            return x;
        }
      });
      for (var arg = args[i]; i < len; arg = args[++i]) {
        str += " " + arg;
      }
      return str;
    }
    return f;
  }
  function isNativeStringType(type2) {
    return type2 === "string" || type2 === "url" || type2 === "hex" || type2 === "email" || type2 === "pattern";
  }
  function isEmptyValue(value, type2) {
    if (value === void 0 || value === null) {
      return true;
    }
    if (type2 === "array" && Array.isArray(value) && !value.length) {
      return true;
    }
    if (isNativeStringType(type2) && typeof value === "string" && !value) {
      return true;
    }
    return false;
  }
  function asyncParallelArray(arr, func2, callback) {
    var results = [];
    var total = 0;
    var arrLength = arr.length;
    function count(errors) {
      results.push.apply(results, errors);
      total++;
      if (total === arrLength) {
        callback(results);
      }
    }
    arr.forEach(function(a) {
      func2(a, count);
    });
  }
  function asyncSerialArray(arr, func2, callback) {
    var index = 0;
    var arrLength = arr.length;
    function next(errors) {
      if (errors && errors.length) {
        callback(errors);
        return;
      }
      var original = index;
      index = index + 1;
      if (original < arrLength) {
        func2(arr[original], next);
      } else {
        callback([]);
      }
    }
    next([]);
  }
  function flattenObjArr(objArr) {
    var ret = [];
    Object.keys(objArr).forEach(function(k) {
      ret.push.apply(ret, objArr[k]);
    });
    return ret;
  }
  function asyncMap(objArr, option, func2, callback) {
    if (option.first) {
      var _pending = new Promise(function(resolve, reject) {
        var next = function next2(errors) {
          callback(errors);
          return errors.length ? reject({
            errors,
            fields: convertFieldsError(errors)
          }) : resolve();
        };
        var flattenArr = flattenObjArr(objArr);
        asyncSerialArray(flattenArr, func2, next);
      });
      _pending["catch"](function(e) {
        return e;
      });
      return _pending;
    }
    var firstFields = option.firstFields || [];
    if (firstFields === true) {
      firstFields = Object.keys(objArr);
    }
    var objArrKeys = Object.keys(objArr);
    var objArrLength = objArrKeys.length;
    var total = 0;
    var results = [];
    var pending = new Promise(function(resolve, reject) {
      var next = function next2(errors) {
        results.push.apply(results, errors);
        total++;
        if (total === objArrLength) {
          callback(results);
          return results.length ? reject({
            errors: results,
            fields: convertFieldsError(results)
          }) : resolve();
        }
      };
      if (!objArrKeys.length) {
        callback(results);
        resolve();
      }
      objArrKeys.forEach(function(key) {
        var arr = objArr[key];
        if (firstFields.indexOf(key) !== -1) {
          asyncSerialArray(arr, func2, next);
        } else {
          asyncParallelArray(arr, func2, next);
        }
      });
    });
    pending["catch"](function(e) {
      return e;
    });
    return pending;
  }
  function complementError(rule) {
    return function(oe) {
      if (oe && oe.message) {
        oe.field = oe.field || rule.fullField;
        return oe;
      }
      return {
        message: typeof oe === "function" ? oe() : oe,
        field: oe.field || rule.fullField
      };
    };
  }
  function deepMerge$1(target, source) {
    if (source) {
      for (var s in source) {
        if (source.hasOwnProperty(s)) {
          var value = source[s];
          if (typeof value === "object" && typeof target[s] === "object") {
            target[s] = _extends({}, target[s], {}, value);
          } else {
            target[s] = value;
          }
        }
      }
    }
    return target;
  }
  function required(rule, value, source, errors, options, type2) {
    if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type2 || rule.type))) {
      errors.push(format(options.messages.required, rule.fullField));
    }
  }
  function whitespace(rule, value, source, errors, options) {
    if (/^\s+$/.test(value) || value === "") {
      errors.push(format(options.messages.whitespace, rule.fullField));
    }
  }
  var pattern = {
    // http://emailregex.com/
    email: /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
    url: new RegExp(
      "^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$",
      "i"
    ),
    hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
  };
  var types = {
    integer: function integer2(value) {
      return types.number(value) && parseInt(value, 10) === value;
    },
    "float": function float(value) {
      return types.number(value) && !types.integer(value);
    },
    array: function array2(value) {
      return Array.isArray(value);
    },
    regexp: function regexp2(value) {
      if (value instanceof RegExp) {
        return true;
      }
      try {
        return !!new RegExp(value);
      } catch (e) {
        return false;
      }
    },
    date: function date2(value) {
      return typeof value.getTime === "function" && typeof value.getMonth === "function" && typeof value.getYear === "function";
    },
    number: function number2(value) {
      if (isNaN(value)) {
        return false;
      }
      return typeof +value === "number";
    },
    object: function object2(value) {
      return typeof value === "object" && !types.array(value);
    },
    method: function method2(value) {
      return typeof value === "function";
    },
    email: function email2(value) {
      return typeof value === "string" && !!value.match(pattern.email) && value.length < 255;
    },
    url: function url2(value) {
      return typeof value === "string" && !!value.match(pattern.url);
    },
    hex: function hex(value) {
      return typeof value === "string" && !!value.match(pattern.hex);
    }
  };
  function type$1(rule, value, source, errors, options) {
    if (rule.required && value === void 0) {
      required(rule, value, source, errors, options);
      return;
    }
    var custom = ["integer", "float", "array", "regexp", "object", "method", "email", "number", "date", "url", "hex"];
    var ruleType = rule.type;
    if (custom.indexOf(ruleType) > -1) {
      if (!types[ruleType](value)) {
        errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
      }
    } else if (ruleType && typeof value !== rule.type) {
      errors.push(format(options.messages.types[ruleType], rule.fullField, rule.type));
    }
  }
  function range$1(rule, value, source, errors, options) {
    var len = typeof rule.len === "number";
    var min = typeof rule.min === "number";
    var max = typeof rule.max === "number";
    var spRegexp = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    var val = value;
    var key = null;
    var num = typeof value === "number";
    var str = typeof value === "string";
    var arr = Array.isArray(value);
    if (num) {
      key = "number";
    } else if (str) {
      key = "string";
    } else if (arr) {
      key = "array";
    }
    if (!key) {
      return false;
    }
    if (arr) {
      val = value.length;
    }
    if (str) {
      val = value.replace(spRegexp, "_").length;
    }
    if (len) {
      if (val !== rule.len) {
        errors.push(format(options.messages[key].len, rule.fullField, rule.len));
      }
    } else if (min && !max && val < rule.min) {
      errors.push(format(options.messages[key].min, rule.fullField, rule.min));
    } else if (max && !min && val > rule.max) {
      errors.push(format(options.messages[key].max, rule.fullField, rule.max));
    } else if (min && max && (val < rule.min || val > rule.max)) {
      errors.push(format(options.messages[key].range, rule.fullField, rule.min, rule.max));
    }
  }
  var ENUM = "enum";
  function enumerable(rule, value, source, errors, options) {
    rule[ENUM] = Array.isArray(rule[ENUM]) ? rule[ENUM] : [];
    if (rule[ENUM].indexOf(value) === -1) {
      errors.push(format(options.messages[ENUM], rule.fullField, rule[ENUM].join(", ")));
    }
  }
  function pattern$1(rule, value, source, errors, options) {
    if (rule.pattern) {
      if (rule.pattern instanceof RegExp) {
        rule.pattern.lastIndex = 0;
        if (!rule.pattern.test(value)) {
          errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        }
      } else if (typeof rule.pattern === "string") {
        var _pattern = new RegExp(rule.pattern);
        if (!_pattern.test(value)) {
          errors.push(format(options.messages.pattern.mismatch, rule.fullField, value, rule.pattern));
        }
      }
    }
  }
  var rules = {
    required,
    whitespace,
    type: type$1,
    range: range$1,
    "enum": enumerable,
    pattern: pattern$1
  };
  function string$1(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, "string") && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options, "string");
      if (!isEmptyValue(value, "string")) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
        rules.pattern(rule, value, source, errors, options);
        if (rule.whitespace === true) {
          rules.whitespace(rule, value, source, errors, options);
        }
      }
    }
    callback(errors);
  }
  function method(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function number$1(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (value === "") {
        value = void 0;
      }
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function _boolean(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function regexp(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (!isEmptyValue(value)) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function integer(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function floatFn(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function array$1(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, "array") && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options, "array");
      if (!isEmptyValue(value, "array")) {
        rules.type(rule, value, source, errors, options);
        rules.range(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function object$1(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  var ENUM$1 = "enum";
  function enumerable$1(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (value !== void 0) {
        rules[ENUM$1](rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function pattern$2(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, "string") && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (!isEmptyValue(value, "string")) {
        rules.pattern(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function date$1(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
      if (!isEmptyValue(value)) {
        var dateObject;
        if (typeof value === "number") {
          dateObject = new Date(value);
        } else {
          dateObject = value;
        }
        rules.type(rule, dateObject, source, errors, options);
        if (dateObject) {
          rules.range(rule, dateObject.getTime(), source, errors, options);
        }
      }
    }
    callback(errors);
  }
  function required$1(rule, value, callback, source, options) {
    var errors = [];
    var type2 = Array.isArray(value) ? "array" : typeof value;
    rules.required(rule, value, source, errors, options, type2);
    callback(errors);
  }
  function type$1$1(rule, value, callback, source, options) {
    var ruleType = rule.type;
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value, ruleType) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options, ruleType);
      if (!isEmptyValue(value, ruleType)) {
        rules.type(rule, value, source, errors, options);
      }
    }
    callback(errors);
  }
  function any(rule, value, callback, source, options) {
    var errors = [];
    var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
    if (validate) {
      if (isEmptyValue(value) && !rule.required) {
        return callback();
      }
      rules.required(rule, value, source, errors, options);
    }
    callback(errors);
  }
  var validators = {
    string: string$1,
    method,
    number: number$1,
    "boolean": _boolean,
    regexp,
    integer,
    "float": floatFn,
    array: array$1,
    object: object$1,
    "enum": enumerable$1,
    pattern: pattern$2,
    date: date$1,
    url: type$1$1,
    hex: type$1$1,
    email: type$1$1,
    required: required$1,
    any
  };
  function newMessages() {
    return {
      "default": "Validation error on field %s",
      required: "%s is required",
      "enum": "%s must be one of %s",
      whitespace: "%s cannot be empty",
      date: {
        format: "%s date %s is invalid for format %s",
        parse: "%s date could not be parsed, %s is invalid ",
        invalid: "%s date %s is invalid"
      },
      types: {
        string: "%s is not a %s",
        method: "%s is not a %s (function)",
        array: "%s is not an %s",
        object: "%s is not an %s",
        number: "%s is not a %s",
        date: "%s is not a %s",
        "boolean": "%s is not a %s",
        integer: "%s is not an %s",
        "float": "%s is not a %s",
        regexp: "%s is not a valid %s",
        email: "%s is not a valid %s",
        url: "%s is not a valid %s",
        hex: "%s is not a valid %s"
      },
      string: {
        len: "%s must be exactly %s characters",
        min: "%s must be at least %s characters",
        max: "%s cannot be longer than %s characters",
        range: "%s must be between %s and %s characters"
      },
      number: {
        len: "%s must equal %s",
        min: "%s cannot be less than %s",
        max: "%s cannot be greater than %s",
        range: "%s must be between %s and %s"
      },
      array: {
        len: "%s must be exactly %s in length",
        min: "%s cannot be less than %s in length",
        max: "%s cannot be greater than %s in length",
        range: "%s must be between %s and %s in length"
      },
      pattern: {
        mismatch: "%s value %s does not match pattern %s"
      },
      clone: function clone() {
        var cloned = JSON.parse(JSON.stringify(this));
        cloned.clone = this.clone;
        return cloned;
      }
    };
  }
  var messages = newMessages();
  function Schema(descriptor) {
    this.rules = null;
    this._messages = messages;
    this.define(descriptor);
  }
  Schema.prototype = {
    messages: function messages2(_messages) {
      if (_messages) {
        this._messages = deepMerge$1(newMessages(), _messages);
      }
      return this._messages;
    },
    define: function define2(rules2) {
      if (!rules2) {
        throw new Error("Cannot configure a schema with no rules");
      }
      if (typeof rules2 !== "object" || Array.isArray(rules2)) {
        throw new Error("Rules must be an object");
      }
      this.rules = {};
      var z;
      var item;
      for (z in rules2) {
        if (rules2.hasOwnProperty(z)) {
          item = rules2[z];
          this.rules[z] = Array.isArray(item) ? item : [item];
        }
      }
    },
    validate: function validate(source_, o, oc) {
      var _this = this;
      if (o === void 0) {
        o = {};
      }
      if (oc === void 0) {
        oc = function oc2() {
        };
      }
      var source = source_;
      var options = o;
      var callback = oc;
      if (typeof options === "function") {
        callback = options;
        options = {};
      }
      if (!this.rules || Object.keys(this.rules).length === 0) {
        if (callback) {
          callback();
        }
        return Promise.resolve();
      }
      function complete(results) {
        var i;
        var errors = [];
        var fields = {};
        function add(e) {
          if (Array.isArray(e)) {
            var _errors;
            errors = (_errors = errors).concat.apply(_errors, e);
          } else {
            errors.push(e);
          }
        }
        for (i = 0; i < results.length; i++) {
          add(results[i]);
        }
        if (!errors.length) {
          errors = null;
          fields = null;
        } else {
          fields = convertFieldsError(errors);
        }
        callback(errors, fields);
      }
      if (options.messages) {
        var messages$1 = this.messages();
        if (messages$1 === messages) {
          messages$1 = newMessages();
        }
        deepMerge$1(messages$1, options.messages);
        options.messages = messages$1;
      } else {
        options.messages = this.messages();
      }
      var arr;
      var value;
      var series = {};
      var keys = options.keys || Object.keys(this.rules);
      keys.forEach(function(z) {
        arr = _this.rules[z];
        value = source[z];
        arr.forEach(function(r) {
          var rule = r;
          if (typeof rule.transform === "function") {
            if (source === source_) {
              source = _extends({}, source);
            }
            value = source[z] = rule.transform(value);
          }
          if (typeof rule === "function") {
            rule = {
              validator: rule
            };
          } else {
            rule = _extends({}, rule);
          }
          rule.validator = _this.getValidationMethod(rule);
          rule.field = z;
          rule.fullField = rule.fullField || z;
          rule.type = _this.getType(rule);
          if (!rule.validator) {
            return;
          }
          series[z] = series[z] || [];
          series[z].push({
            rule,
            value,
            source,
            field: z
          });
        });
      });
      var errorFields = {};
      return asyncMap(series, options, function(data, doIt) {
        var rule = data.rule;
        var deep = (rule.type === "object" || rule.type === "array") && (typeof rule.fields === "object" || typeof rule.defaultField === "object");
        deep = deep && (rule.required || !rule.required && data.value);
        rule.field = data.field;
        function addFullfield(key, schema) {
          return _extends({}, schema, {
            fullField: rule.fullField + "." + key
          });
        }
        function cb(e) {
          if (e === void 0) {
            e = [];
          }
          var errors = e;
          if (!Array.isArray(errors)) {
            errors = [errors];
          }
          if (!options.suppressWarning && errors.length) {
            Schema.warning("async-validator:", errors);
          }
          if (errors.length && rule.message) {
            errors = [].concat(rule.message);
          }
          errors = errors.map(complementError(rule));
          if (options.first && errors.length) {
            errorFields[rule.field] = 1;
            return doIt(errors);
          }
          if (!deep) {
            doIt(errors);
          } else {
            if (rule.required && !data.value) {
              if (rule.message) {
                errors = [].concat(rule.message).map(complementError(rule));
              } else if (options.error) {
                errors = [options.error(rule, format(options.messages.required, rule.field))];
              } else {
                errors = [];
              }
              return doIt(errors);
            }
            var fieldsSchema = {};
            if (rule.defaultField) {
              for (var k in data.value) {
                if (data.value.hasOwnProperty(k)) {
                  fieldsSchema[k] = rule.defaultField;
                }
              }
            }
            fieldsSchema = _extends({}, fieldsSchema, {}, data.rule.fields);
            for (var f in fieldsSchema) {
              if (fieldsSchema.hasOwnProperty(f)) {
                var fieldSchema = Array.isArray(fieldsSchema[f]) ? fieldsSchema[f] : [fieldsSchema[f]];
                fieldsSchema[f] = fieldSchema.map(addFullfield.bind(null, f));
              }
            }
            var schema = new Schema(fieldsSchema);
            schema.messages(options.messages);
            if (data.rule.options) {
              data.rule.options.messages = options.messages;
              data.rule.options.error = options.error;
            }
            schema.validate(data.value, data.rule.options || options, function(errs) {
              var finalErrors = [];
              if (errors && errors.length) {
                finalErrors.push.apply(finalErrors, errors);
              }
              if (errs && errs.length) {
                finalErrors.push.apply(finalErrors, errs);
              }
              doIt(finalErrors.length ? finalErrors : null);
            });
          }
        }
        var res;
        if (rule.asyncValidator) {
          res = rule.asyncValidator(rule, data.value, cb, data.source, options);
        } else if (rule.validator) {
          res = rule.validator(rule, data.value, cb, data.source, options);
          if (res === true) {
            cb();
          } else if (res === false) {
            cb(rule.message || rule.field + " fails");
          } else if (res instanceof Array) {
            cb(res);
          } else if (res instanceof Error) {
            cb(res.message);
          }
        }
        if (res && res.then) {
          res.then(function() {
            return cb();
          }, function(e) {
            return cb(e);
          });
        }
      }, function(results) {
        complete(results);
      });
    },
    getType: function getType(rule) {
      if (rule.type === void 0 && rule.pattern instanceof RegExp) {
        rule.type = "pattern";
      }
      if (typeof rule.validator !== "function" && rule.type && !validators.hasOwnProperty(rule.type)) {
        throw new Error(format("Unknown rule type %s", rule.type));
      }
      return rule.type || "string";
    },
    getValidationMethod: function getValidationMethod(rule) {
      if (typeof rule.validator === "function") {
        return rule.validator;
      }
      var keys = Object.keys(rule);
      var messageIndex = keys.indexOf("message");
      if (messageIndex !== -1) {
        keys.splice(messageIndex, 1);
      }
      if (keys.length === 1 && keys[0] === "required") {
        return validators.required;
      }
      return validators[this.getType(rule)] || false;
    }
  };
  Schema.register = function register(type2, validator) {
    if (typeof validator !== "function") {
      throw new Error("Cannot register a validator by type, validator is not a function");
    }
    validators[type2] = validator;
  };
  Schema.warning = warning;
  Schema.messages = messages;
  Schema.warning = function() {
  };
  const _sfc_main$15 = {
    name: "u-form-item",
    mixins: [Emitter],
    inject: {
      uForm: {
        default() {
          return null;
        }
      }
    },
    props: {
      // input的label提示语
      label: {
        type: String,
        default: ""
      },
      // 绑定的值
      prop: {
        type: String,
        default: ""
      },
      // 是否显示表单域的下划线边框
      borderBottom: {
        type: [String, Boolean],
        default: ""
      },
      // label的位置，left-左边，top-上边
      labelPosition: {
        type: String,
        default: ""
      },
      // label的宽度，单位rpx
      labelWidth: {
        type: [String, Number],
        default: ""
      },
      // lable的样式，对象形式
      labelStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // lable字体的对齐方式
      labelAlign: {
        type: String,
        default: ""
      },
      // 右侧图标
      rightIcon: {
        type: String,
        default: ""
      },
      // 左侧图标
      leftIcon: {
        type: String,
        default: ""
      },
      // 左侧图标的样式
      leftIconStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 左侧图标的样式
      rightIconStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 是否显示左边的必填星号，只作显示用，具体校验必填的逻辑，请在rules中配置
      required: {
        type: Boolean,
        default: false
      },
      inputAlign: {
        type: String,
        default: ""
      }
    },
    data() {
      return {
        initialValue: "",
        // 存储的默认值
        // isRequired: false, // 是否必填，由于人性化考虑，必填"*"号通过props的required配置，不再通过rules的规则自动生成
        validateState: "",
        // 是否校验成功
        validateMessage: "",
        // 校验失败的提示语
        // 有错误时的提示方式，message-提示信息，border-如果input设置了边框，变成呈红色，
        errorType: ["message"],
        fieldValue: "",
        // 获取当前子组件input的输入的值
        // 父组件的参数，在computed计算中，无法得知this.parent发生变化，故将父组件的参数值，放到data中
        parentData: {
          borderBottom: true,
          labelWidth: 90,
          labelPosition: "left",
          labelStyle: {},
          labelAlign: "left",
          inputAlign: "left"
        }
      };
    },
    watch: {
      validateState(val) {
        this.broadcastInputError();
      },
      // 监听u-form组件的errorType的变化
      "uForm.errorType"(val) {
        this.errorType = val;
        this.broadcastInputError();
      }
    },
    computed: {
      // 计算后的label宽度，由于需要多个判断，故放到computed中
      uLabelWidth() {
        return this.elLabelPosition == "left" ? this.label === "true" || this.label === "" ? "auto" : this.$u.addUnit(this.elLabelWidth) : "100%";
      },
      showError() {
        return (type2) => {
          if (this.errorType.indexOf("none") >= 0)
            return false;
          else if (this.errorType.indexOf(type2) >= 0)
            return true;
          else
            return false;
        };
      },
      // label的宽度
      elLabelWidth() {
        return this.labelWidth != 0 || this.labelWidth != "" ? this.labelWidth : this.parentData.labelWidth ? this.parentData.labelWidth : 90;
      },
      // label的样式
      elLabelStyle() {
        return Object.keys(this.labelStyle).length ? this.labelStyle : this.parentData.labelStyle ? this.parentData.labelStyle : {};
      },
      // label的位置，左侧或者上方
      elLabelPosition() {
        return this.labelPosition ? this.labelPosition : this.parentData.labelPosition ? this.parentData.labelPosition : "left";
      },
      // label的对齐方式
      elLabelAlign() {
        return this.labelAlign ? this.labelAlign : this.parentData.labelAlign ? this.parentData.labelAlign : "left";
      },
      // label的下划线
      elBorderBottom() {
        return this.borderBottom !== "" ? this.borderBottom : this.parentData.borderBottom ? this.parentData.borderBottom : true;
      },
      elInputAlign() {
        return this.inputAlign ? this.inputAlign : this.parentData.inputAlign ? this.parentData.inputAlign : "left";
      }
    },
    methods: {
      broadcastInputError() {
        this.broadcast("u-input", "onFormItemError", this.validateState === "error" && this.showError("border"));
      },
      // 判断是否需要required校验
      setRules() {
      },
      // 从u-form的rules属性中，取出当前u-form-item的校验规则
      getRules() {
        let rules2 = this.parent.rules;
        rules2 = rules2 ? rules2[this.prop] : [];
        return [].concat(rules2 || []);
      },
      // blur事件时进行表单校验
      onFieldBlur() {
        this.validation("blur");
      },
      // change事件进行表单校验
      onFieldChange() {
        this.validation("change");
      },
      // 过滤出符合要求的rule规则
      getFilteredRule(triggerType = "") {
        let rules2 = this.getRules();
        if (!triggerType)
          return rules2;
        return rules2.filter((res) => res.trigger && res.trigger.indexOf(triggerType) !== -1);
      },
      getData(dataObj, name, defaultValue) {
        let newDataObj;
        if (dataObj) {
          newDataObj = JSON.parse(JSON.stringify(dataObj));
          let k = "", d = ".", l = "[", r = "]";
          name = name.replace(/\s+/g, k) + d;
          let tstr = k;
          for (let i = 0; i < name.length; i++) {
            let theChar = name.charAt(i);
            if (theChar != d && theChar != l && theChar != r) {
              tstr += theChar;
            } else if (newDataObj) {
              if (tstr != k)
                newDataObj = newDataObj[tstr];
              tstr = k;
            }
          }
        }
        if (typeof newDataObj === "undefined" && typeof defaultValue !== "undefined")
          newDataObj = defaultValue;
        return newDataObj;
      },
      setData(dataObj, name, value) {
        let dataValue;
        if (typeof value === "object") {
          dataValue = JSON.parse(JSON.stringify(value));
        } else {
          dataValue = value;
        }
        let regExp2 = new RegExp("([\\w$]+)|\\[(:\\d)\\]", "g");
        const patten = name.match(regExp2);
        for (let i = 0; i < patten.length - 1; i++) {
          let keyName = patten[i];
          if (typeof dataObj[keyName] !== "object")
            dataObj[keyName] = {};
          dataObj = dataObj[keyName];
        }
        dataObj[patten[patten.length - 1]] = dataValue;
      },
      // 校验数据
      validation(trigger, callback = () => {
      }) {
        this.fieldValue = this.getData(this.parent.model, this.prop);
        let rules2 = this.getFilteredRule(trigger);
        if (!rules2 || rules2.length === 0) {
          return callback("");
        }
        this.validateState = "validating";
        let validator = new Schema({
          [this.prop]: rules2
        });
        validator.validate({
          [this.prop]: this.fieldValue
        }, {
          firstFields: true
        }, (errors, fields) => {
          this.validateState = !errors ? "success" : "error";
          this.validateMessage = errors ? errors[0].message : "";
          let field = errors ? errors[0].field : "";
          callback(this.validateMessage, {
            state: this.validateState,
            key: field,
            msg: this.validateMessage
          });
        });
      },
      // 清空当前的u-form-item
      resetField() {
        this.setData(this.parent.model, this.prop, this.initialValue);
        this.validateState = "success";
      }
    },
    // 组件创建完成时，将当前实例保存到u-form中
    mounted() {
      this.parent = this.$u.$parent.call(this, "u-form");
      if (this.parent) {
        Object.keys(this.parentData).map((key) => {
          this.parentData[key] = this.parent[key];
        });
        if (this.prop) {
          this.parent.fields.push(this);
          this.errorType = this.parent.errorType;
          this.initialValue = this.fieldValue;
          this.$nextTick(() => {
            this.setRules();
          });
        }
      }
    },
    beforeUnmount() {
      if (this.parent && this.prop) {
        this.parent.fields.map((item, index) => {
          if (item === this)
            this.parent.fields.splice(index, 1);
        });
      }
    }
  };
  function _sfc_render$t(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_icon = resolveEasycom(vue.resolveDynamicComponent("u-icon"), __easycom_0$6);
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["u-form-item", { "u-border-bottom": $options.elBorderBottom, "u-form-item__border-bottom--error": $data.validateState === "error" && $options.showError("border-bottom") }])
      },
      [
        vue.createElementVNode(
          "view",
          {
            class: "u-form-item__body",
            style: vue.normalizeStyle({
              flexDirection: $options.elLabelPosition == "left" ? "row" : "column"
            })
          },
          [
            vue.createCommentVNode(' 微信小程序中，将一个参数设置空字符串，结果会变成字符串"true" '),
            vue.createElementVNode(
              "view",
              {
                class: "u-form-item--left",
                style: vue.normalizeStyle({
                  width: $options.uLabelWidth,
                  flex: `0 0 ${$options.uLabelWidth}`,
                  marginBottom: $options.elLabelPosition == "left" ? 0 : "10rpx"
                })
              },
              [
                vue.createCommentVNode(" 为了块对齐 "),
                $props.required || $props.leftIcon || $props.label ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "u-form-item--left__content"
                }, [
                  vue.createCommentVNode(" nvue不支持伪元素before "),
                  $props.required ? (vue.openBlock(), vue.createElementBlock("text", {
                    key: 0,
                    class: "u-form-item--left__content--required"
                  }, "*")) : vue.createCommentVNode("v-if", true),
                  $props.leftIcon ? (vue.openBlock(), vue.createElementBlock("view", {
                    key: 1,
                    class: "u-form-item--left__content__icon"
                  }, [
                    vue.createVNode(_component_u_icon, {
                      name: $props.leftIcon,
                      "custom-style": $props.leftIconStyle
                    }, null, 8, ["name", "custom-style"])
                  ])) : vue.createCommentVNode("v-if", true),
                  vue.createElementVNode(
                    "view",
                    {
                      class: "u-form-item--left__content__label",
                      style: vue.normalizeStyle([$options.elLabelStyle, {
                        "justify-content": $options.elLabelAlign == "left" ? "flex-start" : $options.elLabelAlign == "center" ? "center" : "flex-end"
                      }])
                    },
                    vue.toDisplayString($props.label),
                    5
                    /* TEXT, STYLE */
                  )
                ])) : vue.createCommentVNode("v-if", true)
              ],
              4
              /* STYLE */
            ),
            vue.createElementVNode("view", { class: "u-form-item--right u-flex" }, [
              vue.createElementVNode("view", { class: "u-form-item--right__content" }, [
                vue.createElementVNode(
                  "view",
                  {
                    class: "u-form-item--right__content__slot",
                    style: vue.normalizeStyle($options.elLabelPosition == "left" && $options.elInputAlign == "right" ? "text-align:right;display: inline-block;line-height:initial;" : "")
                  },
                  [
                    vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
                  ],
                  4
                  /* STYLE */
                ),
                _ctx.$slots.right || $props.rightIcon ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "u-form-item--right__content__icon u-flex"
                }, [
                  $props.rightIcon ? (vue.openBlock(), vue.createBlock(_component_u_icon, {
                    key: 0,
                    "custom-style": $props.rightIconStyle,
                    name: $props.rightIcon
                  }, null, 8, ["custom-style", "name"])) : vue.createCommentVNode("v-if", true),
                  vue.renderSlot(_ctx.$slots, "right", {}, void 0, true)
                ])) : vue.createCommentVNode("v-if", true)
              ])
            ])
          ],
          4
          /* STYLE */
        ),
        $data.validateState === "error" && $options.showError("message") ? (vue.openBlock(), vue.createElementBlock(
          "view",
          {
            key: 0,
            class: "u-form-item__message",
            style: vue.normalizeStyle({
              paddingLeft: $options.elLabelPosition == "left" ? _ctx.$u.addUnit($options.elLabelWidth) : "0",
              textAlign: $options.elInputAlign == "right" ? "right" : "left"
            })
          },
          vue.toDisplayString($data.validateMessage),
          5
          /* TEXT, STYLE */
        )) : vue.createCommentVNode("v-if", true)
      ],
      2
      /* CLASS */
    );
  }
  const __easycom_3$1 = /* @__PURE__ */ _export_sfc(_sfc_main$15, [["render", _sfc_render$t], ["__scopeId", "data-v-361fbc0d"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-form-item/u-form-item.vue"]]);
  const _sfc_main$14 = {
    name: "u-image",
    emits: ["click", "error", "load"],
    props: {
      // 图片地址
      src: {
        type: String,
        default: ""
      },
      // 裁剪模式
      mode: {
        type: String,
        default: "aspectFill"
      },
      // 宽度，单位任意
      width: {
        type: [String, Number],
        default: "100%"
      },
      // 高度，单位任意
      height: {
        type: [String, Number],
        default: "auto"
      },
      // 图片形状，circle-圆形，square-方形
      shape: {
        type: String,
        default: "square"
      },
      // 圆角，单位任意
      borderRadius: {
        type: [String, Number],
        default: 0
      },
      // 是否懒加载，微信小程序、App、百度小程序、字节跳动小程序
      lazyLoad: {
        type: Boolean,
        default: true
      },
      // 开启长按图片显示识别微信小程序码菜单
      showMenuByLongpress: {
        type: Boolean,
        default: true
      },
      // 加载中的图标，或者小图片
      loadingIcon: {
        type: String,
        default: "photo"
      },
      // 加载失败的图标，或者小图片
      errorIcon: {
        type: String,
        default: "error-circle"
      },
      // 是否显示加载中的图标或者自定义的slot
      showLoading: {
        type: Boolean,
        default: true
      },
      // 是否显示加载错误的图标或者自定义的slot
      showError: {
        type: Boolean,
        default: true
      },
      // 是否需要淡入效果
      fade: {
        type: Boolean,
        default: true
      },
      // 只支持网络资源，只对微信小程序有效
      webp: {
        type: Boolean,
        default: false
      },
      // 过渡时间，单位ms
      duration: {
        type: [String, Number],
        default: 500
      },
      // 背景颜色，用于深色页面加载图片时，为了和背景色融合
      bgColor: {
        type: String,
        default: "#f3f4f6"
      }
    },
    data() {
      return {
        // 图片是否加载错误，如果是，则显示错误占位图
        isError: false,
        // 初始化组件时，默认为加载中状态
        loading: true,
        // 不透明度，为了实现淡入淡出的效果
        opacity: 1,
        // 过渡时间，因为props的值无法修改，故需要一个中间值
        durationTime: this.duration,
        // 图片加载完成时，去掉背景颜色，因为如果是png图片，就会显示灰色的背景
        backgroundStyle: {}
      };
    },
    watch: {
      src: {
        immediate: true,
        handler(n) {
          if (!n) {
            this.isError = true;
            this.loading = false;
          } else {
            this.isError = false;
            this.loading = true;
          }
        }
      }
    },
    computed: {
      wrapStyle() {
        let style = {};
        style.width = this.$u.addUnit(this.width);
        style.height = this.$u.addUnit(this.height);
        style.borderRadius = this.shape == "circle" ? "50%" : this.$u.addUnit(this.borderRadius);
        style.overflow = this.borderRadius > 0 ? "hidden" : "visible";
        if (this.fade) {
          style.opacity = this.opacity;
          style.transition = `opacity ${Number(this.durationTime) / 1e3}s ease-in-out`;
        }
        return style;
      }
    },
    methods: {
      // 点击图片
      onClick() {
        this.$emit("click");
      },
      // 图片加载失败
      onErrorHandler(err) {
        this.loading = false;
        this.isError = true;
        this.$emit("error", err);
      },
      // 图片加载完成，标记loading结束
      onLoadHandler() {
        this.loading = false;
        this.isError = false;
        this.$emit("load");
        if (!this.fade)
          return this.removeBgColor();
        this.opacity = 0;
        this.durationTime = 0;
        setTimeout(() => {
          this.durationTime = this.duration;
          this.opacity = 1;
          setTimeout(() => {
            this.removeBgColor();
          }, this.durationTime);
        }, 50);
      },
      // 移除图片的背景色
      removeBgColor() {
        this.backgroundStyle = {
          backgroundColor: "transparent"
        };
      }
    }
  };
  function _sfc_render$s(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_icon = resolveEasycom(vue.resolveDynamicComponent("u-icon"), __easycom_0$6);
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: "u-image",
        onClick: _cache[2] || (_cache[2] = (...args) => $options.onClick && $options.onClick(...args)),
        style: vue.normalizeStyle([$options.wrapStyle, $data.backgroundStyle])
      },
      [
        !$data.isError ? (vue.openBlock(), vue.createElementBlock("image", {
          key: 0,
          src: $props.src,
          mode: $props.mode,
          onError: _cache[0] || (_cache[0] = (...args) => $options.onErrorHandler && $options.onErrorHandler(...args)),
          onLoad: _cache[1] || (_cache[1] = (...args) => $options.onLoadHandler && $options.onLoadHandler(...args)),
          "lazy-load": $props.lazyLoad,
          class: "u-image__image",
          "show-menu-by-longpress": $props.showMenuByLongpress,
          style: vue.normalizeStyle({
            borderRadius: $props.shape == "circle" ? "50%" : _ctx.$u.addUnit($props.borderRadius)
          })
        }, null, 44, ["src", "mode", "lazy-load", "show-menu-by-longpress"])) : vue.createCommentVNode("v-if", true),
        $props.showLoading && $data.loading ? (vue.openBlock(), vue.createElementBlock(
          "view",
          {
            key: 1,
            class: "u-image__loading",
            style: vue.normalizeStyle({
              borderRadius: $props.shape == "circle" ? "50%" : _ctx.$u.addUnit($props.borderRadius),
              backgroundColor: $props.bgColor
            })
          },
          [
            _ctx.$slots.loading ? vue.renderSlot(_ctx.$slots, "loading", { key: 0 }, void 0, true) : (vue.openBlock(), vue.createBlock(_component_u_icon, {
              key: 1,
              name: $props.loadingIcon,
              width: $props.width,
              height: $props.height
            }, null, 8, ["name", "width", "height"]))
          ],
          4
          /* STYLE */
        )) : vue.createCommentVNode("v-if", true),
        $props.showError && $data.isError && !$data.loading ? (vue.openBlock(), vue.createElementBlock(
          "view",
          {
            key: 2,
            class: "u-image__error",
            style: vue.normalizeStyle({
              borderRadius: $props.shape == "circle" ? "50%" : _ctx.$u.addUnit($props.borderRadius)
            })
          },
          [
            _ctx.$slots.error ? vue.renderSlot(_ctx.$slots, "error", { key: 0 }, void 0, true) : (vue.openBlock(), vue.createBlock(_component_u_icon, {
              key: 1,
              name: $props.errorIcon,
              width: $props.width,
              height: $props.height
            }, null, 8, ["name", "width", "height"]))
          ],
          4
          /* STYLE */
        )) : vue.createCommentVNode("v-if", true)
      ],
      4
      /* STYLE */
    );
  }
  const __easycom_2$1 = /* @__PURE__ */ _export_sfc(_sfc_main$14, [["render", _sfc_render$s], ["__scopeId", "data-v-6ff2fb1e"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-image/u-image.vue"]]);
  const _sfc_main$13 = {
    name: "u-form",
    props: {
      // 当前form的需要验证字段的集合
      model: {
        type: Object,
        default() {
          return {};
        }
      },
      // 验证规则
      // rules: {
      // 	type: [Object, Function, Array],
      // 	default() {
      // 		return {};
      // 	}
      // },
      // 有错误时的提示方式，message-提示信息，border-如果input设置了边框，变成呈红色，
      // border-bottom-下边框呈现红色，none-无提示
      errorType: {
        type: Array,
        default() {
          return ["message", "toast"];
        }
      },
      // 是否显示表单域的下划线边框
      borderBottom: {
        type: Boolean,
        default: true
      },
      // label的位置，left-左边，top-上边
      labelPosition: {
        type: String,
        default: "left"
      },
      // label的宽度，单位rpx
      labelWidth: {
        type: [String, Number],
        default: 90
      },
      // lable字体的对齐方式
      labelAlign: {
        type: String,
        default: "left"
      },
      // lable的样式，对象形式
      labelStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 表单内所有input的inputAlign属性的值
      inputAlign: {
        type: String,
        default: "left"
      },
      // 表单内所有input的clearable属性的值
      clearable: {
        type: Boolean,
        default: true
      }
    },
    provide() {
      return {
        uForm: this
      };
    },
    data() {
      return {
        rules: {}
      };
    },
    created() {
      this.fields = [];
    },
    methods: {
      setRules(rules2) {
        this.rules = rules2;
      },
      // 清空所有u-form-item组件的内容，本质上是调用了u-form-item组件中的resetField()方法
      resetFields() {
        this.fields.map((field) => {
          field.resetField();
        });
      },
      // 校验全部数据
      validate(callback) {
        return new Promise((resolve) => {
          let valid = true;
          let count = 0;
          let errorArr = [];
          let errorObjArr = [];
          this.fields.map((field) => {
            field.validation("", (errorMsg, errObj) => {
              if (errorMsg) {
                valid = false;
                errorArr.push(errorMsg);
                errorObjArr.push(errObj);
              }
              if (++count === this.fields.length) {
                resolve(valid, errorObjArr[0]);
                if (this.errorType.indexOf("none") === -1 && this.errorType.indexOf("toast") >= 0 && errorArr.length) {
                  this.$u.toast(errorArr[0]);
                }
                if (typeof callback == "function")
                  callback(valid, errorObjArr[0]);
              }
            });
          });
        });
      }
    }
  };
  function _sfc_render$r(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "u-form" }, [
      vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
    ]);
  }
  const __easycom_4$1 = /* @__PURE__ */ _export_sfc(_sfc_main$13, [["render", _sfc_render$r], ["__scopeId", "data-v-000ccc72"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-form/u-form.vue"]]);
  const _sfc_main$12 = {
    name: "u-button",
    emits: ["click", "getphonenumber", "getuserinfo", "error", "opensetting", "launchapp", "chooseavatar"],
    props: {
      // 是否细边框
      hairLine: {
        type: Boolean,
        default: true
      },
      // 按钮的预置样式，default，primary，error，warning，success
      type: {
        type: String,
        default: "default"
      },
      // 按钮尺寸，default，medium，mini
      size: {
        type: String,
        default: "default"
      },
      // 按钮形状，circle（两边为半圆），square（带圆角）
      shape: {
        type: String,
        default: "square"
      },
      // 按钮是否镂空
      plain: {
        type: Boolean,
        default: false
      },
      // 是否禁止状态
      disabled: {
        type: Boolean,
        default: false
      },
      // 是否加载中
      loading: {
        type: Boolean,
        default: false
      },
      // 开放能力，具体请看uniapp稳定关于button组件部分说明
      // https://uniapp.dcloud.io/component/button
      openType: {
        type: String,
        default: ""
      },
      // 用于 <form> 组件，点击分别会触发 <form> 组件的 submit/reset 事件
      // 取值为submit（提交表单），reset（重置表单）
      formType: {
        type: String,
        default: ""
      },
      // 打开 APP 时，向 APP 传递的参数，open-type=launchApp时有效
      // 只微信小程序、QQ小程序有效
      appParameter: {
        type: String,
        default: ""
      },
      // 指定是否阻止本节点的祖先节点出现点击态，微信小程序有效
      hoverStopPropagation: {
        type: Boolean,
        default: false
      },
      // 指定返回用户信息的语言，zh_CN 简体中文，zh_TW 繁体中文，en 英文。只微信小程序有效
      lang: {
        type: String,
        default: "en"
      },
      // 会话来源，open-type="contact"时有效。只微信小程序有效
      sessionFrom: {
        type: String,
        default: ""
      },
      // 会话内消息卡片标题，open-type="contact"时有效
      // 默认当前标题，只微信小程序有效
      sendMessageTitle: {
        type: String,
        default: ""
      },
      // 会话内消息卡片点击跳转小程序路径，open-type="contact"时有效
      // 默认当前分享路径，只微信小程序有效
      sendMessagePath: {
        type: String,
        default: ""
      },
      // 会话内消息卡片图片，open-type="contact"时有效
      // 默认当前页面截图，只微信小程序有效
      sendMessageImg: {
        type: String,
        default: ""
      },
      // 是否显示会话内消息卡片，设置此参数为 true，用户进入客服会话会在右下角显示"可能要发送的小程序"提示，
      // 用户点击后可以快速发送小程序消息，open-type="contact"时有效
      showMessageCard: {
        type: Boolean,
        default: false
      },
      // 手指按（触摸）按钮时按钮时的背景颜色
      hoverBgColor: {
        type: String,
        default: ""
      },
      // 水波纹的背景颜色
      rippleBgColor: {
        type: String,
        default: ""
      },
      // 是否开启水波纹效果
      ripple: {
        type: Boolean,
        default: false
      },
      // 按下的类名
      hoverClass: {
        type: String,
        default: ""
      },
      // 自定义样式，对象形式
      customStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 额外传参参数，用于小程序的data-xxx属性，通过target.dataset.name获取
      dataName: {
        type: String,
        default: ""
      },
      // 节流，一定时间内只能触发一次
      throttleTime: {
        type: [String, Number],
        default: 500
      },
      // 按住后多久出现点击态，单位毫秒
      hoverStartTime: {
        type: [String, Number],
        default: 20
      },
      // 手指松开后点击态保留时间，单位毫秒
      hoverStayTime: {
        type: [String, Number],
        default: 150
      },
      timerId: {
        type: [String, Number]
      }
    },
    computed: {
      // 当没有传bgColor变量时，按钮按下去的颜色类名
      getHoverClass() {
        if (this.loading || this.disabled || this.ripple || this.hoverClass)
          return "";
        let hoverClass = "";
        hoverClass = this.plain ? "u-" + this.type + "-plain-hover" : "u-" + this.type + "-hover";
        return hoverClass;
      },
      // 在'primary', 'success', 'error', 'warning'类型下，不显示边框，否则会造成四角有毛刺现象
      showHairLineBorder() {
        if (["primary", "success", "error", "warning"].indexOf(this.type) >= 0 && !this.plain) {
          return "";
        } else {
          return "u-hairline-border";
        }
      }
    },
    data() {
      let btnTimerId = this.timerId || "button_" + Math.floor(Math.random() * 1e8 + 0);
      return {
        btnTimerId,
        rippleTop: 0,
        // 水波纹的起点Y坐标到按钮上边界的距离
        rippleLeft: 0,
        // 水波纹起点X坐标到按钮左边界的距离
        fields: {},
        // 波纹按钮节点信息
        waveActive: false
        // 激活水波纹
      };
    },
    methods: {
      // 按钮点击
      click(e) {
        this.$u.throttle(() => {
          if (this.loading === true || this.disabled === true)
            return;
          if (this.ripple) {
            this.waveActive = false;
            this.$nextTick(function() {
              this.getWaveQuery(e);
            });
          }
          this.$emit("click", e);
        }, this.throttleTime, true, this.btnTimerId);
      },
      // 查询按钮的节点信息
      getWaveQuery(e) {
        this.getElQuery().then((res) => {
          let data = res[0];
          if (!data.width || !data.width)
            return;
          data.targetWidth = data.height > data.width ? data.height : data.width;
          if (!data.targetWidth)
            return;
          this.fields = data;
          let touchesX = "", touchesY = "";
          touchesX = e.touches[0].clientX;
          touchesY = e.touches[0].clientY;
          this.rippleTop = touchesY - data.top - data.targetWidth / 2;
          this.rippleLeft = touchesX - data.left - data.targetWidth / 2;
          this.$nextTick(() => {
            this.waveActive = true;
          });
        });
      },
      // 获取节点信息
      getElQuery() {
        return new Promise((resolve) => {
          let queryInfo = "";
          queryInfo = uni.createSelectorQuery().in(this);
          queryInfo.select(".u-btn").boundingClientRect();
          queryInfo.exec((data) => {
            resolve(data);
          });
        });
      },
      // 下面为对接uniapp官方按钮开放能力事件回调的对接
      getphonenumber(res) {
        this.$emit("getphonenumber", res);
      },
      getuserinfo(res) {
        this.$emit("getuserinfo", res);
      },
      error(res) {
        this.$emit("error", res);
      },
      opensetting(res) {
        this.$emit("opensetting", res);
      },
      launchapp(res) {
        this.$emit("launchapp", res);
      },
      chooseavatar(res) {
        this.$emit("chooseavatar", res);
      }
    }
  };
  function _sfc_render$q(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("button", {
      id: "u-wave-btn",
      class: vue.normalizeClass(["u-btn u-line-1 u-fix-ios-appearance", [
        "u-size-" + $props.size,
        $props.plain ? "u-btn--" + $props.type + "--plain" : "",
        $props.loading ? "u-loading" : "",
        $props.shape == "circle" ? "u-round-circle" : "",
        $props.hairLine ? $options.showHairLineBorder : "u-btn--bold-border",
        "u-btn--" + $props.type,
        $props.disabled ? `u-btn--${$props.type}--disabled` : ""
      ]]),
      "hover-start-time": Number($props.hoverStartTime),
      "hover-stay-time": Number($props.hoverStayTime),
      disabled: $props.disabled,
      "form-type": $props.formType,
      "open-type": $props.openType,
      "app-parameter": $props.appParameter,
      "hover-stop-propagation": $props.hoverStopPropagation,
      "send-message-title": $props.sendMessageTitle,
      "send-message-path": "sendMessagePath",
      lang: $props.lang,
      "data-name": $props.dataName,
      "session-from": $props.sessionFrom,
      "send-message-img": $props.sendMessageImg,
      "show-message-card": $props.showMessageCard,
      onGetphonenumber: _cache[0] || (_cache[0] = (...args) => $options.getphonenumber && $options.getphonenumber(...args)),
      onGetuserinfo: _cache[1] || (_cache[1] = (...args) => $options.getuserinfo && $options.getuserinfo(...args)),
      onError: _cache[2] || (_cache[2] = (...args) => $options.error && $options.error(...args)),
      onOpensetting: _cache[3] || (_cache[3] = (...args) => $options.opensetting && $options.opensetting(...args)),
      onLaunchapp: _cache[4] || (_cache[4] = (...args) => $options.launchapp && $options.launchapp(...args)),
      onChooseavatar: _cache[5] || (_cache[5] = (...args) => $options.chooseavatar && $options.chooseavatar(...args)),
      style: vue.normalizeStyle([$props.customStyle, {
        overflow: $props.ripple ? "hidden" : "visible"
      }]),
      onClick: _cache[6] || (_cache[6] = vue.withModifiers(($event) => $options.click($event), ["stop"])),
      "hover-class": $options.getHoverClass,
      loading: $props.loading
    }, [
      vue.renderSlot(_ctx.$slots, "default", {}, void 0, true),
      $props.ripple ? (vue.openBlock(), vue.createElementBlock(
        "view",
        {
          key: 0,
          class: vue.normalizeClass(["u-wave-ripple", [$data.waveActive ? "u-wave-active" : ""]]),
          style: vue.normalizeStyle({
            top: $data.rippleTop + "px",
            left: $data.rippleLeft + "px",
            width: $data.fields.targetWidth + "px",
            height: $data.fields.targetWidth + "px",
            "background-color": $props.rippleBgColor || "rgba(0, 0, 0, 0.15)"
          })
        },
        null,
        6
        /* CLASS, STYLE */
      )) : vue.createCommentVNode("v-if", true)
    ], 46, ["hover-start-time", "hover-stay-time", "disabled", "form-type", "open-type", "app-parameter", "hover-stop-propagation", "send-message-title", "lang", "data-name", "session-from", "send-message-img", "show-message-card", "hover-class", "loading"]);
  }
  const __easycom_6$1 = /* @__PURE__ */ _export_sfc(_sfc_main$12, [["render", _sfc_render$q], ["__scopeId", "data-v-097def2b"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-button/u-button.vue"]]);
  const _imports_0 = "/static/images/logo.jpg";
  var hexcase = 0;
  function hex_md5(s) {
    return rstr2hex(rstr_md5(str2rstr_utf8(s)));
  }
  function rstr_md5(s) {
    return binl2rstr(binl_md5(rstr2binl(s), s.length * 8));
  }
  function rstr2hex(input) {
    try {
      hexcase;
    } catch (e) {
      hexcase = 0;
    }
    var hex_tab = hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
    var output = "";
    var x;
    for (var i = 0; i < input.length; i++) {
      x = input.charCodeAt(i);
      output += hex_tab.charAt(x >>> 4 & 15) + hex_tab.charAt(x & 15);
    }
    return output;
  }
  function str2rstr_utf8(input) {
    var output = "";
    var i = -1;
    var x, y;
    while (++i < input.length) {
      x = input.charCodeAt(i);
      y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;
      if (55296 <= x && x <= 56319 && 56320 <= y && y <= 57343) {
        x = 65536 + ((x & 1023) << 10) + (y & 1023);
        i++;
      }
      if (x <= 127)
        output += String.fromCharCode(x);
      else if (x <= 2047)
        output += String.fromCharCode(
          192 | x >>> 6 & 31,
          128 | x & 63
        );
      else if (x <= 65535)
        output += String.fromCharCode(
          224 | x >>> 12 & 15,
          128 | x >>> 6 & 63,
          128 | x & 63
        );
      else if (x <= 2097151)
        output += String.fromCharCode(
          240 | x >>> 18 & 7,
          128 | x >>> 12 & 63,
          128 | x >>> 6 & 63,
          128 | x & 63
        );
    }
    return output;
  }
  function rstr2binl(input) {
    var output = Array(input.length >> 2);
    for (var i = 0; i < output.length; i++)
      output[i] = 0;
    for (var i = 0; i < input.length * 8; i += 8)
      output[i >> 5] |= (input.charCodeAt(i / 8) & 255) << i % 32;
    return output;
  }
  function binl2rstr(input) {
    var output = "";
    for (var i = 0; i < input.length * 32; i += 8)
      output += String.fromCharCode(input[i >> 5] >>> i % 32 & 255);
    return output;
  }
  function binl_md5(x, len) {
    x[len >> 5] |= 128 << len % 32;
    x[(len + 64 >>> 9 << 4) + 14] = len;
    var a = 1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d = 271733878;
    for (var i = 0; i < x.length; i += 16) {
      var olda = a;
      var oldb = b;
      var oldc = c;
      var oldd = d;
      a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
      d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
      c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
      b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
      a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
      d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
      c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
      b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
      a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
      d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
      c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
      b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
      a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
      d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
      c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
      b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);
      a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
      d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
      c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
      b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
      a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
      d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
      c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
      b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
      a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
      d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
      c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
      b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
      a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
      d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
      c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
      b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);
      a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
      d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
      c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
      b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
      a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
      d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
      c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
      b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
      a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
      d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
      c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
      b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
      a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
      d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
      c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
      b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);
      a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
      d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
      c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
      b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
      a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
      d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
      c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
      b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
      a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
      d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
      c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
      b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
      a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
      d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
      c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
      b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);
      a = safe_add(a, olda);
      b = safe_add(b, oldb);
      c = safe_add(c, oldc);
      d = safe_add(d, oldd);
    }
    return Array(a, b, c, d);
  }
  function md5_cmn(q, a, b, x, s, t) {
    return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
  }
  function md5_ff(a, b, c, d, x, s, t) {
    return md5_cmn(b & c | ~b & d, a, b, x, s, t);
  }
  function md5_gg(a, b, c, d, x, s, t) {
    return md5_cmn(b & d | c & ~d, a, b, x, s, t);
  }
  function md5_hh(a, b, c, d, x, s, t) {
    return md5_cmn(b ^ c ^ d, a, b, x, s, t);
  }
  function md5_ii(a, b, c, d, x, s, t) {
    return md5_cmn(c ^ (b | ~d), a, b, x, s, t);
  }
  function safe_add(x, y) {
    var lsw = (x & 65535) + (y & 65535);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return msw << 16 | lsw & 65535;
  }
  function bit_rol(num, cnt) {
    return num << cnt | num >>> 32 - cnt;
  }
  const md5Libs = {
    md5: function(str) {
      return hex_md5(str);
    }
  };
  const _sfc_main$11 = {
    __name: "index",
    setup(__props) {
      const imgUrl = vue.ref("");
      const loading = vue.ref(false);
      const formData = vue.reactive({
        account: "",
        password: "",
        code: "",
        origin: "password"
      });
      const needCode = vue.ref(false);
      const codeLength = vue.ref(4);
      vue.ref(false);
      const timestamp = vue.ref();
      const rules2 = vue.reactive({
        account: [{
          required: true,
          message: "请输入账号",
          trigger: "blur"
        }],
        password: [{
          required: true,
          message: "请输入密码",
          trigger: "blur"
        }]
      });
      vue.reactive({});
      vue.ref("");
      vue.ref("");
      vue.ref("");
      const form = vue.ref();
      const store2 = useStore();
      function onFocus(e) {
        getConfig(e);
      }
      function onBlur(e) {
        getConfig(e);
      }
      function getConfig(val) {
        if (!val)
          return;
        getDefaultConfig(formData.account).then((res) => {
          needCode.value = !!res.data.enableVerificationCode;
          if (needCode.value) {
            codeLength.value = res.data.verificationCodeNumber || 4;
            changeCode();
          }
        });
      }
      function changeCode() {
        let timestamp2 = Math.random();
        timestamp2.value = timestamp2;
        imgUrl.value = `/api/oauth/ImageCode/${codeLength.value || 4}/${timestamp2}`;
      }
      function loginFn() {
        form.value.validate((valid) => {
          if (valid) {
            loading.value = true;
            let query = {
              account: formData.account,
              password: md5Libs.md5(formData.password),
              timestamp: timestamp.value,
              code: formData.code,
              origin: formData.origin
            };
            const clientId = plus.push.getClientInfo().clientid;
            query.clientId = clientId;
            login(query).then((res) => {
              loading.value = false;
              let token = res.data.token;
              store2.commit("user/SET_TOKEN", token);
              uni.setStorageSync("token", token);
              uni.switchTab({
                url: "/pages/sampleDetection/index"
              });
              store2.dispatch("user/getCurrentUser");
            }).catch((err) => {
              loading.value = false;
            });
          }
        });
      }
      onReady(() => {
        form.value.setRules(rules2);
      });
      onLoad(() => {
        formData.password = "";
      });
      return (_ctx, _cache) => {
        const _component_u_input = resolveEasycom(vue.resolveDynamicComponent("u-input"), __easycom_2$2);
        const _component_u_form_item = resolveEasycom(vue.resolveDynamicComponent("u-form-item"), __easycom_3$1);
        const _component_u_image = resolveEasycom(vue.resolveDynamicComponent("u-image"), __easycom_2$1);
        const _component_u_form = resolveEasycom(vue.resolveDynamicComponent("u-form"), __easycom_4$1);
        const _component_u_button = resolveEasycom(vue.resolveDynamicComponent("u-button"), __easycom_6$1);
        return vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          null,
          [
            vue.createElementVNode("view", { class: "status_bar" }, [
              vue.createElementVNode("view", { class: "top_view" })
            ]),
            vue.createElementVNode("view", { class: "logo-v" }, [
              vue.createCommentVNode(' 	<view class="login-bg">\n			<image src="/static/login-bg.png" mode="widthFix"></image>\n		</view> '),
              vue.createElementVNode("view", { class: "logo-hd u-flex-col" }, [
                vue.createElementVNode("view", { class: "logoImg" }, [
                  vue.createElementVNode("image", {
                    src: _imports_0,
                    mode: "widthFix"
                  })
                ]),
                vue.createCommentVNode(' <view class="u-flex-col introduce u-m-t-30">\n				<text class="u-font-36 text-one">{{sysName}}</text>\n				<text class="u-font-24 text-two">低代码，企业数字化好帮手</text>\n			</view> '),
                vue.createElementVNode("view", { class: "loginSwitch u-flex-col" }, [
                  vue.createElementVNode("view", { class: "loginInputBox u-flex-col" }, [
                    vue.createVNode(_component_u_form, {
                      model: formData,
                      rules: rules2,
                      ref_key: "form",
                      ref: form,
                      errorType: ["toast"],
                      "label-position": "left",
                      "label-width": "150",
                      "label-align": "left"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_u_form_item, { prop: "account" }, {
                          default: vue.withCtx(() => [
                            vue.createVNode(_component_u_input, {
                              modelValue: formData.account,
                              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => formData.account = $event),
                              placeholder: "请输入帐号",
                              onFocus,
                              onBlur
                            }, null, 8, ["modelValue"])
                          ]),
                          _: 1
                          /* STABLE */
                        }),
                        vue.createVNode(_component_u_form_item, { prop: "password" }, {
                          default: vue.withCtx(() => [
                            vue.createVNode(_component_u_input, {
                              modelValue: formData.password,
                              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => formData.password = $event),
                              type: "password",
                              placeholder: "请输入密码"
                            }, null, 8, ["modelValue"])
                          ]),
                          _: 1
                          /* STABLE */
                        }),
                        needCode.value ? (vue.openBlock(), vue.createBlock(_component_u_form_item, {
                          key: 0,
                          prop: "code",
                          required: ""
                        }, {
                          default: vue.withCtx(() => [
                            vue.createElementVNode("view", { class: "u-flex code-box" }, [
                              vue.createVNode(_component_u_input, {
                                modelValue: formData.code,
                                "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => formData.code = $event),
                                placeholder: "验证码"
                              }, null, 8, ["modelValue"]),
                              vue.createElementVNode("view", { style: { "flex": "0.1" } }, [
                                vue.createVNode(_component_u_image, {
                                  showLoading: true,
                                  src: _ctx.baseURL + imgUrl.value,
                                  width: "130px",
                                  height: "38px",
                                  onClick: changeCode
                                }, null, 8, ["src"])
                              ])
                            ])
                          ]),
                          _: 1
                          /* STABLE */
                        })) : vue.createCommentVNode("v-if", true)
                      ]),
                      _: 1
                      /* STABLE */
                    }, 8, ["model", "rules"]),
                    vue.createElementVNode("view", { class: "loginBtnBox u-m-t-64" }, [
                      vue.createVNode(_component_u_button, {
                        onClick: loginFn,
                        type: "primary",
                        loading: loading.value
                      }, {
                        default: vue.withCtx(() => [
                          vue.createTextVNode(
                            vue.toDisplayString(loading.value ? "登录中..." : "登录"),
                            1
                            /* TEXT */
                          )
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["loading"])
                    ])
                  ])
                ])
              ]),
              vue.createElementVNode(
                "view",
                { class: "copyright" },
                vue.toDisplayString(_ctx.copyright),
                1
                /* TEXT */
              )
            ])
          ],
          64
          /* STABLE_FRAGMENT */
        );
      };
    }
  };
  const PagesLoginIndex = /* @__PURE__ */ _export_sfc(_sfc_main$11, [["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/login/index.vue"]]);
  const _sfc_main$10 = {
    __name: "index",
    setup(__props) {
      function goDetail(path) {
        uni.navigateTo({
          url: path
        });
      }
      onPullDownRefresh(() => {
        uni.stopPullDownRefresh();
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          null,
          [
            vue.createElementVNode("view", { class: "status_bar" }, [
              vue.createElementVNode("view", { class: "top_view" })
            ]),
            vue.createElementVNode("view", { class: "lo-container" }, [
              vue.createElementVNode("view", { class: "materiel-box" }, [
                vue.createElementVNode("view", {
                  class: "select-zone",
                  onClick: _cache[0] || (_cache[0] = ($event) => goDetail("/pages/labOperation/materiel/index"))
                }, [
                  vue.createElementVNode("text", { class: "zone-one" }, "物料库存盘点"),
                  vue.createElementVNode("text", { class: "zone-two" }, "点击前往")
                ])
              ]),
              vue.createElementVNode("view", { class: "instrument-box" }, [
                vue.createElementVNode("view", {
                  class: "select-zone",
                  onClick: _cache[1] || (_cache[1] = ($event) => goDetail("/pages/labOperation/instrument/index"))
                }, [
                  vue.createElementVNode("text", { class: "zone-one" }, "仪器使用登记"),
                  vue.createElementVNode("text", { class: "zone-two" }, "点击前往")
                ])
              ]),
              vue.createElementVNode("view", { class: "guard-box" }, [
                vue.createElementVNode("view", {
                  class: "select-zone",
                  onClick: _cache[2] || (_cache[2] = ($event) => goDetail("/pages/labOperation/guard/index"))
                }, [
                  vue.createElementVNode("text", { class: "zone-one" }, "门禁远程控制"),
                  vue.createElementVNode("text", { class: "zone-two" }, "点击前往")
                ])
              ])
            ])
          ],
          64
          /* STABLE_FRAGMENT */
        );
      };
    }
  };
  const PagesLabOperationIndex = /* @__PURE__ */ _export_sfc(_sfc_main$10, [["__scopeId", "data-v-892ade33"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/labOperation/index.vue"]]);
  const fontData = [
    {
      "font_class": "arrow-down",
      "unicode": ""
    },
    {
      "font_class": "arrow-left",
      "unicode": ""
    },
    {
      "font_class": "arrow-right",
      "unicode": ""
    },
    {
      "font_class": "arrow-up",
      "unicode": ""
    },
    {
      "font_class": "auth",
      "unicode": ""
    },
    {
      "font_class": "auth-filled",
      "unicode": ""
    },
    {
      "font_class": "back",
      "unicode": ""
    },
    {
      "font_class": "bars",
      "unicode": ""
    },
    {
      "font_class": "calendar",
      "unicode": ""
    },
    {
      "font_class": "calendar-filled",
      "unicode": ""
    },
    {
      "font_class": "camera",
      "unicode": ""
    },
    {
      "font_class": "camera-filled",
      "unicode": ""
    },
    {
      "font_class": "cart",
      "unicode": ""
    },
    {
      "font_class": "cart-filled",
      "unicode": ""
    },
    {
      "font_class": "chat",
      "unicode": ""
    },
    {
      "font_class": "chat-filled",
      "unicode": ""
    },
    {
      "font_class": "chatboxes",
      "unicode": ""
    },
    {
      "font_class": "chatboxes-filled",
      "unicode": ""
    },
    {
      "font_class": "chatbubble",
      "unicode": ""
    },
    {
      "font_class": "chatbubble-filled",
      "unicode": ""
    },
    {
      "font_class": "checkbox",
      "unicode": ""
    },
    {
      "font_class": "checkbox-filled",
      "unicode": ""
    },
    {
      "font_class": "checkmarkempty",
      "unicode": ""
    },
    {
      "font_class": "circle",
      "unicode": ""
    },
    {
      "font_class": "circle-filled",
      "unicode": ""
    },
    {
      "font_class": "clear",
      "unicode": ""
    },
    {
      "font_class": "close",
      "unicode": ""
    },
    {
      "font_class": "closeempty",
      "unicode": ""
    },
    {
      "font_class": "cloud-download",
      "unicode": ""
    },
    {
      "font_class": "cloud-download-filled",
      "unicode": ""
    },
    {
      "font_class": "cloud-upload",
      "unicode": ""
    },
    {
      "font_class": "cloud-upload-filled",
      "unicode": ""
    },
    {
      "font_class": "color",
      "unicode": ""
    },
    {
      "font_class": "color-filled",
      "unicode": ""
    },
    {
      "font_class": "compose",
      "unicode": ""
    },
    {
      "font_class": "contact",
      "unicode": ""
    },
    {
      "font_class": "contact-filled",
      "unicode": ""
    },
    {
      "font_class": "down",
      "unicode": ""
    },
    {
      "font_class": "bottom",
      "unicode": ""
    },
    {
      "font_class": "download",
      "unicode": ""
    },
    {
      "font_class": "download-filled",
      "unicode": ""
    },
    {
      "font_class": "email",
      "unicode": ""
    },
    {
      "font_class": "email-filled",
      "unicode": ""
    },
    {
      "font_class": "eye",
      "unicode": ""
    },
    {
      "font_class": "eye-filled",
      "unicode": ""
    },
    {
      "font_class": "eye-slash",
      "unicode": ""
    },
    {
      "font_class": "eye-slash-filled",
      "unicode": ""
    },
    {
      "font_class": "fire",
      "unicode": ""
    },
    {
      "font_class": "fire-filled",
      "unicode": ""
    },
    {
      "font_class": "flag",
      "unicode": ""
    },
    {
      "font_class": "flag-filled",
      "unicode": ""
    },
    {
      "font_class": "folder-add",
      "unicode": ""
    },
    {
      "font_class": "folder-add-filled",
      "unicode": ""
    },
    {
      "font_class": "font",
      "unicode": ""
    },
    {
      "font_class": "forward",
      "unicode": ""
    },
    {
      "font_class": "gear",
      "unicode": ""
    },
    {
      "font_class": "gear-filled",
      "unicode": ""
    },
    {
      "font_class": "gift",
      "unicode": ""
    },
    {
      "font_class": "gift-filled",
      "unicode": ""
    },
    {
      "font_class": "hand-down",
      "unicode": ""
    },
    {
      "font_class": "hand-down-filled",
      "unicode": ""
    },
    {
      "font_class": "hand-up",
      "unicode": ""
    },
    {
      "font_class": "hand-up-filled",
      "unicode": ""
    },
    {
      "font_class": "headphones",
      "unicode": ""
    },
    {
      "font_class": "heart",
      "unicode": ""
    },
    {
      "font_class": "heart-filled",
      "unicode": ""
    },
    {
      "font_class": "help",
      "unicode": ""
    },
    {
      "font_class": "help-filled",
      "unicode": ""
    },
    {
      "font_class": "home",
      "unicode": ""
    },
    {
      "font_class": "home-filled",
      "unicode": ""
    },
    {
      "font_class": "image",
      "unicode": ""
    },
    {
      "font_class": "image-filled",
      "unicode": ""
    },
    {
      "font_class": "images",
      "unicode": ""
    },
    {
      "font_class": "images-filled",
      "unicode": ""
    },
    {
      "font_class": "info",
      "unicode": ""
    },
    {
      "font_class": "info-filled",
      "unicode": ""
    },
    {
      "font_class": "left",
      "unicode": ""
    },
    {
      "font_class": "link",
      "unicode": ""
    },
    {
      "font_class": "list",
      "unicode": ""
    },
    {
      "font_class": "location",
      "unicode": ""
    },
    {
      "font_class": "location-filled",
      "unicode": ""
    },
    {
      "font_class": "locked",
      "unicode": ""
    },
    {
      "font_class": "locked-filled",
      "unicode": ""
    },
    {
      "font_class": "loop",
      "unicode": ""
    },
    {
      "font_class": "mail-open",
      "unicode": ""
    },
    {
      "font_class": "mail-open-filled",
      "unicode": ""
    },
    {
      "font_class": "map",
      "unicode": ""
    },
    {
      "font_class": "map-filled",
      "unicode": ""
    },
    {
      "font_class": "map-pin",
      "unicode": ""
    },
    {
      "font_class": "map-pin-ellipse",
      "unicode": ""
    },
    {
      "font_class": "medal",
      "unicode": ""
    },
    {
      "font_class": "medal-filled",
      "unicode": ""
    },
    {
      "font_class": "mic",
      "unicode": ""
    },
    {
      "font_class": "mic-filled",
      "unicode": ""
    },
    {
      "font_class": "micoff",
      "unicode": ""
    },
    {
      "font_class": "micoff-filled",
      "unicode": ""
    },
    {
      "font_class": "minus",
      "unicode": ""
    },
    {
      "font_class": "minus-filled",
      "unicode": ""
    },
    {
      "font_class": "more",
      "unicode": ""
    },
    {
      "font_class": "more-filled",
      "unicode": ""
    },
    {
      "font_class": "navigate",
      "unicode": ""
    },
    {
      "font_class": "navigate-filled",
      "unicode": ""
    },
    {
      "font_class": "notification",
      "unicode": ""
    },
    {
      "font_class": "notification-filled",
      "unicode": ""
    },
    {
      "font_class": "paperclip",
      "unicode": ""
    },
    {
      "font_class": "paperplane",
      "unicode": ""
    },
    {
      "font_class": "paperplane-filled",
      "unicode": ""
    },
    {
      "font_class": "person",
      "unicode": ""
    },
    {
      "font_class": "person-filled",
      "unicode": ""
    },
    {
      "font_class": "personadd",
      "unicode": ""
    },
    {
      "font_class": "personadd-filled",
      "unicode": ""
    },
    {
      "font_class": "personadd-filled-copy",
      "unicode": ""
    },
    {
      "font_class": "phone",
      "unicode": ""
    },
    {
      "font_class": "phone-filled",
      "unicode": ""
    },
    {
      "font_class": "plus",
      "unicode": ""
    },
    {
      "font_class": "plus-filled",
      "unicode": ""
    },
    {
      "font_class": "plusempty",
      "unicode": ""
    },
    {
      "font_class": "pulldown",
      "unicode": ""
    },
    {
      "font_class": "pyq",
      "unicode": ""
    },
    {
      "font_class": "qq",
      "unicode": ""
    },
    {
      "font_class": "redo",
      "unicode": ""
    },
    {
      "font_class": "redo-filled",
      "unicode": ""
    },
    {
      "font_class": "refresh",
      "unicode": ""
    },
    {
      "font_class": "refresh-filled",
      "unicode": ""
    },
    {
      "font_class": "refreshempty",
      "unicode": ""
    },
    {
      "font_class": "reload",
      "unicode": ""
    },
    {
      "font_class": "right",
      "unicode": ""
    },
    {
      "font_class": "scan",
      "unicode": ""
    },
    {
      "font_class": "search",
      "unicode": ""
    },
    {
      "font_class": "settings",
      "unicode": ""
    },
    {
      "font_class": "settings-filled",
      "unicode": ""
    },
    {
      "font_class": "shop",
      "unicode": ""
    },
    {
      "font_class": "shop-filled",
      "unicode": ""
    },
    {
      "font_class": "smallcircle",
      "unicode": ""
    },
    {
      "font_class": "smallcircle-filled",
      "unicode": ""
    },
    {
      "font_class": "sound",
      "unicode": ""
    },
    {
      "font_class": "sound-filled",
      "unicode": ""
    },
    {
      "font_class": "spinner-cycle",
      "unicode": ""
    },
    {
      "font_class": "staff",
      "unicode": ""
    },
    {
      "font_class": "staff-filled",
      "unicode": ""
    },
    {
      "font_class": "star",
      "unicode": ""
    },
    {
      "font_class": "star-filled",
      "unicode": ""
    },
    {
      "font_class": "starhalf",
      "unicode": ""
    },
    {
      "font_class": "trash",
      "unicode": ""
    },
    {
      "font_class": "trash-filled",
      "unicode": ""
    },
    {
      "font_class": "tune",
      "unicode": ""
    },
    {
      "font_class": "tune-filled",
      "unicode": ""
    },
    {
      "font_class": "undo",
      "unicode": ""
    },
    {
      "font_class": "undo-filled",
      "unicode": ""
    },
    {
      "font_class": "up",
      "unicode": ""
    },
    {
      "font_class": "top",
      "unicode": ""
    },
    {
      "font_class": "upload",
      "unicode": ""
    },
    {
      "font_class": "upload-filled",
      "unicode": ""
    },
    {
      "font_class": "videocam",
      "unicode": ""
    },
    {
      "font_class": "videocam-filled",
      "unicode": ""
    },
    {
      "font_class": "vip",
      "unicode": ""
    },
    {
      "font_class": "vip-filled",
      "unicode": ""
    },
    {
      "font_class": "wallet",
      "unicode": ""
    },
    {
      "font_class": "wallet-filled",
      "unicode": ""
    },
    {
      "font_class": "weibo",
      "unicode": ""
    },
    {
      "font_class": "weixin",
      "unicode": ""
    }
  ];
  const getVal = (val) => {
    const reg = /^[0-9]*$/g;
    return typeof val === "number" || reg.test(val) ? val + "px" : val;
  };
  const _sfc_main$$ = {
    name: "UniIcons",
    emits: ["click"],
    props: {
      type: {
        type: String,
        default: ""
      },
      color: {
        type: String,
        default: "#333333"
      },
      size: {
        type: [Number, String],
        default: 16
      },
      customPrefix: {
        type: String,
        default: ""
      },
      fontFamily: {
        type: String,
        default: ""
      }
    },
    data() {
      return {
        icons: fontData
      };
    },
    computed: {
      unicode() {
        let code2 = this.icons.find((v) => v.font_class === this.type);
        if (code2) {
          return code2.unicode;
        }
        return "";
      },
      iconSize() {
        return getVal(this.size);
      },
      styleObj() {
        if (this.fontFamily !== "") {
          return `color: ${this.color}; font-size: ${this.iconSize}; font-family: ${this.fontFamily};`;
        }
        return `color: ${this.color}; font-size: ${this.iconSize};`;
      }
    },
    methods: {
      _onClick() {
        this.$emit("click");
      }
    }
  };
  function _sfc_render$p(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "text",
      {
        style: vue.normalizeStyle($options.styleObj),
        class: vue.normalizeClass(["uni-icons", ["uniui-" + $props.type, $props.customPrefix, $props.customPrefix ? $props.type : ""]]),
        onClick: _cache[0] || (_cache[0] = (...args) => $options._onClick && $options._onClick(...args))
      },
      [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_0$5 = /* @__PURE__ */ _export_sfc(_sfc_main$$, [["render", _sfc_render$p], ["__scopeId", "data-v-d31e1c47"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/uni-icons/components/uni-icons/uni-icons.vue"]]);
  const _sfc_main$_ = {
    name: "u-loading",
    props: {
      // 动画的类型
      mode: {
        type: String,
        default: "circle"
      },
      // 动画的颜色
      color: {
        type: String,
        default: "#c7c7c7"
      },
      // 加载图标的大小，单位rpx
      size: {
        type: [String, Number],
        default: "34"
      },
      // 是否显示动画
      show: {
        type: Boolean,
        default: true
      }
    },
    computed: {
      // 加载中圆圈动画的样式
      cricleStyle() {
        let style = {};
        style.width = this.size + "rpx";
        style.height = this.size + "rpx";
        if (this.mode == "circle")
          style.borderColor = `#e4e4e4 #e4e4e4 #e4e4e4 ${this.color ? this.color : "#c7c7c7"}`;
        return style;
      }
    }
  };
  function _sfc_render$o(_ctx, _cache, $props, $setup, $data, $options) {
    return $props.show ? (vue.openBlock(), vue.createElementBlock(
      "view",
      {
        key: 0,
        class: vue.normalizeClass(["u-loading", $props.mode == "circle" ? "u-loading-circle" : "u-loading-flower"]),
        style: vue.normalizeStyle([$options.cricleStyle])
      },
      null,
      6
      /* CLASS, STYLE */
    )) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_0$4 = /* @__PURE__ */ _export_sfc(_sfc_main$_, [["render", _sfc_render$o], ["__scopeId", "data-v-32db0ed8"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-loading/u-loading.vue"]]);
  const _sfc_main$Z = {
    name: "u-switch",
    emits: ["update:modelValue", "input", "change"],
    props: {
      // 通过v-model双向绑定的值
      value: {
        type: Boolean,
        default: false
      },
      modelValue: {
        type: Boolean,
        default: false
      },
      // 是否为加载中状态
      loading: {
        type: Boolean,
        default: false
      },
      // 是否为禁用装填
      disabled: {
        type: Boolean,
        default: false
      },
      // 开关尺寸，单位rpx
      size: {
        type: [Number, String],
        default: 50
      },
      // 打开时的背景颜色
      activeColor: {
        type: String,
        default: "#2979ff"
      },
      // 关闭时的背景颜色
      inactiveColor: {
        type: String,
        default: "#ffffff"
      },
      // 是否使手机发生短促震动，目前只在iOS的微信小程序有效(2020-05-06)
      vibrateShort: {
        type: Boolean,
        default: false
      },
      // 打开选择器时的值
      activeValue: {
        type: [Number, String, Boolean],
        default: true
      },
      // 关闭选择器时的值
      inactiveValue: {
        type: [Number, String, Boolean],
        default: false
      }
    },
    data() {
      return {};
    },
    computed: {
      valueCom() {
        return this.modelValue;
      },
      switchStyle() {
        let style = {};
        style.fontSize = this.size + "rpx";
        style.backgroundColor = this.valueCom ? this.activeColor : this.inactiveColor;
        return style;
      },
      loadingColor() {
        return this.valueCom ? this.activeColor : null;
      }
    },
    methods: {
      onClick() {
        if (!this.disabled && !this.loading) {
          if (this.vibrateShort)
            uni.vibrateShort();
          this.$emit("input", !this.valueCom);
          this.$emit("update:modelValue", !this.valueCom);
          this.$nextTick(() => {
            this.$emit("change", this.valueCom ? this.activeValue : this.inactiveValue);
          });
        }
      }
    }
  };
  function _sfc_render$n(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_loading = resolveEasycom(vue.resolveDynamicComponent("u-loading"), __easycom_0$4);
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["u-switch", [$options.valueCom == true ? "u-switch--on" : "", $props.disabled ? "u-switch--disabled" : ""]]),
        onClick: _cache[0] || (_cache[0] = (...args) => $options.onClick && $options.onClick(...args)),
        style: vue.normalizeStyle([$options.switchStyle])
      },
      [
        vue.createElementVNode(
          "view",
          {
            class: "u-switch__node node-class",
            style: vue.normalizeStyle({
              width: _ctx.$u.addUnit($props.size),
              height: _ctx.$u.addUnit($props.size)
            })
          },
          [
            vue.createVNode(_component_u_loading, {
              show: $props.loading,
              class: "u-switch__loading",
              size: $props.size * 0.6,
              color: $options.loadingColor
            }, null, 8, ["show", "size", "color"])
          ],
          4
          /* STYLE */
        )
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_1$4 = /* @__PURE__ */ _export_sfc(_sfc_main$Z, [["render", _sfc_render$n], ["__scopeId", "data-v-033901d2"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-switch/u-switch.vue"]]);
  const _sfc_main$Y = {
    name: "u-checkbox",
    emits: ["update:modelValue", "input", "change"],
    props: {
      // 是否为选中状态
      value: {
        type: Boolean,
        default: false
      },
      modelValue: {
        type: Boolean,
        default: false
      },
      // checkbox的名称
      name: {
        type: [String, Number],
        default: ""
      },
      // 形状，square为方形，circle为圆型
      shape: {
        type: String,
        default: ""
      },
      // 是否禁用
      disabled: {
        type: [String, Boolean],
        default: ""
      },
      // 是否禁止点击提示语选中复选框
      labelDisabled: {
        type: [String, Boolean],
        default: ""
      },
      // 选中状态下的颜色，如设置此值，将会覆盖checkboxGroup的activeColor值
      activeColor: {
        type: String,
        default: ""
      },
      // 图标的大小，单位rpx
      iconSize: {
        type: [String, Number],
        default: ""
      },
      // label的字体大小，rpx单位
      labelSize: {
        type: [String, Number],
        default: ""
      },
      // 组件的整体大小
      size: {
        type: [String, Number],
        default: ""
      },
      // 设置不确定状态，仅负责样式控制
      indeterminate: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {
        parentDisabled: false,
        newParams: {}
      };
    },
    created() {
      this.parent = this.$u.$parent.call(this, "u-checkbox-group");
      this.parent && this.parent.children.push(this);
    },
    computed: {
      valueCom() {
        return this.modelValue;
      },
      // 是否禁用，如果父组件u-checkbox-group禁用的话，将会忽略子组件的配置
      isDisabled() {
        return this.disabled !== "" ? this.disabled : this.parent ? this.parent.disabled : false;
      },
      // 是否禁用label点击
      isLabelDisabled() {
        return this.labelDisabled !== "" ? this.labelDisabled : this.parent ? this.parent.labelDisabled : false;
      },
      // 组件尺寸，对应size的值，默认值为34rpx
      checkboxSize() {
        return this.size ? this.size : this.parent ? this.parent.size : 34;
      },
      // 组件的勾选图标的尺寸，默认20
      checkboxIconSize() {
        return this.iconSize ? this.iconSize : this.parent ? this.parent.iconSize : 20;
      },
      // 组件选中激活时的颜色
      elActiveColor() {
        return this.activeColor ? this.activeColor : this.parent ? this.parent.activeColor : "primary";
      },
      // 组件的形状
      elShape() {
        return this.shape ? this.shape : this.parent ? this.parent.shape : "square";
      },
      iconStyle() {
        let style = {};
        if (this.elActiveColor && this.valueCom && !this.isDisabled) {
          style.borderColor = this.elActiveColor;
          style.backgroundColor = this.elActiveColor;
        }
        style.width = this.$u.addUnit(this.checkboxSize);
        style.height = this.$u.addUnit(this.checkboxSize);
        return style;
      },
      // checkbox内部的勾选图标，如果选中状态，为白色，否则为透明色即可
      iconColor() {
        if (this.indeterminate)
          return "#ffffff";
        return this.valueCom ? "#ffffff" : "transparent";
      },
      iconClass() {
        let classes = [];
        classes.push("u-checkbox__icon-wrap--" + this.elShape);
        if (this.valueCom == true)
          classes.push("u-checkbox__icon-wrap--checked");
        if (this.isDisabled)
          classes.push("u-checkbox__icon-wrap--disabled");
        if (this.valueCom && this.isDisabled)
          classes.push("u-checkbox__icon-wrap--disabled--checked");
        if (this.indeterminate === true)
          classes.push("u-checkbox__icon-wrap--indeterminate");
        return classes.join(" ");
      },
      checkboxStyle() {
        let style = {};
        if (this.parent && this.parent.width) {
          style.width = this.parent.width;
          style.flex = `0 0 ${this.parent.width}`;
        }
        if (this.parent && this.parent.wrap) {
          style.width = "100%";
          style.flex = "0 0 100%";
        }
        return style;
      }
    },
    mounted() {
      this._emitEvent();
    },
    watch: {
      valueCom: {
        handler: function(newVal, oldVal) {
          this._emitEvent();
        }
      }
    },
    methods: {
      _emitEvent() {
        let value = this.valueCom;
        let obj = {
          value,
          name: this.name
        };
        if (this.parent && this.parent.emitEvent)
          this.parent.emitEvent(obj);
      },
      onClickLabel() {
        if (!this.isLabelDisabled && !this.isDisabled) {
          this.setValue();
        }
      },
      toggle() {
        if (!this.isDisabled) {
          this.setValue();
        }
      },
      emitEvent() {
        let obj = {
          value: !this.valueCom,
          name: this.name
        };
        this.$emit("change", obj);
        if (this.parent && this.parent.emitEvent)
          this.parent.emitEvent(obj);
      },
      // 设置input的值，这里通过input事件，设置通过v-model绑定的组件的值
      setValue() {
        let value = this.valueCom;
        let checkedNum = 0;
        if (this.parent && this.parent.children) {
          this.parent.children.map((val) => {
            if (val.value)
              checkedNum++;
          });
        }
        if (value == true) {
          this.emitEvent();
          this.$emit("input", !value);
          this.$emit("update:modelValue", !value);
        } else {
          if (this.parent && checkedNum >= this.parent.max) {
            return this.$u.toast(`最多可选${this.parent.max}项`);
          }
          this.emitEvent();
          this.$emit("input", !value);
          this.$emit("update:modelValue", !value);
        }
      }
    }
  };
  function _sfc_render$m(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_icon = resolveEasycom(vue.resolveDynamicComponent("u-icon"), __easycom_0$6);
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: "u-checkbox",
        style: vue.normalizeStyle([$options.checkboxStyle])
      },
      [
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["u-checkbox__icon-wrap", [$options.iconClass]]),
            onClick: _cache[0] || (_cache[0] = (...args) => $options.toggle && $options.toggle(...args)),
            style: vue.normalizeStyle([$options.iconStyle])
          },
          [
            $props.indeterminate ? (vue.openBlock(), vue.createBlock(_component_u_icon, {
              key: 0,
              class: "u-checkbox__icon-wrap__icon",
              name: "minus",
              size: $options.checkboxIconSize,
              color: $options.iconColor
            }, null, 8, ["size", "color"])) : (vue.openBlock(), vue.createBlock(_component_u_icon, {
              key: 1,
              class: "u-checkbox__icon-wrap__icon",
              name: "checkbox-mark",
              size: $options.checkboxIconSize,
              color: $options.iconColor
            }, null, 8, ["size", "color"]))
          ],
          6
          /* CLASS, STYLE */
        ),
        vue.createElementVNode(
          "view",
          {
            class: "u-checkbox__label",
            onClick: _cache[1] || (_cache[1] = (...args) => $options.onClickLabel && $options.onClickLabel(...args)),
            style: vue.normalizeStyle({
              fontSize: _ctx.$u.addUnit($props.labelSize)
            })
          },
          [
            vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
          ],
          4
          /* STYLE */
        )
      ],
      4
      /* STYLE */
    );
  }
  const __easycom_5$3 = /* @__PURE__ */ _export_sfc(_sfc_main$Y, [["render", _sfc_render$m], ["__scopeId", "data-v-cafae08d"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-checkbox/u-checkbox.vue"]]);
  const _sfc_main$X = {
    name: "u-checkbox-group",
    emits: ["update:modelValue", "input", "change"],
    mixins: [Emitter],
    props: {
      // 匹配某一个radio组件，如果某个radio的name值等于此值，那么这个radio就被会选中
      value: {
        type: [String, Number, Array, Boolean],
        default: ""
      },
      modelValue: {
        type: [String, Number, Array, Boolean],
        default: ""
      },
      // 最多能选中多少个checkbox
      max: {
        type: [Number, String],
        default: 999
      },
      // 所有选中项的 name
      // value: {
      // 	default: Array,
      // 	default() {
      // 		return []
      // 	}
      // },
      // 是否禁用所有复选框
      disabled: {
        type: Boolean,
        default: false
      },
      // 在表单内提交时的标识符
      name: {
        type: [Boolean, String],
        default: ""
      },
      // 是否禁止点击提示语选中复选框
      labelDisabled: {
        type: Boolean,
        default: false
      },
      // 形状，square为方形，circle为圆型
      shape: {
        type: String,
        default: "square"
      },
      // 选中状态下的颜色
      activeColor: {
        type: String,
        default: "#2979ff"
      },
      // 组件的整体大小
      size: {
        type: [String, Number],
        default: 34
      },
      // 每个checkbox占u-checkbox-group的宽度
      width: {
        type: String,
        default: "auto"
      },
      // 是否每个checkbox都换行
      wrap: {
        type: Boolean,
        default: false
      },
      // 图标的大小，单位rpx
      iconSize: {
        type: [String, Number],
        default: 20
      }
    },
    data() {
      return {
        values: [],
        uFromData: {
          inputAlign: "left"
        }
      };
    },
    created() {
      this.children = [];
    },
    mounted() {
      let parent = this.$u.$parent.call(this, "u-form");
      if (parent) {
        Object.keys(this.uFromData).map((key) => {
          this.uFromData[key] = parent[key];
        });
      }
    },
    methods: {
      emitEvent(obj) {
        let values = this.values || [];
        if (obj.value) {
          let index = values.indexOf(obj.name);
          if (index === -1) {
            values.push(obj.name);
          }
        } else {
          let index = values.indexOf(obj.name);
          if (index > -1) {
            values.splice(index, 1);
          }
        }
        this.$emit("change", values);
        this.$emit("input", values);
        this.$emit("update:modelValue", values);
        setTimeout(() => {
          this.dispatch("u-form-item", "onFieldChange", values);
        }, 60);
      },
      _emitEvent(obj) {
        let values = this.values || [];
        if (obj.value) {
          let index = values.indexOf(obj.name);
          if (index === -1) {
            values.push(obj.name);
          }
        } else {
          let index = values.indexOf(obj.name);
          if (index > -1) {
            values.splice(index, 1);
          }
        }
      }
    }
  };
  function _sfc_render$l(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["u-checkbox-group u-clearfix", $data.uFromData.inputAlign == "right" ? "flex-end" : ""])
      },
      [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ],
      2
      /* CLASS */
    );
  }
  const __easycom_6 = /* @__PURE__ */ _export_sfc(_sfc_main$X, [["render", _sfc_render$l], ["__scopeId", "data-v-6a8aa283"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-checkbox-group/u-checkbox-group.vue"]]);
  const _sfc_main$W = {
    __name: "index",
    emits: "visible",
    setup(__props, { emit: __emit }) {
      const emits = __emit;
      function goToBack() {
        emits("visible", false);
      }
      const controlFlag = vue.ref(true);
      function control(val) {
        controlFlag.value = val;
        uni.setStorageSync("watermarkFlag", val);
      }
      const checkList = vue.ref([
        {
          name: "日期",
          disabled: true
        },
        {
          name: "项目名称",
          disabled: true
        },
        {
          name: "经纬度",
          disabled: true
        },
        {
          name: "人员",
          disabled: true
        }
      ]);
      function initData() {
        let watermarkValue = uni.getStorageSync("watermarkValue");
        watermarkValue.forEach((item) => {
          checkList.value.forEach((el) => {
            if (item.name === el.name) {
              el.checked = item.flag;
            }
          });
        });
        controlFlag.value = uni.getStorageSync("watermarkFlag");
      }
      onLoad(() => {
        initData();
      });
      function checkboxChange(val) {
        checkList.value.checked = val;
        let watermarkValue = uni.getStorageSync("watermarkValue");
        watermarkValue.forEach((item) => {
          if (item.name === val.name) {
            item.flag = val.value;
          }
        });
        uni.setStorageSync("watermarkValue", watermarkValue);
      }
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_switch = resolveEasycom(vue.resolveDynamicComponent("u-switch"), __easycom_1$4);
        const _component_u_checkbox = resolveEasycom(vue.resolveDynamicComponent("u-checkbox"), __easycom_5$3);
        const _component_u_checkbox_group = resolveEasycom(vue.resolveDynamicComponent("u-checkbox-group"), __easycom_6);
        return vue.openBlock(), vue.createElementBlock("view", { class: "main-container" }, [
          vue.createElementVNode("view", { class: "status_bar" }, [
            vue.createElementVNode("view", { class: "top_view" })
          ]),
          vue.createElementVNode("view", { class: "detail-container" }, [
            vue.createElementVNode("view", {
              class: "nav-bar",
              style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
            }, [
              vue.createVNode(_component_uni_icons, {
                onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                type: "left",
                size: "30",
                style: { "line-height": "44px" }
              }),
              vue.createElementVNode("text", {
                class: "title",
                style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
              }, "设置")
            ]),
            vue.createElementVNode("view", { class: "content-box" }, [
              vue.createElementVNode("view", { class: "control-main" }, [
                vue.createElementVNode("text", null, "加水印(图片/视频)"),
                vue.createVNode(_component_u_switch, {
                  modelValue: controlFlag.value,
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => controlFlag.value = $event),
                  onChange: control
                }, null, 8, ["modelValue"])
              ]),
              vue.createElementVNode("view", { class: "control-check" }, [
                vue.createElementVNode("text", { class: "check-title" }, "水印显示内容"),
                vue.createVNode(_component_u_checkbox_group, { shape: "circle" }, {
                  default: vue.withCtx(() => [
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList(checkList.value, (item, index) => {
                        return vue.openBlock(), vue.createElementBlock("view", {
                          class: "check-item",
                          key: index
                        }, [
                          vue.createElementVNode(
                            "text",
                            null,
                            vue.toDisplayString(item.name),
                            1
                            /* TEXT */
                          ),
                          vue.createVNode(_component_u_checkbox, {
                            onChange: checkboxChange,
                            modelValue: item.checked,
                            "onUpdate:modelValue": ($event) => item.checked = $event,
                            name: item.name
                          }, null, 8, ["modelValue", "onUpdate:modelValue", "name"])
                        ]);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ]),
                  _: 1
                  /* STABLE */
                })
              ])
            ])
          ])
        ]);
      };
    }
  };
  const watermark = /* @__PURE__ */ _export_sfc(_sfc_main$W, [["__scopeId", "data-v-073758e1"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/me/watermark/index.vue"]]);
  const _sfc_main$V = {
    __name: "index",
    setup(__props) {
      const userInfo = vue.reactive({});
      const baseURL2 = vue.inject("define").baseURL;
      function loginOut() {
        uni.showModal({
          title: "提示",
          content: "是否退出当前账号？",
          success: function(res) {
            if (res.confirm) {
              uni.setStorageSync("token", null);
              uni.setStorageSync("userInfo", null);
              uni.reLaunch({
                url: "/pages/login/index",
                success: () => {
                  plus.navigator.closeSplashscreen();
                }
              });
            } else if (res.cancel) {
              formatAppLog("log", "at pages/me/index.vue:91", "用户点击取消");
            }
          }
        });
      }
      const mainVisile = vue.ref(true);
      const watermarkVisible = vue.ref(false);
      function gowatermark() {
        watermarkVisible.value = true;
        mainVisile.value = false;
      }
      function watermarkFlag(val) {
        watermarkVisible.value = val;
        mainVisile.value = !val;
      }
      const cacheSize = vue.ref();
      function clearCache() {
        let os2 = plus.os.name;
        if (os2 == "Android") {
          let main = plus.android.runtimeMainActivity();
          let sdRoot = main.getCacheDir();
          let files = plus.android.invoke(sdRoot, "listFiles");
          let len = files.length;
          for (let i = 0; i < len; i++) {
            let filePath = "" + files[i];
            plus.io.resolveLocalFileSystemURL(filePath, function(entry) {
              if (entry.isDirectory) {
                entry.removeRecursively(function(entry2) {
                  uni.showToast({
                    title: "缓存清理完成",
                    duration: 2e3
                  });
                  accCache();
                }, function(e) {
                  formatAppLog("log", "at pages/me/index.vue:128", e.message);
                });
              } else {
                entry.remove();
              }
            }, function(e) {
              formatAppLog("log", "at pages/me/index.vue:134", "文件路径读取失败");
            });
          }
        } else {
          plus.cache.clear(function() {
            uni.showToast({
              title: "缓存清理完成",
              duration: 2e3
            });
            formatSize();
          });
        }
      }
      function accCache() {
        plus.cache.calculate(function(size) {
          let sizeCache = parseInt(size);
          if (sizeCache == 0) {
            cacheSize.value = "0B";
          } else if (sizeCache < 1024) {
            cacheSize.value = sizeCache + "B";
          } else if (sizeCache < 1048576) {
            cacheSize.value = (sizeCache / 1024).toFixed(2) + "KB";
          } else if (sizeCache < 1073741824) {
            cacheSize.value = (sizeCache / 1048576).toFixed(2) + "MB";
          } else {
            cacheSize.value = (sizeCache / 1073741824).toFixed(2) + "GB";
          }
          formatAppLog("log", "at pages/me/index.vue:161", cacheSize.value, "--cache");
        });
      }
      onLoad(() => {
        accCache();
        Object.assign(userInfo, uni.getStorageSync("userInfo"));
        formatAppLog("log", "at pages/me/index.vue:170", userInfo, uni.getStorageSync("userInfo"));
      });
      return (_ctx, _cache) => {
        const _component_viwe = vue.resolveComponent("viwe");
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_button = resolveEasycom(vue.resolveDynamicComponent("u-button"), __easycom_6$1);
        return mainVisile.value ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "main-container"
        }, [
          vue.createElementVNode("view", { class: "status_bar" }, [
            vue.createElementVNode("view", { class: "top_view" })
          ]),
          vue.createElementVNode("view", { class: "me-container" }, [
            vue.createElementVNode("view", { class: "me-header" }, [
              vue.createElementVNode("view", { class: "avatar" }, [
                vue.createCommentVNode(' <img src="@/static" alt="" /> '),
                vue.createElementVNode("img", {
                  class: "img",
                  src: `${vue.unref(baseURL2)}${userInfo.headIcon}`
                }, null, 8, ["src"]),
                vue.createCommentVNode(" </img> ")
              ]),
              vue.createVNode(_component_viwe, { class: "info" }, {
                default: vue.withCtx(() => [
                  vue.createElementVNode("view", { class: "info-top" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "name" },
                      vue.toDisplayString(userInfo.userName),
                      1
                      /* TEXT */
                    ),
                    vue.createElementVNode(
                      "text",
                      { class: "phone" },
                      vue.toDisplayString(userInfo.mobilePhone),
                      1
                      /* TEXT */
                    )
                  ]),
                  vue.createElementVNode(
                    "text",
                    { class: "comp" },
                    vue.toDisplayString(userInfo.organizeName),
                    1
                    /* TEXT */
                  )
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            vue.createElementVNode("view", { class: "me-menu" }, [
              vue.createElementVNode("view", { class: "message-center link-box" }, [
                vue.createElementVNode("text", { class: "left-text" }, "消息中心"),
                vue.createElementVNode("view", { class: "right-content" }, [
                  vue.createElementVNode("text", { class: "right-text" }, "new"),
                  vue.createVNode(_component_uni_icons, {
                    type: "right",
                    size: "30"
                  })
                ])
              ]),
              vue.createElementVNode("view", { class: "update link-box" }, [
                vue.createElementVNode("text", { class: "left-text" }, "检查更新"),
                vue.createElementVNode("view", { class: "right-content" }, [
                  vue.createElementVNode("text", { class: "right-text" }, "1.0.0"),
                  vue.createVNode(_component_uni_icons, {
                    type: "right",
                    size: "30"
                  })
                ])
              ]),
              vue.createElementVNode("view", {
                class: "clear-cache link-box",
                onClick: clearCache
              }, [
                vue.createElementVNode("text", { class: "left-text" }, "清除缓存"),
                vue.createElementVNode("view", { class: "right-content" }, [
                  vue.createElementVNode(
                    "text",
                    { class: "right-text" },
                    vue.toDisplayString(cacheSize.value),
                    1
                    /* TEXT */
                  ),
                  vue.createVNode(_component_uni_icons, {
                    type: "right",
                    size: "30"
                  })
                ])
              ]),
              vue.createElementVNode("view", {
                class: "setting link-box",
                onClick: gowatermark
              }, [
                vue.createElementVNode("text", { class: "left-text" }, "设置"),
                vue.createVNode(_component_uni_icons, {
                  type: "right",
                  size: "30"
                })
              ]),
              vue.createElementVNode("view", { class: "login-out" }, [
                vue.createVNode(_component_u_button, {
                  type: "primary",
                  onClick: loginOut
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("退出登录")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ])
            ])
          ])
        ])) : !mainVisile.value && watermarkVisible.value ? (vue.openBlock(), vue.createBlock(watermark, {
          key: 1,
          onVisible: watermarkFlag
        })) : vue.createCommentVNode("v-if", true);
      };
    }
  };
  const PagesMeIndex = /* @__PURE__ */ _export_sfc(_sfc_main$V, [["__scopeId", "data-v-c8e26b33"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/me/index.vue"]]);
  const _sfc_main$U = {
    name: "u-badge",
    props: {
      // primary,warning,success,error,info
      type: {
        type: String,
        default: "error"
      },
      // default, mini
      size: {
        type: String,
        default: "default"
      },
      //是否是圆点
      isDot: {
        type: Boolean,
        default: false
      },
      // 显示的数值内容
      count: {
        type: [Number, String]
      },
      // 展示封顶的数字值
      overflowCount: {
        type: Number,
        default: 99
      },
      // 当数值为 0 时，是否展示 Badge
      showZero: {
        type: Boolean,
        default: false
      },
      // 位置偏移
      offset: {
        type: Array,
        default: () => {
          return [20, 20];
        }
      },
      // 是否开启绝对定位，开启了offset才会起作用
      absolute: {
        type: Boolean,
        default: true
      },
      // 字体大小
      fontSize: {
        type: [String, Number],
        default: "24"
      },
      // 字体演示
      color: {
        type: String,
        default: "#ffffff"
      },
      // badge的背景颜色
      bgColor: {
        type: String,
        default: ""
      },
      // 是否让badge组件的中心点和父组件右上角重合，配置的话，offset将会失效
      isCenter: {
        type: Boolean,
        default: false
      }
    },
    computed: {
      // 是否将badge中心与父组件右上角重合
      boxStyle() {
        let style = {};
        if (this.isCenter) {
          style.top = 0;
          style.right = 0;
          style.transform = "translateY(-50%) translateX(50%)";
        } else {
          style.top = this.offset[0] + "rpx";
          style.right = this.offset[1] + "rpx";
          style.transform = "translateY(0) translateX(0)";
        }
        if (this.size == "mini") {
          style.transform = style.transform + " scale(0.8)";
        }
        return style;
      },
      // isDot类型时，不显示文字
      showText() {
        if (this.isDot)
          return "";
        else {
          if (this.count > this.overflowCount)
            return `${this.overflowCount}+`;
          else
            return this.count;
        }
      },
      // 是否显示组件
      show() {
        if (this.count == 0 && this.showZero == false)
          return false;
        else
          return true;
      }
    }
  };
  function _sfc_render$k(_ctx, _cache, $props, $setup, $data, $options) {
    return $options.show ? (vue.openBlock(), vue.createElementBlock(
      "view",
      {
        key: 0,
        class: vue.normalizeClass(["u-badge", [
          $props.isDot ? "u-badge-dot" : "",
          $props.size == "mini" ? "u-badge-mini" : "",
          $props.type ? "u-badge--bg--" + $props.type : ""
        ]]),
        style: vue.normalizeStyle([{
          top: $props.offset[0] + "rpx",
          right: $props.offset[1] + "rpx",
          fontSize: $props.fontSize + "rpx",
          position: $props.absolute ? "absolute" : "static",
          color: $props.color,
          backgroundColor: $props.bgColor
        }, $options.boxStyle])
      },
      vue.toDisplayString($options.showText),
      7
      /* TEXT, CLASS, STYLE */
    )) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_0$3 = /* @__PURE__ */ _export_sfc(_sfc_main$U, [["render", _sfc_render$k], ["__scopeId", "data-v-f84de764"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-badge/u-badge.vue"]]);
  const _sfc_main$T = {
    name: "u-tabs",
    emits: ["update:modelValue", "input", "change"],
    props: {
      // 通过双向绑定控制组件的弹出与收起
      value: {
        type: [Number, String],
        default: 0
      },
      modelValue: {
        type: [Number, String],
        default: 0
      },
      // 当前活动tab的索引（请使用 v-model="current" 代替 :current="current" @change="change" 其他不变）
      current: {
        type: [Number, String],
        default: 0
      },
      // 导航菜单是否需要滚动，如只有2或者3个的时候，就不需要滚动了，此时使用flex平分tab的宽度
      isScroll: {
        type: Boolean,
        default: true
      },
      //需循环的标签列表
      list: {
        type: Array,
        default() {
          return [];
        }
      },
      // 导航栏的高度和行高
      height: {
        type: [String, Number],
        default: 80
      },
      // 字体大小
      fontSize: {
        type: [String, Number],
        default: 30
      },
      // 过渡动画时长, 单位ms
      duration: {
        type: [String, Number],
        default: 0.5
      },
      // 选中项的主题颜色
      activeColor: {
        type: String,
        default: "#2979ff"
      },
      // 未选中项的颜色
      inactiveColor: {
        type: String,
        default: "#303133"
      },
      // 菜单底部移动的bar的宽度，单位rpx
      barWidth: {
        type: [String, Number],
        default: 40
      },
      // 移动bar的高度
      barHeight: {
        type: [String, Number],
        default: 6
      },
      // 单个tab的左或有内边距（左右相同）
      gutter: {
        type: [String, Number],
        default: 30
      },
      // 导航栏的背景颜色
      bgColor: {
        type: String,
        default: "#ffffff"
      },
      // 读取传入的数组对象的属性(tab名称)
      name: {
        type: String,
        default: "name"
      },
      // 读取传入的数组对象的属性(徽标数)
      count: {
        type: String,
        default: "count"
      },
      // 徽标数位置偏移
      offset: {
        type: Array,
        default: () => {
          return [5, 20];
        }
      },
      // 活动tab字体是否加粗
      bold: {
        type: Boolean,
        default: true
      },
      // 当前活动tab item的样式
      activeItemStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 是否显示底部的滑块
      showBar: {
        type: Boolean,
        default: true
      },
      // 底部滑块的自定义样式
      barStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 标签的宽度
      itemWidth: {
        type: [Number, String],
        default: "auto"
      }
    },
    data() {
      return {
        scrollLeft: 0,
        // 滚动scroll-view的左边滚动距离
        tabQueryInfo: [],
        // 存放对tab菜单查询后的节点信息
        componentWidth: 0,
        // 屏幕宽度，单位为px
        scrollBarLeft: 0,
        // 移动bar需要通过translateX()移动的距离
        parentLeft: 0,
        // 父元素(tabs组件)到屏幕左边的距离
        id: this.$u.guid(),
        // id值
        currentIndex: this.current,
        barFirstTimeMove: true
        // 滑块第一次移动时(页面刚生成时)，无需动画，否则给人怪异的感觉
      };
    },
    watch: {
      // 监听tab的变化，重新计算tab菜单的布局信息，因为实际使用中菜单可能是通过
      // 后台获取的（如新闻app顶部的菜单），获取返回需要一定时间，所以list变化时，重新获取布局信息
      list(n, o) {
        if (n.length !== o.length)
          this.currentIndex = 0;
        this.$nextTick(() => {
          this.init();
        });
      },
      current: {
        immediate: true,
        handler(nVal, oVal) {
          this.$nextTick(() => {
            this.currentIndex = nVal;
            this.scrollByIndex();
          });
        }
      },
      valueCom: {
        immediate: true,
        handler(nVal, oVal) {
          this.$nextTick(() => {
            this.currentIndex = nVal;
            this.scrollByIndex();
          });
        }
      }
    },
    computed: {
      valueCom() {
        return this.modelValue;
      },
      // 移动bar的样式
      tabBarStyle() {
        let style = {
          width: this.barWidth + "rpx",
          transform: `translate(${this.scrollBarLeft}px, -100%)`,
          // 滑块在页面渲染后第一次滑动时，无需动画效果
          "transition-duration": `${this.barFirstTimeMove ? 0 : this.duration}s`,
          "background-color": this.activeColor,
          height: this.barHeight + "rpx",
          // 设置一个很大的值，它会自动取能用的最大值，不用高度的一半，是因为高度可能是单数，会有小数出现
          "border-radius": `${this.barHeight / 2}px`
        };
        Object.assign(style, this.barStyle);
        return style;
      },
      // tab的样式
      tabItemStyle() {
        return (index) => {
          let style = {
            height: this.height + "rpx",
            "line-height": this.height + "rpx",
            "font-size": this.fontSize + "rpx",
            "transition-duration": `${this.duration}s`,
            padding: this.isScroll ? `0 ${this.gutter}rpx` : "",
            flex: this.isScroll ? "auto" : "1",
            width: this.$u.addUnit(this.itemWidth)
          };
          if (index == this.currentIndex && this.bold)
            style.fontWeight = "bold";
          if (index == this.currentIndex) {
            style.color = this.activeColor;
            style = Object.assign(style, this.activeItemStyle);
          } else {
            style.color = this.inactiveColor;
          }
          return style;
        };
      }
    },
    methods: {
      // 设置一个init方法，方便多处调用
      async init() {
        let tabRect = await this.$uGetRect("#" + this.id);
        this.parentLeft = tabRect.left;
        this.componentWidth = tabRect.width;
        this.getTabRect();
      },
      // 点击某一个tab菜单
      clickTab(index) {
        if (index == this.currentIndex)
          return;
        this.$emit("change", index);
        this.$emit("input", index);
        this.$emit("update:modelValue", index);
      },
      // 查询tab的布局信息
      getTabRect() {
        let query = uni.createSelectorQuery().in(this);
        for (let i = 0; i < this.list.length; i++) {
          query.select(`#u-tab-item-${i}`).fields({
            size: true,
            rect: true
          });
        }
        query.exec(
          function(res) {
            this.tabQueryInfo = res;
            this.scrollByIndex();
          }.bind(this)
        );
      },
      // 滚动scroll-view，让活动的tab处于屏幕的中间位置
      scrollByIndex() {
        let tabInfo = this.tabQueryInfo[this.currentIndex];
        if (!tabInfo)
          return;
        let tabWidth = tabInfo.width;
        let offsetLeft = tabInfo.left - this.parentLeft;
        let scrollLeft = offsetLeft - (this.componentWidth - tabWidth) / 2;
        this.scrollLeft = scrollLeft < 0 ? 0 : scrollLeft;
        let left = tabInfo.left + tabInfo.width / 2 - this.parentLeft;
        this.scrollBarLeft = left - uni.upx2px(this.barWidth) / 2;
        if (this.barFirstTimeMove == true) {
          setTimeout(() => {
            this.barFirstTimeMove = false;
          }, 100);
        }
      }
    },
    mounted() {
      this.init();
    }
  };
  function _sfc_render$j(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_badge = resolveEasycom(vue.resolveDynamicComponent("u-badge"), __easycom_0$3);
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: "u-tabs",
        style: vue.normalizeStyle({
          background: $props.bgColor
        })
      },
      [
        vue.createCommentVNode(" $u.getRect()对组件根节点无效，因为写了.in(this)，故这里获取内层接点尺寸 "),
        vue.createElementVNode("view", { id: $data.id }, [
          vue.createElementVNode("scroll-view", {
            "scroll-x": "",
            class: "u-scroll-view",
            "scroll-left": $data.scrollLeft,
            "scroll-with-animation": ""
          }, [
            vue.createElementVNode("view", {
              class: vue.normalizeClass(["u-scroll-box", { "u-tabs-scroll-flex": !$props.isScroll }]),
              id: $data.id
            }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($props.list, (item, index) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    class: "u-tab-item u-line-1",
                    id: "u-tab-item-" + index,
                    key: index,
                    onClick: ($event) => $options.clickTab(index),
                    style: vue.normalizeStyle([$options.tabItemStyle(index)])
                  }, [
                    vue.createVNode(_component_u_badge, {
                      count: item[$props.count] || item["count"] || 0,
                      offset: $props.offset,
                      size: "mini"
                    }, null, 8, ["count", "offset"]),
                    vue.createTextVNode(
                      " " + vue.toDisplayString(item[$props.name] || item["name"]),
                      1
                      /* TEXT */
                    )
                  ], 12, ["id", "onClick"]);
                }),
                128
                /* KEYED_FRAGMENT */
              )),
              $props.showBar ? (vue.openBlock(), vue.createElementBlock(
                "view",
                {
                  key: 0,
                  class: "u-tab-bar",
                  style: vue.normalizeStyle([$options.tabBarStyle])
                },
                null,
                4
                /* STYLE */
              )) : vue.createCommentVNode("v-if", true)
            ], 10, ["id"])
          ], 8, ["scroll-left"])
        ], 8, ["id"])
      ],
      4
      /* STYLE */
    );
  }
  const __easycom_1$3 = /* @__PURE__ */ _export_sfc(_sfc_main$T, [["render", _sfc_render$j], ["__scopeId", "data-v-750d9d75"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-tabs/u-tabs.vue"]]);
  function getMenuId(moduleName) {
    let menuList = [];
    if (menuList.length === 0) {
      menuList = uni.getStorageSync("permissionList");
    }
    for (let val of menuList) {
      if (val.moduleName === moduleName) {
        return val.modelId;
      }
    }
    return;
  }
  function generateUUID() {
    const timestamp = (/* @__PURE__ */ new Date()).getTime().toString(16);
    const random2 = Math.random().toString(16).slice(2, 10);
    return timestamp + "-" + random2;
  }
  function getCurrentTime() {
    const now = /* @__PURE__ */ new Date();
    const year = now.getFullYear();
    let month = now.getMonth() + 1;
    let day = now.getDate();
    let hours = now.getHours();
    let minutes = now.getMinutes();
    month = month < 10 ? "0" + month : month;
    day = day < 10 ? "0" + day : day;
    hours = hours < 10 ? "0" + hours : hours;
    minutes = minutes < 10 ? "0" + minutes : minutes;
    const currentTime = `${year}-${month}-${day} ${hours}:${minutes}`;
    return currentTime;
  }
  function deepCopy(obj) {
    if (obj === null || typeof obj !== "object") {
      return obj;
    }
    const result = Array.isArray(obj) ? [] : {};
    for (let key in obj) {
      if (typeof obj[key] === "object" && obj[key] !== null) {
        result[key] = deepCopy(obj[key]);
      } else {
        result[key] = obj[key];
      }
    }
    return result;
  }
  function getDictionaryDataSelector(dictionaryTypeId) {
    return request({
      url: `/api/system/DictionaryData/${dictionaryTypeId}/Data/Selector`,
      method: "GET"
    });
  }
  function getDictionaryDataSelectorCascade(dictionaryTypeId) {
    return request({
      url: `/api/system/DictionaryData/${dictionaryTypeId}/Data/SelectorCascade`,
      method: "GET"
    });
  }
  function getFactorTreeList$1(id, data) {
    return request({
      url: `/api/analysis/Factor/getListTree/${id}`,
      method: "post",
      data
    });
  }
  function getXRFConf(data) {
    return request({
      url: `/api/project/SoilSampleXRFConf/getList`,
      method: "post",
      data
    });
  }
  const _sfc_main$S = {
    __name: "project",
    setup(__props) {
      let dataForm = vue.reactive({});
      function initData() {
        let projectId = uni.getStorageSync("projectId");
        return getProjectDetail(projectId).then((res) => {
          Object.assign(dataForm, res.data);
        });
      }
      function getData(beforeTime) {
        const currentTimeStamp = (/* @__PURE__ */ new Date()).getTime();
        const targetDate = new Date(beforeTime);
        const targetTimeStamp = targetDate.getTime();
        const timeStampDiff = targetTimeStamp - currentTimeStamp;
        const nonNegativeDiff = Math.max(0, timeStampDiff);
        const daysDiff = { workData: Math.ceil(nonNegativeDiff / (1e3 * 60 * 60 * 24)) };
        Object.assign(dataForm, daysDiff);
      }
      function gettypeidOptions() {
        return getDictionaryDataSelector("327816685773922437").then((res) => {
          Object.assign(res.data.list);
          let name = { typeName: res.data.list.filter((item) => item.enCode === dataForm.typeid).map((item) => item.fullName) };
          Object.assign(dataForm, name);
        });
      }
      onLoad(async () => {
        await initData();
        await gettypeidOptions();
        getData(dataForm.registertime);
      });
      return (_ctx, _cache) => {
        const _component_u_input = resolveEasycom(vue.resolveDynamicComponent("u-input"), __easycom_2$2);
        const _component_u_form_item = resolveEasycom(vue.resolveDynamicComponent("u-form-item"), __easycom_3$1);
        const _component_u_form = resolveEasycom(vue.resolveDynamicComponent("u-form"), __easycom_4$1);
        return vue.openBlock(), vue.createElementBlock("view", { class: "pr-container" }, [
          vue.createVNode(_component_u_form, {
            model: vue.unref(dataForm),
            ref: "Form",
            style: { "margin": "10px" }
          }, {
            default: vue.withCtx(() => [
              vue.createVNode(_component_u_form_item, {
                "label-width": "100px",
                label: "项目编号",
                prop: "encode"
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_u_input, {
                    placeholder: "",
                    modelValue: vue.unref(dataForm).encode,
                    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => vue.unref(dataForm).encode = $event),
                    disabled: true
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              vue.createVNode(_component_u_form_item, {
                "label-width": "100px",
                label: "项目类型",
                prop: "typeid"
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_u_input, {
                    placeholder: "",
                    modelValue: vue.unref(dataForm).typeName,
                    "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => vue.unref(dataForm).typeName = $event),
                    disabled: true
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              vue.createVNode(_component_u_form_item, {
                "label-width": "100px",
                label: "启动时间",
                prop: "registertime"
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_u_input, {
                    placeholder: "",
                    modelValue: vue.unref(dataForm).registertime,
                    "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => vue.unref(dataForm).registertime = $event),
                    disabled: true
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              vue.createVNode(_component_u_form_item, {
                "label-width": "100px",
                label: "计划工期",
                prop: "planworkload"
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_u_input, {
                    placeholder: "",
                    modelValue: vue.unref(dataForm).planworkload,
                    "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => vue.unref(dataForm).planworkload = $event),
                    disabled: true
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              vue.createVNode(_component_u_form_item, {
                "label-width": "100px",
                label: "运行时长",
                prop: "workData"
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_u_input, {
                    placeholder: "",
                    modelValue: vue.unref(dataForm).workData,
                    "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => vue.unref(dataForm).workData = $event),
                    disabled: true
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              vue.createVNode(_component_u_form_item, {
                "label-width": "100px",
                label: "项目地址",
                prop: "address"
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_u_input, {
                    placeholder: "",
                    modelValue: vue.unref(dataForm).address,
                    "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => vue.unref(dataForm).address = $event),
                    disabled: true
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              vue.createVNode(_component_u_form_item, {
                "label-width": "100px",
                label: "项目业主",
                prop: "customid"
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_u_input, {
                    placeholder: "",
                    modelValue: vue.unref(dataForm).customid,
                    "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => vue.unref(dataForm).customid = $event),
                    disabled: true
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              }),
              vue.createVNode(_component_u_form_item, {
                "label-width": "100px",
                label: "备注",
                prop: "remark"
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_u_input, {
                    placeholder: "",
                    modelValue: vue.unref(dataForm).remark,
                    "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => vue.unref(dataForm).remark = $event),
                    disabled: true
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            _: 1
            /* STABLE */
          }, 8, ["model"]),
          vue.createCommentVNode(" <map></map> ")
        ]);
      };
    }
  };
  const project = /* @__PURE__ */ _export_sfc(_sfc_main$S, [["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/detail/project.vue"]]);
  const _sfc_main$R = {
    name: "uniTh",
    options: {
      virtualHost: true
    },
    components: {},
    emits: ["sort-change", "filter-change"],
    props: {
      width: {
        type: [String, Number],
        default: ""
      },
      align: {
        type: String,
        default: "left"
      },
      rowspan: {
        type: [Number, String],
        default: 1
      },
      colspan: {
        type: [Number, String],
        default: 1
      },
      sortable: {
        type: Boolean,
        default: false
      },
      filterType: {
        type: String,
        default: ""
      },
      filterData: {
        type: Array,
        default() {
          return [];
        }
      },
      filterDefaultValue: {
        type: [Array, String],
        default() {
          return "";
        }
      }
    },
    data() {
      return {
        border: false,
        ascending: false,
        descending: false
      };
    },
    computed: {
      // 根据props中的width属性 自动匹配当前th的宽度(px)
      customWidth() {
        if (typeof this.width === "number") {
          return this.width;
        } else if (typeof this.width === "string") {
          let regexHaveUnitPx = new RegExp(/^[1-9][0-9]*px$/g);
          let regexHaveUnitRpx = new RegExp(/^[1-9][0-9]*rpx$/g);
          let regexHaveNotUnit = new RegExp(/^[1-9][0-9]*$/g);
          if (this.width.match(regexHaveUnitPx) !== null) {
            return this.width.replace("px", "");
          } else if (this.width.match(regexHaveUnitRpx) !== null) {
            let numberRpx = Number(this.width.replace("rpx", ""));
            let widthCoe = uni.getSystemInfoSync().screenWidth / 750;
            return Math.round(numberRpx * widthCoe);
          } else if (this.width.match(regexHaveNotUnit) !== null) {
            return this.width;
          } else {
            return "";
          }
        } else {
          return "";
        }
      },
      contentAlign() {
        let align = "left";
        switch (this.align) {
          case "left":
            align = "flex-start";
            break;
          case "center":
            align = "center";
            break;
          case "right":
            align = "flex-end";
            break;
        }
        return align;
      }
    },
    created() {
      this.root = this.getTable("uniTable");
      this.rootTr = this.getTable("uniTr");
      this.rootTr.minWidthUpdate(this.customWidth ? this.customWidth : 140);
      this.border = this.root.border;
      this.root.thChildren.push(this);
    },
    methods: {
      sort() {
        if (!this.sortable)
          return;
        this.clearOther();
        if (!this.ascending && !this.descending) {
          this.ascending = true;
          this.$emit("sort-change", { order: "ascending" });
          return;
        }
        if (this.ascending && !this.descending) {
          this.ascending = false;
          this.descending = true;
          this.$emit("sort-change", { order: "descending" });
          return;
        }
        if (!this.ascending && this.descending) {
          this.ascending = false;
          this.descending = false;
          this.$emit("sort-change", { order: null });
        }
      },
      ascendingFn() {
        this.clearOther();
        this.ascending = !this.ascending;
        this.descending = false;
        this.$emit("sort-change", { order: this.ascending ? "ascending" : null });
      },
      descendingFn() {
        this.clearOther();
        this.descending = !this.descending;
        this.ascending = false;
        this.$emit("sort-change", { order: this.descending ? "descending" : null });
      },
      clearOther() {
        this.root.thChildren.map((item) => {
          if (item !== this) {
            item.ascending = false;
            item.descending = false;
          }
          return item;
        });
      },
      ondropdown(e) {
        this.$emit("filter-change", e);
      },
      /**
       * 获取父元素实例
       */
      getTable(name) {
        let parent = this.$parent;
        let parentName = parent.$options.name;
        while (parentName !== name) {
          parent = parent.$parent;
          if (!parent)
            return false;
          parentName = parent.$options.name;
        }
        return parent;
      }
    }
  };
  function _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["uni-table-th", { "table--border": $data.border }]),
        style: vue.normalizeStyle({ width: $options.customWidth + "px", "text-align": $props.align })
      },
      [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_0$2 = /* @__PURE__ */ _export_sfc(_sfc_main$R, [["render", _sfc_render$i], ["__scopeId", "data-v-bf970acd"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/uni-table/components/uni-th/uni-th.vue"]]);
  const _sfc_main$Q = {
    name: "TableCheckbox",
    emits: ["checkboxSelected"],
    props: {
      indeterminate: {
        type: Boolean,
        default: false
      },
      checked: {
        type: [Boolean, String],
        default: false
      },
      disabled: {
        type: Boolean,
        default: false
      },
      index: {
        type: Number,
        default: -1
      },
      cellData: {
        type: Object,
        default() {
          return {};
        }
      }
    },
    watch: {
      checked(newVal) {
        if (typeof this.checked === "boolean") {
          this.isChecked = newVal;
        } else {
          this.isChecked = true;
        }
      },
      indeterminate(newVal) {
        this.isIndeterminate = newVal;
      }
    },
    data() {
      return {
        isChecked: false,
        isDisabled: false,
        isIndeterminate: false
      };
    },
    created() {
      if (typeof this.checked === "boolean") {
        this.isChecked = this.checked;
      }
      this.isDisabled = this.disabled;
    },
    methods: {
      selected() {
        if (this.isDisabled)
          return;
        this.isIndeterminate = false;
        this.isChecked = !this.isChecked;
        this.$emit("checkboxSelected", {
          checked: this.isChecked,
          data: this.cellData
        });
      }
    }
  };
  function _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", {
      class: "uni-table-checkbox",
      onClick: _cache[0] || (_cache[0] = (...args) => $options.selected && $options.selected(...args))
    }, [
      !$props.indeterminate ? (vue.openBlock(), vue.createElementBlock(
        "view",
        {
          key: 0,
          class: vue.normalizeClass(["checkbox__inner", { "is-checked": $data.isChecked, "is-disable": $data.isDisabled }])
        },
        [
          vue.createElementVNode("view", { class: "checkbox__inner-icon" })
        ],
        2
        /* CLASS */
      )) : (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        class: "checkbox__inner checkbox--indeterminate"
      }, [
        vue.createElementVNode("view", { class: "checkbox__inner-icon" })
      ]))
    ]);
  }
  const tableCheckbox = /* @__PURE__ */ _export_sfc(_sfc_main$Q, [["render", _sfc_render$h], ["__scopeId", "data-v-25e435b1"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/uni-table/components/uni-tr/table-checkbox.vue"]]);
  const _sfc_main$P = {
    name: "uniTr",
    components: { tableCheckbox },
    props: {
      disabled: {
        type: Boolean,
        default: false
      },
      keyValue: {
        type: [String, Number],
        default: ""
      }
    },
    options: {
      virtualHost: true
    },
    data() {
      return {
        value: false,
        border: false,
        selection: false,
        widthThArr: [],
        ishead: true,
        checked: false,
        indeterminate: false
      };
    },
    created() {
      this.root = this.getTable();
      this.head = this.getTable("uniThead");
      if (this.head) {
        this.ishead = false;
        this.head.init(this);
      }
      this.border = this.root.border;
      this.selection = this.root.type;
      this.root.trChildren.push(this);
      const rowData = this.root.data.find((v) => v[this.root.rowKey] === this.keyValue);
      if (rowData) {
        this.rowData = rowData;
      }
      this.root.isNodata();
    },
    mounted() {
      if (this.widthThArr.length > 0) {
        const selectionWidth = this.selection === "selection" ? 50 : 0;
        this.root.minWidth = Number(this.widthThArr.reduce((a, b) => Number(a) + Number(b))) + selectionWidth;
      }
    },
    unmounted() {
      const index = this.root.trChildren.findIndex((i) => i === this);
      this.root.trChildren.splice(index, 1);
      this.root.isNodata();
    },
    methods: {
      minWidthUpdate(width) {
        this.widthThArr.push(width);
        if (this.widthThArr.length > 0) {
          const selectionWidth = this.selection === "selection" ? 50 : 0;
          this.root.minWidth = Number(this.widthThArr.reduce((a, b) => Number(a) + Number(b))) + selectionWidth;
        }
      },
      // 选中
      checkboxSelected(e) {
        let rootData = this.root.data.find((v) => v[this.root.rowKey] === this.keyValue);
        this.checked = e.checked;
        this.root.check(rootData || this, e.checked, rootData ? this.keyValue : null);
      },
      change(e) {
        this.root.trChildren.forEach((item) => {
          if (item === this) {
            this.root.check(this, e.detail.value.length > 0 ? true : false);
          }
        });
      },
      /**
       * 获取父元素实例
       */
      getTable(name = "uniTable") {
        let parent = this.$parent;
        let parentName = parent.$options.name;
        while (parentName !== name) {
          parent = parent.$parent;
          if (!parent)
            return false;
          parentName = parent.$options.name;
        }
        return parent;
      }
    }
  };
  function _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_table_checkbox = vue.resolveComponent("table-checkbox");
    return vue.openBlock(), vue.createElementBlock("view", { class: "uni-table-tr" }, [
      $data.selection === "selection" ? (vue.openBlock(), vue.createElementBlock(
        "view",
        {
          key: 0,
          class: vue.normalizeClass(["checkbox", { "tr-table--border": $data.border }])
        },
        [
          vue.createVNode(_component_table_checkbox, {
            checked: $data.checked,
            indeterminate: $data.indeterminate,
            disabled: $props.disabled,
            onCheckboxSelected: $options.checkboxSelected
          }, null, 8, ["checked", "indeterminate", "disabled", "onCheckboxSelected"])
        ],
        2
        /* CLASS */
      )) : vue.createCommentVNode("v-if", true),
      vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
    ]);
  }
  const __easycom_1$2 = /* @__PURE__ */ _export_sfc(_sfc_main$P, [["render", _sfc_render$g], ["__scopeId", "data-v-b48b3e32"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/uni-table/components/uni-tr/uni-tr.vue"]]);
  const _sfc_main$O = {
    name: "uniTd",
    options: {
      virtualHost: true
    },
    props: {
      width: {
        type: [String, Number],
        default: ""
      },
      align: {
        type: String,
        default: "left"
      },
      rowspan: {
        type: [Number, String],
        default: 1
      },
      colspan: {
        type: [Number, String],
        default: 1
      }
    },
    data() {
      return {
        border: false
      };
    },
    created() {
      this.root = this.getTable();
      this.border = this.root.border;
    },
    methods: {
      /**
       * 获取父元素实例
       */
      getTable() {
        let parent = this.$parent;
        let parentName = parent.$options.name;
        while (parentName !== "uniTable") {
          parent = parent.$parent;
          if (!parent)
            return false;
          parentName = parent.$options.name;
        }
        return parent;
      }
    }
  };
  function _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      vue.Fragment,
      null,
      [
        vue.createCommentVNode(` :class="{'table--border':border}"  `),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["uni-table-td", { "table--border": $data.border }]),
            style: vue.normalizeStyle({ width: $props.width + "px", "text-align": $props.align })
          },
          [
            vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
          ],
          6
          /* CLASS, STYLE */
        )
      ],
      2112
      /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
    );
  }
  const __easycom_2 = /* @__PURE__ */ _export_sfc(_sfc_main$O, [["render", _sfc_render$f], ["__scopeId", "data-v-edae4802"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/uni-table/components/uni-td/uni-td.vue"]]);
  const _sfc_main$N = {
    name: "uniTable",
    options: {
      virtualHost: true
    },
    emits: ["selection-change"],
    props: {
      data: {
        type: Array,
        default() {
          return [];
        }
      },
      // 是否有竖线
      border: {
        type: Boolean,
        default: false
      },
      // 是否显示斑马线
      stripe: {
        type: Boolean,
        default: false
      },
      // 多选
      type: {
        type: String,
        default: ""
      },
      // 没有更多数据
      emptyText: {
        type: String,
        default: "没有更多数据"
      },
      loading: {
        type: Boolean,
        default: false
      },
      rowKey: {
        type: String,
        default: ""
      }
    },
    data() {
      return {
        noData: true,
        minWidth: 0,
        multiTableHeads: []
      };
    },
    watch: {
      loading(val) {
      },
      data(newVal) {
        this.theadChildren;
        if (this.theadChildren) {
          this.theadChildren.rowspan;
        }
        this.noData = false;
      }
    },
    created() {
      this.trChildren = [];
      this.thChildren = [];
      this.theadChildren = null;
      this.backData = [];
      this.backIndexData = [];
    },
    methods: {
      isNodata() {
        this.theadChildren;
        let rowspan = 1;
        if (this.theadChildren) {
          rowspan = this.theadChildren.rowspan;
        }
        this.noData = this.trChildren.length - rowspan <= 0;
      },
      /**
       * 选中所有
       */
      selectionAll() {
        let startIndex = 1;
        let theadChildren = this.theadChildren;
        if (!this.theadChildren) {
          theadChildren = this.trChildren[0];
        } else {
          startIndex = theadChildren.rowspan - 1;
        }
        let isHaveData = this.data && this.data.length > 0;
        theadChildren.checked = true;
        theadChildren.indeterminate = false;
        this.trChildren.forEach((item, index) => {
          if (!item.disabled) {
            item.checked = true;
            if (isHaveData && item.keyValue) {
              const row = this.data.find((v) => v[this.rowKey] === item.keyValue);
              if (!this.backData.find((v) => v[this.rowKey] === row[this.rowKey])) {
                this.backData.push(row);
              }
            }
            if (index > startIndex - 1 && this.backIndexData.indexOf(index - startIndex) === -1) {
              this.backIndexData.push(index - startIndex);
            }
          }
        });
        this.$emit("selection-change", {
          detail: {
            value: this.backData,
            index: this.backIndexData
          }
        });
      },
      /**
       * 用于多选表格，切换某一行的选中状态，如果使用了第二个参数，则是设置这一行选中与否（selected 为 true 则选中）
       */
      toggleRowSelection(row, selected) {
        row = [].concat(row);
        this.trChildren.forEach((item, index) => {
          const select = row.findIndex((v) => {
            if (typeof v === "number") {
              return v === index - 1;
            } else {
              return v[this.rowKey] === item.keyValue;
            }
          });
          let ischeck = item.checked;
          if (select !== -1) {
            if (typeof selected === "boolean") {
              item.checked = selected;
            } else {
              item.checked = !item.checked;
            }
            if (ischeck !== item.checked) {
              this.check(item.rowData || item, item.checked, item.rowData ? item.keyValue : null, true);
            }
          }
        });
        this.$emit("selection-change", {
          detail: {
            value: this.backData,
            index: this.backIndexData
          }
        });
      },
      /**
       * 用于多选表格，清空用户的选择
       */
      clearSelection() {
        let theadChildren = this.theadChildren;
        if (!this.theadChildren) {
          theadChildren = this.trChildren[0];
        }
        theadChildren.checked = false;
        theadChildren.indeterminate = false;
        this.trChildren.forEach((item) => {
          item.checked = false;
        });
        this.backData = [];
        this.backIndexData = [];
        this.$emit("selection-change", {
          detail: {
            value: [],
            index: []
          }
        });
      },
      /**
       * 用于多选表格，切换所有行的选中状态
       */
      toggleAllSelection() {
        let list = [];
        let startIndex = 1;
        let theadChildren = this.theadChildren;
        if (!this.theadChildren) {
          theadChildren = this.trChildren[0];
        } else {
          startIndex = theadChildren.rowspan - 1;
        }
        this.trChildren.forEach((item, index) => {
          if (!item.disabled) {
            if (index > startIndex - 1) {
              list.push(index - startIndex);
            }
          }
        });
        this.toggleRowSelection(list);
      },
      /**
       * 选中\取消选中
       * @param {Object} child
       * @param {Object} check
       * @param {Object} rowValue
       */
      check(child, check, keyValue, emit) {
        let theadChildren = this.theadChildren;
        if (!this.theadChildren) {
          theadChildren = this.trChildren[0];
        }
        let childDomIndex = this.trChildren.findIndex((item, index) => child === item);
        if (childDomIndex < 0) {
          childDomIndex = this.data.findIndex((v) => v[this.rowKey] === keyValue) + 1;
        }
        this.trChildren.filter((v) => !v.disabled && v.keyValue).length;
        if (childDomIndex === 0) {
          check ? this.selectionAll() : this.clearSelection();
          return;
        }
        if (check) {
          if (keyValue) {
            this.backData.push(child);
          }
          this.backIndexData.push(childDomIndex - 1);
        } else {
          const index = this.backData.findIndex((v) => v[this.rowKey] === keyValue);
          const idx = this.backIndexData.findIndex((item) => item === childDomIndex - 1);
          if (keyValue) {
            this.backData.splice(index, 1);
          }
          this.backIndexData.splice(idx, 1);
        }
        const domCheckAll = this.trChildren.find((item, index) => index > 0 && !item.checked && !item.disabled);
        if (!domCheckAll) {
          theadChildren.indeterminate = false;
          theadChildren.checked = true;
        } else {
          theadChildren.indeterminate = true;
          theadChildren.checked = false;
        }
        if (this.backIndexData.length === 0) {
          theadChildren.indeterminate = false;
        }
        if (!emit) {
          this.$emit("selection-change", {
            detail: {
              value: this.backData,
              index: this.backIndexData
            }
          });
        }
      }
    }
  };
  function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["uni-table-scroll", { "table--border": $props.border, "border-none": !$data.noData }])
      },
      [
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["uni-table", { "table--stripe": $props.stripe }]),
            style: vue.normalizeStyle({ "min-width": $data.minWidth + "px" })
          },
          [
            vue.renderSlot(_ctx.$slots, "default", {}, void 0, true),
            $data.noData ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "uni-table-loading"
            }, [
              vue.createElementVNode(
                "view",
                {
                  class: vue.normalizeClass(["uni-table-text", { "empty-border": $props.border }])
                },
                vue.toDisplayString($props.emptyText),
                3
                /* TEXT, CLASS */
              )
            ])) : vue.createCommentVNode("v-if", true),
            $props.loading ? (vue.openBlock(), vue.createElementBlock(
              "view",
              {
                key: 1,
                class: vue.normalizeClass(["uni-table-mask", { "empty-border": $props.border }])
              },
              [
                vue.createElementVNode("div", { class: "uni-table--loader" })
              ],
              2
              /* CLASS */
            )) : vue.createCommentVNode("v-if", true)
          ],
          6
          /* CLASS, STYLE */
        )
      ],
      2
      /* CLASS */
    );
  }
  const __easycom_3 = /* @__PURE__ */ _export_sfc(_sfc_main$N, [["render", _sfc_render$e], ["__scopeId", "data-v-c1ea9b5d"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/uni-table/components/uni-table/uni-table.vue"]]);
  const _sfc_main$M = {
    __name: "member",
    setup(__props) {
      const dataList2 = vue.ref([]);
      function getMenberInfo() {
        let query = {
          projectid: uni.getStorageSync("projectId"),
          menuId: getMenuId$1("项目成员")
        };
        getMember(query).then((res) => {
          dataList2.value = res.data.list;
          formatAppLog("log", "at pages/sampleDetection/detail/member.vue:41", dataList2.value);
        });
      }
      onLoad(() => {
        getMenberInfo();
      });
      return (_ctx, _cache) => {
        const _component_uni_th = resolveEasycom(vue.resolveDynamicComponent("uni-th"), __easycom_0$2);
        const _component_uni_tr = resolveEasycom(vue.resolveDynamicComponent("uni-tr"), __easycom_1$2);
        const _component_uni_td = resolveEasycom(vue.resolveDynamicComponent("uni-td"), __easycom_2);
        const _component_uni_table = resolveEasycom(vue.resolveDynamicComponent("uni-table"), __easycom_3);
        return vue.openBlock(), vue.createBlock(_component_uni_table, {
          border: "true",
          class: "container"
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(_component_uni_tr, null, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_uni_th, { width: "30" }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("序号")
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_uni_th, { width: "50" }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("项目职责")
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_uni_th, { width: "50" }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("姓名")
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_uni_th, { width: "50" }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("手机")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }),
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList(dataList2.value, (item, index) => {
                return vue.openBlock(), vue.createBlock(
                  _component_uni_tr,
                  { key: index },
                  {
                    default: vue.withCtx(() => [
                      vue.createVNode(
                        _component_uni_td,
                        null,
                        {
                          default: vue.withCtx(() => [
                            vue.createTextVNode(
                              vue.toDisplayString(index),
                              1
                              /* TEXT */
                            )
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1024
                        /* DYNAMIC_SLOTS */
                      ),
                      vue.createVNode(
                        _component_uni_td,
                        null,
                        {
                          default: vue.withCtx(() => [
                            vue.createTextVNode(
                              vue.toDisplayString(item.positionid),
                              1
                              /* TEXT */
                            )
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1024
                        /* DYNAMIC_SLOTS */
                      ),
                      vue.createVNode(
                        _component_uni_td,
                        null,
                        {
                          default: vue.withCtx(() => [
                            vue.createTextVNode(
                              vue.toDisplayString(item.user.realName),
                              1
                              /* TEXT */
                            )
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1024
                        /* DYNAMIC_SLOTS */
                      ),
                      vue.createVNode(
                        _component_uni_td,
                        null,
                        {
                          default: vue.withCtx(() => [
                            vue.createTextVNode(
                              vue.toDisplayString(item.user.mobilePhone),
                              1
                              /* TEXT */
                            )
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1024
                        /* DYNAMIC_SLOTS */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  },
                  1024
                  /* DYNAMIC_SLOTS */
                );
              }),
              128
              /* KEYED_FRAGMENT */
            ))
          ]),
          _: 1
          /* STABLE */
        });
      };
    }
  };
  const member = /* @__PURE__ */ _export_sfc(_sfc_main$M, [["__scopeId", "data-v-a18adecd"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/detail/member.vue"]]);
  const _sfc_main$L = {};
  function _sfc_render$d(_ctx, _cache) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "driver" });
  }
  const driver = /* @__PURE__ */ _export_sfc(_sfc_main$L, [["render", _sfc_render$d], ["__scopeId", "data-v-4c4c9b0b"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/components/driver.vue"]]);
  const _sfc_main$K = {
    __name: "index",
    setup(__props) {
      const linkOptions = vue.ref([
        {
          id: 0,
          iconName: "采样",
          iconUrl: "/static/project-icons/caiyang.svg",
          routerUrl: "/pages/sampleDetection/sampling/index"
        },
        {
          id: 1,
          iconName: "送样",
          iconUrl: "/static/project-icons/songyang.svg",
          routerUrl: "/pages/sampleDetection/sendSample/index"
        },
        {
          id: 2,
          iconName: "收样",
          iconUrl: "/static/project-icons/shouyang.svg",
          routerUrl: "/pages/sampleDetection/receiveSample/index"
        },
        {
          id: 3,
          iconName: "质控",
          iconUrl: "/static/project-icons/zhikong.svg",
          routerUrl: "/pages/sampleDetection/qualityControl/index"
        }
      ]);
      const tabOptions = vue.reactive([
        {
          name: "项目"
        },
        {
          name: "成员"
        }
      ]);
      const tabCurent = vue.ref(0);
      function change(index) {
        formatAppLog("log", "at pages/sampleDetection/detail/index.vue:80", "index", index);
      }
      vue.reactive(null);
      function goToSampling(router) {
        const projectId = uni.getStorageSync("projectId");
        uni.navigateTo({
          url: `${router}?id=${projectId}`
        });
      }
      function goToBack() {
        uni.setStorageSync("projectId", null);
        uni.setStorageSync("holeId", null);
        uni.setStorageSync("soilSampleId", null);
        uni.setStorageSync("waterSampleId", null);
        uni.setStorageSync("wellBaseId", null);
        uni.setStorageSync("wellWashRecord", null);
        uni.setStorageSync("projectName", null);
        uni.navigateBack({
          delta: 1
        });
      }
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_tabs = resolveEasycom(vue.resolveDynamicComponent("u-tabs"), __easycom_1$3);
        return vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          null,
          [
            vue.createElementVNode("view", { class: "status_bar" }, [
              vue.createElementVNode("view", { class: "top_view" })
            ]),
            vue.createElementVNode("view", { class: "detail-container" }, [
              vue.createElementVNode("view", {
                class: "nav-bar",
                style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
              }, [
                vue.createVNode(_component_uni_icons, {
                  onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                  type: "left",
                  size: "30",
                  style: { "line-height": "44px" }
                }),
                vue.createElementVNode("text", {
                  class: "title",
                  style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
                }, "采样检测详细")
              ]),
              vue.createElementVNode("view", { class: "link-container" }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList(linkOptions.value, (item) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      onClick: ($event) => goToSampling(item.routerUrl),
                      class: "link-box",
                      key: item.id
                    }, [
                      vue.createElementVNode("image", {
                        src: item.iconUrl,
                        style: { "width": "45rpx", "height": "45rpx" }
                      }, null, 8, ["src"]),
                      vue.createElementVNode(
                        "text",
                        null,
                        vue.toDisplayString(item.iconName),
                        1
                        /* TEXT */
                      )
                    ], 8, ["onClick"]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ]),
              vue.createElementVNode("view", { class: "tab-box" }, [
                vue.createVNode(_component_u_tabs, {
                  list: tabOptions,
                  "is-scroll": true,
                  modelValue: tabCurent.value,
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => tabCurent.value = $event),
                  onChange: change
                }, null, 8, ["list", "modelValue"])
              ]),
              vue.createVNode(driver),
              !tabCurent.value ? (vue.openBlock(), vue.createBlock(project, { key: 0 })) : (vue.openBlock(), vue.createBlock(member, { key: 1 }))
            ])
          ],
          64
          /* STABLE_FRAGMENT */
        );
      };
    }
  };
  const PagesSampleDetectionDetailIndex = /* @__PURE__ */ _export_sfc(_sfc_main$K, [["__scopeId", "data-v-05d2ade6"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/detail/index.vue"]]);
  const _sfc_main$J = {
    __name: "index",
    setup(__props) {
      const dataList2 = vue.ref([]);
      function getList() {
        let menuId = getMenuId("项目列表");
        let projectId = uni.getStorageSync("projectId");
        let query = {
          currentPage: 1,
          pageSize: 0,
          sort: "desc",
          sidx: "",
          menuId,
          projectId
        };
        getHoleBaseList(query).then((res) => {
          dataList2.value = res.data.list;
        });
      }
      function goHoleBase(holeId, lat, lon) {
        uni.setStorageSync("holeId", holeId);
        uni.setStorageSync("latAndLon", `${lat},${lon}`);
        uni.navigateTo({
          url: "/pages/sampleDetection/sampling/pageMonitoringPoint/index"
        });
      }
      const swiperOptions = vue.ref([
        {
          text: "删除",
          style: {
            backgroundColor: "#dd524d"
          }
        }
      ]);
      function swipeClick(e, ctx, id) {
        uni.showModal({
          title: "提示",
          content: "您确定要删除此项吗？",
          success: (res) => {
            if (res.confirm) {
              delHoleBaseDetail$1(id).then((res2) => {
                getList();
              });
              uni.showToast({
                title: "移除成功",
                icon: "none"
              });
            }
          }
        });
      }
      onLoad(() => {
        getList();
      });
      onPullDownRefresh(async () => {
        await getList();
        uni.stopPullDownRefresh();
      });
      return (_ctx, _cache) => {
        const _component_uni_swipe_action_item = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action-item"), __easycom_2$3);
        const _component_uni_swipe_action = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action"), __easycom_3$2);
        const _component_u_empty = resolveEasycom(vue.resolveDynamicComponent("u-empty"), __easycom_4$2);
        return vue.openBlock(), vue.createElementBlock("view", { class: "mo-container" }, [
          vue.createElementVNode("view", { class: "content-box" }, [
            dataList2.value.length ? (vue.openBlock(), vue.createBlock(
              _component_uni_swipe_action,
              {
                key: 0,
                ref: "swipeAction"
              },
              {
                default: vue.withCtx(() => [
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList(dataList2.value, (item) => {
                      return vue.openBlock(), vue.createBlock(_component_uni_swipe_action_item, {
                        class: "swipe-item items-box",
                        key: item.id,
                        "right-options": swiperOptions.value,
                        onClick: ($event) => swipeClick($event, _ctx.content, item.id)
                      }, {
                        default: vue.withCtx(() => [
                          vue.createElementVNode("view", {
                            class: "item-box",
                            onClick: ($event) => goHoleBase(item.id, item.latitude, item.longitude)
                          }, [
                            vue.createElementVNode("view", { class: "left-item" }, [
                              vue.createElementVNode(
                                "view",
                                { class: "title" },
                                "监测点位编号：" + vue.toDisplayString(item.holeNo),
                                1
                                /* TEXT */
                              ),
                              vue.createElementVNode("view", { class: "center-zone" }, [
                                vue.createElementVNode(
                                  "text",
                                  { class: "area" },
                                  "采样类型：" + vue.toDisplayString(item.holeType),
                                  1
                                  /* TEXT */
                                ),
                                vue.createElementVNode(
                                  "text",
                                  { class: "project" },
                                  vue.toDisplayString(item.typetext),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              vue.createElementVNode(
                                "text",
                                { class: "time" },
                                vue.toDisplayString(item.registertime),
                                1
                                /* TEXT */
                              )
                            ])
                          ], 8, ["onClick"])
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["right-options", "onClick"]);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  ))
                ]),
                _: 1
                /* STABLE */
              },
              512
              /* NEED_PATCH */
            )) : (vue.openBlock(), vue.createBlock(_component_u_empty, {
              key: 1,
              style: { "margin-top": "40px" },
              text: "暂无数据",
              mode: "list"
            }))
          ])
        ]);
      };
    }
  };
  const monitorPoint = /* @__PURE__ */ _export_sfc(_sfc_main$J, [["__scopeId", "data-v-40f20564"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sampling/monitorPoint/index.vue"]]);
  const _sfc_main$I = {
    __name: "index",
    setup(__props) {
      const dataList2 = vue.ref([]);
      function getList() {
        let menuId = getMenuId("项目列表");
        let projectId = uni.getStorageSync("projectId");
        let query = {
          currentPage: 1,
          pageSize: 0,
          sort: "desc",
          sidx: "",
          menuId,
          projectId
        };
        getQCSampleList(query).then((res) => {
          dataList2.value = res.data.list;
        });
      }
      function goAddOrEditorData(id) {
        uni.setStorageSync("QCSampleId", id);
        uni.navigateTo({
          url: "/pages/sampleDetection/sampling/qualitySample/addOrEditor"
        });
      }
      const swiperOptions = vue.ref([
        {
          text: "删除",
          style: {
            backgroundColor: "#dd524d"
          }
        }
      ]);
      function swipeClick(e, ctx, id) {
        uni.showModal({
          title: "提示",
          content: "您确定要删除此项吗？",
          success: (res) => {
            if (res.confirm) {
              delQCSampleDetail(id).then((res2) => {
                getList();
              });
              uni.showToast({
                title: "移除成功",
                icon: "none"
              });
            }
          }
        });
      }
      onLoad(async () => {
        await getList();
      });
      onPullDownRefresh(async () => {
        await getList();
        uni.stopPullDownRefresh();
      });
      return (_ctx, _cache) => {
        const _component_uni_swipe_action_item = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action-item"), __easycom_2$3);
        const _component_uni_swipe_action = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action"), __easycom_3$2);
        const _component_u_empty = resolveEasycom(vue.resolveDynamicComponent("u-empty"), __easycom_4$2);
        return vue.openBlock(), vue.createElementBlock("view", { class: "mo-container" }, [
          vue.createElementVNode("view", { class: "content-box" }, [
            vue.createCommentVNode(' <uni-navigator url="{{url}}"></uni-navigator> '),
            dataList2.value.length !== 0 ? (vue.openBlock(), vue.createBlock(
              _component_uni_swipe_action,
              {
                key: 0,
                ref: "swipeAction"
              },
              {
                default: vue.withCtx(() => [
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList(dataList2.value, (item) => {
                      return vue.openBlock(), vue.createBlock(_component_uni_swipe_action_item, {
                        class: "swipe-item items-box",
                        key: item.id,
                        "right-options": swiperOptions.value,
                        onClick: ($event) => swipeClick($event, _ctx.content, item.id)
                      }, {
                        default: vue.withCtx(() => [
                          vue.createElementVNode("view", {
                            class: "item-box",
                            onClick: ($event) => goAddOrEditorData(item.id)
                          }, [
                            vue.createElementVNode("view", { class: "left-item" }, [
                              vue.createCommentVNode(" 使用动态的 URL "),
                              vue.createElementVNode(
                                "view",
                                { class: "title" },
                                "样品编号：" + vue.toDisplayString(item.sampleNo),
                                1
                                /* TEXT */
                              ),
                              vue.createElementVNode("view", { class: "center-zone" }, [
                                vue.createElementVNode(
                                  "text",
                                  { class: "area" },
                                  "样品名称：" + vue.toDisplayString(item.sampleName),
                                  1
                                  /* TEXT */
                                ),
                                vue.createElementVNode(
                                  "text",
                                  { class: "project" },
                                  vue.toDisplayString(item.typetext),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              vue.createElementVNode(
                                "text",
                                { class: "time" },
                                vue.toDisplayString(item.registertime),
                                1
                                /* TEXT */
                              )
                            ])
                          ], 8, ["onClick"])
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["right-options", "onClick"]);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  ))
                ]),
                _: 1
                /* STABLE */
              },
              512
              /* NEED_PATCH */
            )) : (vue.openBlock(), vue.createBlock(_component_u_empty, {
              key: 1,
              style: { "margin-top": "40px" },
              text: "暂无数据",
              mode: "list"
            }))
          ])
        ]);
      };
    }
  };
  const qualitySample = /* @__PURE__ */ _export_sfc(_sfc_main$I, [["__scopeId", "data-v-a549ffe3"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sampling/qualitySample/index.vue"]]);
  const _sfc_main$H = {
    __name: "index",
    setup(__props) {
      vue.ref(false);
      function goToBack() {
        uni.navigateBack({ delta: 1 });
      }
      function goAddOrEditorData() {
        if (tabCurent.value == 0) {
          uni.navigateTo({
            url: `/pages/sampleDetection/sampling/monitorPoint/addOrEditor`
          });
        } else {
          uni.navigateTo({
            url: `/pages/sampleDetection/sampling/qualitySample/addOrEditor`
          });
        }
      }
      const tabOptions = vue.ref([
        { name: "检测点位" },
        { name: "质控样品" }
      ]);
      const tabCurent = vue.ref(0);
      function change(index) {
        tabCurent.value = index;
        formatAppLog("log", "at pages/sampleDetection/sampling/index.vue:57", "index", index);
      }
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_tabs = resolveEasycom(vue.resolveDynamicComponent("u-tabs"), __easycom_1$3);
        return vue.openBlock(), vue.createElementBlock("view", { class: "main-container" }, [
          vue.createElementVNode("view", { class: "status_bar" }, [
            vue.createElementVNode("view", { class: "top_view" })
          ]),
          vue.createElementVNode("view", { class: "sa-container" }, [
            vue.createElementVNode("view", {
              class: "nav-bar",
              style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
            }, [
              vue.createVNode(_component_uni_icons, {
                onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                type: "left",
                size: "30",
                style: { "line-height": "44px" }
              }),
              vue.createElementVNode("text", {
                class: "title",
                style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
              }, "采样信息"),
              vue.createVNode(_component_uni_icons, {
                onClick: _cache[1] || (_cache[1] = ($event) => goAddOrEditorData()),
                class: "add",
                type: "plus-filled",
                size: "30",
                style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
              })
            ]),
            vue.createElementVNode("view", { class: "tab-box" }, [
              vue.createVNode(_component_u_tabs, {
                list: tabOptions.value,
                "is-scroll": true,
                modelValue: tabCurent.value,
                "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => tabCurent.value = $event),
                onChange: change
              }, null, 8, ["list", "modelValue"])
            ]),
            vue.createElementVNode("view", { class: "content" }, [
              !tabCurent.value ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                class: "monitor-container"
              }, [
                vue.createVNode(monitorPoint)
              ])) : (vue.openBlock(), vue.createElementBlock("view", {
                key: 1,
                class: "quality-container"
              }, [
                vue.createVNode(qualitySample)
              ]))
            ])
          ])
        ]);
      };
    }
  };
  const PagesSampleDetectionSamplingIndex = /* @__PURE__ */ _export_sfc(_sfc_main$H, [["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sampling/index.vue"]]);
  function getQCCheckBaseList(data) {
    return request({
      url: `/api/project/QCCheckBase/getList`,
      method: "post",
      data
    });
  }
  function getQCCheckBaseDetail(id) {
    return request({
      url: `/api/project/QCCheckBase/${id}`,
      method: "get"
    });
  }
  function addQCCheckBase(data) {
    return request({
      url: `/api/project/QCCheckBase`,
      method: "post",
      data
    });
  }
  function updateQCCheckBase(id, data) {
    return request({
      url: `/api/project/QCCheckBase/${id}`,
      method: "put",
      data
    });
  }
  function delQCCheckBaseDetail(id) {
    return request({
      url: `/api/project/QCCheckBase/${id}`,
      method: "delete"
    });
  }
  function QcInitListTree(data) {
    return request({
      url: `/api/project/QCCheckBase/initListTree`,
      method: "post",
      data
    });
  }
  const _sfc_main$G = {
    name: "u-toast",
    props: {
      // z-index值
      zIndex: {
        type: [Number, String],
        default: ""
      }
    },
    data() {
      return {
        isShow: false,
        timer: null,
        // 定时器
        config: {
          params: {},
          // URL跳转的参数，对象
          title: "",
          // 显示文本
          type: "",
          // 主题类型，primary，success，error，warning，black
          duration: 2e3,
          // 显示的时间，毫秒
          isTab: false,
          // 是否跳转tab页面
          url: "",
          // toast消失后是否跳转页面，有则跳转，优先级高于back参数
          icon: true,
          // 显示的图标
          position: "center",
          // toast出现的位置
          callback: null,
          // 执行完后的回调函数
          back: false
          // 结束toast是否自动返回上一页
        },
        tmpConfig: {}
        // 将用户配置和内置配置合并后的临时配置变量
      };
    },
    computed: {
      iconName() {
        if (["error", "warning", "success", "info"].indexOf(this.tmpConfig.type) >= 0 && this.tmpConfig.icon) {
          let icon = this.$u.type2icon(this.tmpConfig.type);
          return icon;
        }
      },
      uZIndex() {
        return this.isShow ? this.zIndex ? this.zIndex : this.$u.zIndex.toast : "999999";
      }
    },
    methods: {
      // 显示toast组件，由父组件通过this.$refs.xxx.show(options)形式调用
      show(options) {
        this.tmpConfig = this.$u.deepMerge(this.config, options);
        if (this.timer) {
          clearTimeout(this.timer);
          this.timer = null;
        }
        this.isShow = true;
        this.timer = setTimeout(() => {
          this.isShow = false;
          clearTimeout(this.timer);
          this.timer = null;
          typeof this.tmpConfig.callback === "function" && this.tmpConfig.callback();
          this.timeEnd();
        }, this.tmpConfig.duration);
      },
      // 隐藏toast组件，由父组件通过this.$refs.xxx.hide()形式调用
      hide() {
        this.isShow = false;
        if (this.timer) {
          clearTimeout(this.timer);
          this.timer = null;
        }
      },
      // 倒计时结束之后，进行的一些操作
      timeEnd() {
        if (this.tmpConfig.url) {
          if (this.tmpConfig.url[0] != "/")
            this.tmpConfig.url = "/" + this.tmpConfig.url;
          if (Object.keys(this.tmpConfig.params).length) {
            let query = "";
            if (/.*\/.*\?.*=.*/.test(this.tmpConfig.url)) {
              query = this.$u.queryParams(this.tmpConfig.params, false);
              this.tmpConfig.url = this.tmpConfig.url + "&" + query;
            } else {
              query = this.$u.queryParams(this.tmpConfig.params);
              this.tmpConfig.url += query;
            }
          }
          if (this.tmpConfig.isTab) {
            uni.switchTab({
              url: this.tmpConfig.url
            });
          } else {
            uni.navigateTo({
              url: this.tmpConfig.url
            });
          }
        } else if (this.tmpConfig.back) {
          this.$u.route({
            type: "back"
          });
        }
      }
    }
  };
  function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_icon = resolveEasycom(vue.resolveDynamicComponent("u-icon"), __easycom_0$6);
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["u-toast", [$data.isShow ? "u-show" : "", "u-type-" + $data.tmpConfig.type, "u-position-" + $data.tmpConfig.position]]),
        style: vue.normalizeStyle({
          zIndex: $options.uZIndex
        })
      },
      [
        vue.createElementVNode("view", { class: "u-icon-wrap" }, [
          $data.tmpConfig.icon ? (vue.openBlock(), vue.createBlock(_component_u_icon, {
            key: 0,
            class: "u-icon",
            name: $options.iconName,
            size: 30,
            color: $data.tmpConfig.type
          }, null, 8, ["name", "color"])) : vue.createCommentVNode("v-if", true)
        ]),
        vue.createElementVNode(
          "text",
          { class: "u-text" },
          vue.toDisplayString($data.tmpConfig.title),
          1
          /* TEXT */
        )
      ],
      6
      /* CLASS, STYLE */
    );
  }
  const __easycom_1$1 = /* @__PURE__ */ _export_sfc(_sfc_main$G, [["render", _sfc_render$c], ["__scopeId", "data-v-dcb3ce67"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-toast/u-toast.vue"]]);
  const _sfc_main$F = {
    name: "u-mask",
    emits: ["click"],
    props: {
      // 是否显示遮罩
      show: {
        type: Boolean,
        default: false
      },
      // 层级z-index
      zIndex: {
        type: [Number, String],
        default: ""
      },
      // 用户自定义样式
      customStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 遮罩的动画样式， 是否使用使用zoom进行scale进行缩放
      zoom: {
        type: Boolean,
        default: true
      },
      // 遮罩的过渡时间，单位为ms
      duration: {
        type: [Number, String],
        default: 300
      },
      // 是否可以通过点击遮罩进行关闭
      maskClickAble: {
        type: Boolean,
        default: true
      },
      // 遮罩的模糊度
      blur: {
        type: [Number, String],
        default: 0
      }
    },
    data() {
      return {
        zoomStyle: {
          transform: ""
        },
        scale: "scale(1.2, 1.2)"
      };
    },
    watch: {
      show(n) {
        if (n && this.zoom) {
          this.zoomStyle.transform = "scale(1, 1)";
        } else if (!n && this.zoom) {
          this.zoomStyle.transform = this.scale;
        }
      }
    },
    computed: {
      maskStyle() {
        let style = {};
        style.backgroundColor = "rgba(0, 0, 0, 0.6)";
        if (this.show)
          style.zIndex = this.zIndex ? this.zIndex : this.$u.zIndex.mask;
        else
          style.zIndex = -1;
        style.transition = `all ${this.duration / 1e3}s ease-in-out`;
        if (Object.keys(this.customStyle).length)
          style = {
            ...style,
            ...this.customStyle
          };
        return style;
      },
      filterStyle() {
        let { blur } = this;
        let style = {};
        if (blur) {
          style.backdropFilter = `blur(${blur}rpx)`;
        }
        return style;
      }
    },
    methods: {
      click() {
        if (!this.maskClickAble)
          return;
        this.$emit("click");
      }
    }
  };
  function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["u-mask", {
          "u-mask-zoom": $props.zoom,
          "u-mask-show": $props.show
        }]),
        "hover-stop-propagation": "",
        style: vue.normalizeStyle([$options.maskStyle, $data.zoomStyle, $options.filterStyle]),
        onClick: _cache[0] || (_cache[0] = (...args) => $options.click && $options.click(...args)),
        onTouchmove: vue.withModifiers(() => {
        }, ["stop", "prevent"])
      },
      [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ],
      38
      /* CLASS, STYLE, NEED_HYDRATION */
    );
  }
  const __easycom_0$1 = /* @__PURE__ */ _export_sfc(_sfc_main$F, [["render", _sfc_render$b], ["__scopeId", "data-v-b3b508a8"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-mask/u-mask.vue"]]);
  const _sfc_main$E = {
    name: "u-popup",
    emits: ["update:modelValue", "input", "open", "close"],
    props: {
      value: {
        type: Boolean,
        default: false
      },
      modelValue: {
        type: Boolean,
        default: false
      },
      /**
       * 显示状态
       */
      show: {
        type: Boolean,
        default: false
      },
      /**
       * 弹出方向，left|right|top|bottom|center
       */
      mode: {
        type: String,
        default: "left"
      },
      /**
       * 是否显示遮罩
       */
      mask: {
        type: Boolean,
        default: true
      },
      // 抽屉的宽度(mode=left|right)，或者高度(mode=top|bottom)，单位rpx，或者"auto"
      // 或者百分比"50%"，表示由内容撑开高度或者宽度
      length: {
        type: [Number, String],
        default: "auto"
      },
      // 是否开启缩放动画，只在mode=center时有效
      zoom: {
        type: Boolean,
        default: true
      },
      // 是否开启底部安全区适配，开启的话，会在iPhoneX机型底部添加一定的内边距
      safeAreaInsetBottom: {
        type: Boolean,
        default: false
      },
      // 是否可以通过点击遮罩进行关闭
      maskCloseAble: {
        type: Boolean,
        default: true
      },
      // 用户自定义样式
      customStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 此为内部参数，不在文档对外使用，为了解决Picker和keyboard等融合了弹窗的组件
      // 对v-model双向绑定多层调用造成报错不能修改props值的问题
      popup: {
        type: Boolean,
        default: true
      },
      // 显示显示弹窗的圆角，单位rpx
      borderRadius: {
        type: [Number, String],
        default: 0
      },
      zIndex: {
        type: [Number, String],
        default: ""
      },
      // 是否显示关闭图标
      closeable: {
        type: Boolean,
        default: false
      },
      // 关闭图标的名称，只能uView的内置图标
      closeIcon: {
        type: String,
        default: "close"
      },
      // 自定义关闭图标位置，top-left为左上角，top-right为右上角，bottom-left为左下角，bottom-right为右下角
      closeIconPos: {
        type: String,
        default: "top-right"
      },
      // 关闭图标的颜色
      closeIconColor: {
        type: String,
        default: "#909399"
      },
      // 关闭图标的大小，单位rpx
      closeIconSize: {
        type: [String, Number],
        default: "30"
      },
      // 宽度，只对左，右，中部弹出时起作用，单位rpx，或者"auto"
      // 或者百分比"50%"，表示由内容撑开高度或者宽度，优先级高于length参数
      width: {
        type: String,
        default: ""
      },
      // 高度，只对上，下，中部弹出时起作用，单位rpx，或者"auto"
      // 或者百分比"50%"，表示由内容撑开高度或者宽度，优先级高于length参数
      height: {
        type: String,
        default: ""
      },
      // 给一个负的margin-top，往上偏移，避免和键盘重合的情况，仅在mode=center时有效
      negativeTop: {
        type: [String, Number],
        default: 0
      },
      // 遮罩的样式，一般用于修改遮罩的透明度
      maskCustomStyle: {
        type: Object,
        default() {
          return {};
        }
      },
      // 遮罩打开或收起的动画过渡时间，单位ms
      duration: {
        type: [String, Number],
        default: 250
      },
      // 遮罩的模糊度
      blur: {
        type: [String, Number],
        default: 0
      }
    },
    data() {
      return {
        visibleSync: false,
        showDrawer: false,
        timer: null,
        closeFromInner: false
        // value的值改变，是发生在内部还是外部
      };
    },
    computed: {
      valueCom() {
        return this.modelValue;
      },
      // 根据mode的位置，设定其弹窗的宽度(mode = left|right)，或者高度(mode = top|bottom)
      style() {
        let style = {};
        if (this.mode == "left" || this.mode == "right") {
          style = {
            width: this.width ? this.getUnitValue(this.width) : this.getUnitValue(this.length),
            height: "100%",
            transform: `translate3D(${this.mode == "left" ? "-100%" : "100%"},0px,0px)`
          };
        } else if (this.mode == "top" || this.mode == "bottom") {
          style = {
            width: "100%",
            height: this.height ? this.getUnitValue(this.height) : this.getUnitValue(this.length),
            transform: `translate3D(0px,${this.mode == "top" ? "-100%" : "100%"},0px)`
          };
        }
        style.zIndex = this.uZindex;
        if (this.borderRadius) {
          switch (this.mode) {
            case "left":
              style.borderRadius = `0 ${this.borderRadius}rpx ${this.borderRadius}rpx 0`;
              break;
            case "top":
              style.borderRadius = `0 0 ${this.borderRadius}rpx ${this.borderRadius}rpx`;
              break;
            case "right":
              style.borderRadius = `${this.borderRadius}rpx 0 0 ${this.borderRadius}rpx`;
              break;
            case "bottom":
              style.borderRadius = `${this.borderRadius}rpx ${this.borderRadius}rpx 0 0`;
              break;
          }
          style.overflow = "hidden";
        }
        if (this.duration)
          style.transition = `all ${this.duration / 1e3}s linear`;
        return style;
      },
      // 中部弹窗的特有样式
      centerStyle() {
        let style = {};
        style.width = this.width ? this.getUnitValue(this.width) : this.getUnitValue(this.length);
        style.height = this.height ? this.getUnitValue(this.height) : "auto";
        style.zIndex = this.uZindex;
        style.marginTop = `-${this.$u.addUnit(this.negativeTop)}`;
        if (this.borderRadius) {
          style.borderRadius = `${this.borderRadius}rpx`;
          style.overflow = "hidden";
        }
        return style;
      },
      // 计算整理后的z-index值
      uZindex() {
        return this.zIndex ? this.zIndex : this.$u.zIndex.popup;
      }
    },
    watch: {
      valueCom: {
        immediate: true,
        handler(val) {
          if (val) {
            this.open();
          } else if (!this.closeFromInner) {
            this.close();
          }
          this.closeFromInner = false;
        }
      }
    },
    mounted() {
      this.valueCom && this.open();
    },
    methods: {
      // 判断传入的值，是否带有单位，如果没有，就默认用rpx单位
      getUnitValue(val) {
        if (/(%|px|rpx|auto)$/.test(val))
          return val;
        else
          return val + "rpx";
      },
      // 遮罩被点击
      maskClick() {
        this.close();
      },
      close() {
        this.closeFromInner = true;
        this.change("showDrawer", "visibleSync", false);
      },
      // 中部弹出时，需要.u-drawer-content将居中内容，此元素会铺满屏幕，点击需要关闭弹窗
      // 让其只在mode=center时起作用
      modeCenterClose(mode) {
        if (mode != "center" || !this.maskCloseAble)
          return;
        this.close();
      },
      open() {
        this.change("visibleSync", "showDrawer", true);
      },
      // 此处的原理是，关闭时先通过动画隐藏弹窗和遮罩，再移除整个组件
      // 打开时，先渲染组件，延时一定时间再让遮罩和弹窗的动画起作用
      change(param1, param2, status) {
        if (this.popup == true) {
          this.$emit("input", status);
          this.$emit("update:modelValue", status);
        }
        this[param1] = status;
        if (status) {
          this.$nextTick(() => {
            this[param2] = status;
            this.$emit(status ? "open" : "close");
          });
        } else {
          this.timer = setTimeout(() => {
            this[param2] = status;
            this.$emit(status ? "open" : "close");
          }, this.duration);
        }
      }
    }
  };
  function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_mask = resolveEasycom(vue.resolveDynamicComponent("u-mask"), __easycom_0$1);
    const _component_u_icon = resolveEasycom(vue.resolveDynamicComponent("u-icon"), __easycom_0$6);
    return $data.visibleSync ? (vue.openBlock(), vue.createElementBlock(
      "view",
      {
        key: 0,
        style: vue.normalizeStyle([$props.customStyle, {
          zIndex: $options.uZindex - 1
        }]),
        class: "u-drawer",
        "hover-stop-propagation": ""
      },
      [
        vue.createVNode(_component_u_mask, {
          blur: $props.blur,
          duration: $props.duration,
          "custom-style": $props.maskCustomStyle,
          maskClickAble: $props.maskCloseAble,
          "z-index": $options.uZindex - 2,
          show: $data.showDrawer && $props.mask,
          onClick: $options.maskClick
        }, null, 8, ["blur", "duration", "custom-style", "maskClickAble", "z-index", "show", "onClick"]),
        vue.createCommentVNode(" 移除	@tap.stop.prevent "),
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["u-drawer-content", [
              $props.safeAreaInsetBottom ? "safe-area-inset-bottom" : "",
              "u-drawer-" + $props.mode,
              $data.showDrawer ? "u-drawer-content-visible" : "",
              $props.zoom && $props.mode == "center" ? "u-animation-zoom" : ""
            ]]),
            onClick: _cache[3] || (_cache[3] = ($event) => $options.modeCenterClose($props.mode)),
            onTouchmove: _cache[4] || (_cache[4] = vue.withModifiers(() => {
            }, ["stop", "prevent"])),
            style: vue.normalizeStyle([$options.style])
          },
          [
            $props.mode == "center" ? (vue.openBlock(), vue.createElementBlock(
              "view",
              {
                key: 0,
                class: "u-mode-center-box",
                onClick: _cache[0] || (_cache[0] = vue.withModifiers(() => {
                }, ["stop", "prevent"])),
                onTouchmove: _cache[1] || (_cache[1] = vue.withModifiers(() => {
                }, ["stop", "prevent"])),
                style: vue.normalizeStyle([$options.centerStyle])
              },
              [
                $props.closeable ? (vue.openBlock(), vue.createBlock(_component_u_icon, {
                  key: 0,
                  onClick: $options.close,
                  class: vue.normalizeClass(["u-close", ["u-close--" + $props.closeIconPos]]),
                  name: $props.closeIcon,
                  color: $props.closeIconColor,
                  size: $props.closeIconSize
                }, null, 8, ["onClick", "class", "name", "color", "size"])) : vue.createCommentVNode("v-if", true),
                vue.createElementVNode("scroll-view", {
                  class: "u-drawer__scroll-view",
                  "scroll-y": "true"
                }, [
                  vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
                ])
              ],
              36
              /* STYLE, NEED_HYDRATION */
            )) : (vue.openBlock(), vue.createElementBlock("scroll-view", {
              key: 1,
              class: "u-drawer__scroll-view",
              "scroll-y": "true"
            }, [
              vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
            ])),
            vue.createElementVNode(
              "view",
              {
                onClick: _cache[2] || (_cache[2] = (...args) => $options.close && $options.close(...args)),
                class: vue.normalizeClass(["u-close", ["u-close--" + $props.closeIconPos]])
              },
              [
                $props.mode != "center" && $props.closeable ? (vue.openBlock(), vue.createBlock(_component_u_icon, {
                  key: 0,
                  name: $props.closeIcon,
                  color: $props.closeIconColor,
                  size: $props.closeIconSize
                }, null, 8, ["name", "color", "size"])) : vue.createCommentVNode("v-if", true)
              ],
              2
              /* CLASS */
            )
          ],
          38
          /* CLASS, STYLE, NEED_HYDRATION */
        )
      ],
      4
      /* STYLE */
    )) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_5$2 = /* @__PURE__ */ _export_sfc(_sfc_main$E, [["render", _sfc_render$a], ["__scopeId", "data-v-c93a8fd2"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-popup/u-popup.vue"]]);
  const provinces = [
    {
      code: "110000",
      name: "北京市"
    },
    {
      code: "120000",
      name: "天津市"
    },
    {
      code: "130000",
      name: "河北省"
    },
    {
      code: "140000",
      name: "山西省"
    },
    {
      code: "150000",
      name: "内蒙古自治区"
    },
    {
      code: "210000",
      name: "辽宁省"
    },
    {
      code: "220000",
      name: "吉林省"
    },
    {
      code: "230000",
      name: "黑龙江省"
    },
    {
      code: "310000",
      name: "上海市"
    },
    {
      code: "320000",
      name: "江苏省"
    },
    {
      code: "330000",
      name: "浙江省"
    },
    {
      code: "340000",
      name: "安徽省"
    },
    {
      code: "350000",
      name: "福建省"
    },
    {
      code: "360000",
      name: "江西省"
    },
    {
      code: "370000",
      name: "山东省"
    },
    {
      code: "410000",
      name: "河南省"
    },
    {
      code: "420000",
      name: "湖北省"
    },
    {
      code: "430000",
      name: "湖南省"
    },
    {
      code: "440000",
      name: "广东省"
    },
    {
      code: "450000",
      name: "广西壮族自治区"
    },
    {
      code: "460000",
      name: "海南省"
    },
    {
      code: "500000",
      name: "重庆市"
    },
    {
      code: "510000",
      name: "四川省"
    },
    {
      code: "520000",
      name: "贵州省"
    },
    {
      code: "530000",
      name: "云南省"
    },
    {
      code: "540000",
      name: "西藏自治区"
    },
    {
      code: "610000",
      name: "陕西省"
    },
    {
      code: "620000",
      name: "甘肃省"
    },
    {
      code: "630000",
      name: "青海省"
    },
    {
      code: "640000",
      name: "宁夏回族自治区"
    },
    {
      code: "650000",
      name: "新疆维吾尔自治区"
    },
    {
      code: "710000",
      name: "台湾省"
    },
    {
      code: "810000",
      name: "香港特别行政区"
    },
    {
      code: "820000",
      name: "澳门特别行政区"
    }
  ];
  const citys = [
    [
      {
        code: "110100",
        name: "北京市"
      }
    ],
    [
      {
        code: "120100",
        name: "天津市"
      }
    ],
    [
      {
        code: "130100",
        name: "石家庄市"
      },
      {
        code: "130200",
        name: "唐山市"
      },
      {
        code: "130300",
        name: "秦皇岛市"
      },
      {
        code: "130400",
        name: "邯郸市"
      },
      {
        code: "130500",
        name: "邢台市"
      },
      {
        code: "130600",
        name: "保定市"
      },
      {
        code: "130700",
        name: "张家口市"
      },
      {
        code: "130800",
        name: "承德市"
      },
      {
        code: "130900",
        name: "沧州市"
      },
      {
        code: "131000",
        name: "廊坊市"
      },
      {
        code: "131100",
        name: "衡水市"
      }
    ],
    [
      {
        code: "140100",
        name: "太原市"
      },
      {
        code: "140200",
        name: "大同市"
      },
      {
        code: "140300",
        name: "阳泉市"
      },
      {
        code: "140400",
        name: "长治市"
      },
      {
        code: "140500",
        name: "晋城市"
      },
      {
        code: "140600",
        name: "朔州市"
      },
      {
        code: "140700",
        name: "晋中市"
      },
      {
        code: "140800",
        name: "运城市"
      },
      {
        code: "140900",
        name: "忻州市"
      },
      {
        code: "141000",
        name: "临汾市"
      },
      {
        code: "141100",
        name: "吕梁市"
      }
    ],
    [
      {
        code: "150100",
        name: "呼和浩特市"
      },
      {
        code: "150200",
        name: "包头市"
      },
      {
        code: "150300",
        name: "乌海市"
      },
      {
        code: "150400",
        name: "赤峰市"
      },
      {
        code: "150500",
        name: "通辽市"
      },
      {
        code: "150600",
        name: "鄂尔多斯市"
      },
      {
        code: "150700",
        name: "呼伦贝尔市"
      },
      {
        code: "150800",
        name: "巴彦淖尔市"
      },
      {
        code: "150900",
        name: "乌兰察布市"
      },
      {
        code: "152200",
        name: "兴安盟"
      },
      {
        code: "152500",
        name: "锡林郭勒盟"
      },
      {
        code: "152900",
        name: "阿拉善盟"
      }
    ],
    [
      {
        code: "210100",
        name: "沈阳市"
      },
      {
        code: "210200",
        name: "大连市"
      },
      {
        code: "210300",
        name: "鞍山市"
      },
      {
        code: "210400",
        name: "抚顺市"
      },
      {
        code: "210500",
        name: "本溪市"
      },
      {
        code: "210600",
        name: "丹东市"
      },
      {
        code: "210700",
        name: "锦州市"
      },
      {
        code: "210800",
        name: "营口市"
      },
      {
        code: "210900",
        name: "阜新市"
      },
      {
        code: "211000",
        name: "辽阳市"
      },
      {
        code: "211100",
        name: "盘锦市"
      },
      {
        code: "211200",
        name: "铁岭市"
      },
      {
        code: "211300",
        name: "朝阳市"
      },
      {
        code: "211400",
        name: "葫芦岛市"
      }
    ],
    [
      {
        code: "220100",
        name: "长春市"
      },
      {
        code: "220200",
        name: "吉林市"
      },
      {
        code: "220300",
        name: "四平市"
      },
      {
        code: "220400",
        name: "辽源市"
      },
      {
        code: "220500",
        name: "通化市"
      },
      {
        code: "220600",
        name: "白山市"
      },
      {
        code: "220700",
        name: "松原市"
      },
      {
        code: "220800",
        name: "白城市"
      },
      {
        code: "222400",
        name: "延边朝鲜族自治州"
      }
    ],
    [
      {
        code: "230100",
        name: "哈尔滨市"
      },
      {
        code: "230200",
        name: "齐齐哈尔市"
      },
      {
        code: "230300",
        name: "鸡西市"
      },
      {
        code: "230400",
        name: "鹤岗市"
      },
      {
        code: "230500",
        name: "双鸭山市"
      },
      {
        code: "230600",
        name: "大庆市"
      },
      {
        code: "230700",
        name: "伊春市"
      },
      {
        code: "230800",
        name: "佳木斯市"
      },
      {
        code: "230900",
        name: "七台河市"
      },
      {
        code: "231000",
        name: "牡丹江市"
      },
      {
        code: "231100",
        name: "黑河市"
      },
      {
        code: "231200",
        name: "绥化市"
      },
      {
        code: "232700",
        name: "大兴安岭地区"
      }
    ],
    [
      {
        code: "310100",
        name: "上海市"
      }
    ],
    [
      {
        code: "320100",
        name: "南京市"
      },
      {
        code: "320200",
        name: "无锡市"
      },
      {
        code: "320300",
        name: "徐州市"
      },
      {
        code: "320400",
        name: "常州市"
      },
      {
        code: "320500",
        name: "苏州市"
      },
      {
        code: "320600",
        name: "南通市"
      },
      {
        code: "320700",
        name: "连云港市"
      },
      {
        code: "320800",
        name: "淮安市"
      },
      {
        code: "320900",
        name: "盐城市"
      },
      {
        code: "321000",
        name: "扬州市"
      },
      {
        code: "321100",
        name: "镇江市"
      },
      {
        code: "321200",
        name: "泰州市"
      },
      {
        code: "321300",
        name: "宿迁市"
      }
    ],
    [
      {
        code: "330100",
        name: "杭州市"
      },
      {
        code: "330200",
        name: "宁波市"
      },
      {
        code: "330300",
        name: "温州市"
      },
      {
        code: "330400",
        name: "嘉兴市"
      },
      {
        code: "330500",
        name: "湖州市"
      },
      {
        code: "330600",
        name: "绍兴市"
      },
      {
        code: "330700",
        name: "金华市"
      },
      {
        code: "330800",
        name: "衢州市"
      },
      {
        code: "330900",
        name: "舟山市"
      },
      {
        code: "331000",
        name: "台州市"
      },
      {
        code: "331100",
        name: "丽水市"
      }
    ],
    [
      {
        code: "340100",
        name: "合肥市"
      },
      {
        code: "340200",
        name: "芜湖市"
      },
      {
        code: "340300",
        name: "蚌埠市"
      },
      {
        code: "340400",
        name: "淮南市"
      },
      {
        code: "340500",
        name: "马鞍山市"
      },
      {
        code: "340600",
        name: "淮北市"
      },
      {
        code: "340700",
        name: "铜陵市"
      },
      {
        code: "340800",
        name: "安庆市"
      },
      {
        code: "341000",
        name: "黄山市"
      },
      {
        code: "341100",
        name: "滁州市"
      },
      {
        code: "341200",
        name: "阜阳市"
      },
      {
        code: "341300",
        name: "宿州市"
      },
      {
        code: "341500",
        name: "六安市"
      },
      {
        code: "341600",
        name: "亳州市"
      },
      {
        code: "341700",
        name: "池州市"
      },
      {
        code: "341800",
        name: "宣城市"
      }
    ],
    [
      {
        code: "350100",
        name: "福州市"
      },
      {
        code: "350200",
        name: "厦门市"
      },
      {
        code: "350300",
        name: "莆田市"
      },
      {
        code: "350400",
        name: "三明市"
      },
      {
        code: "350500",
        name: "泉州市"
      },
      {
        code: "350600",
        name: "漳州市"
      },
      {
        code: "350700",
        name: "南平市"
      },
      {
        code: "350800",
        name: "龙岩市"
      },
      {
        code: "350900",
        name: "宁德市"
      }
    ],
    [
      {
        code: "360100",
        name: "南昌市"
      },
      {
        code: "360200",
        name: "景德镇市"
      },
      {
        code: "360300",
        name: "萍乡市"
      },
      {
        code: "360400",
        name: "九江市"
      },
      {
        code: "360500",
        name: "新余市"
      },
      {
        code: "360600",
        name: "鹰潭市"
      },
      {
        code: "360700",
        name: "赣州市"
      },
      {
        code: "360800",
        name: "吉安市"
      },
      {
        code: "360900",
        name: "宜春市"
      },
      {
        code: "361000",
        name: "抚州市"
      },
      {
        code: "361100",
        name: "上饶市"
      }
    ],
    [
      {
        code: "370100",
        name: "济南市"
      },
      {
        code: "370200",
        name: "青岛市"
      },
      {
        code: "370300",
        name: "淄博市"
      },
      {
        code: "370400",
        name: "枣庄市"
      },
      {
        code: "370500",
        name: "东营市"
      },
      {
        code: "370600",
        name: "烟台市"
      },
      {
        code: "370700",
        name: "潍坊市"
      },
      {
        code: "370800",
        name: "济宁市"
      },
      {
        code: "370900",
        name: "泰安市"
      },
      {
        code: "371000",
        name: "威海市"
      },
      {
        code: "371100",
        name: "日照市"
      },
      {
        code: "371200",
        name: "莱芜市"
      },
      {
        code: "371300",
        name: "临沂市"
      },
      {
        code: "371400",
        name: "德州市"
      },
      {
        code: "371500",
        name: "聊城市"
      },
      {
        code: "371600",
        name: "滨州市"
      },
      {
        code: "371700",
        name: "菏泽市"
      }
    ],
    [
      {
        code: "410100",
        name: "郑州市"
      },
      {
        code: "410200",
        name: "开封市"
      },
      {
        code: "410300",
        name: "洛阳市"
      },
      {
        code: "410400",
        name: "平顶山市"
      },
      {
        code: "410500",
        name: "安阳市"
      },
      {
        code: "410600",
        name: "鹤壁市"
      },
      {
        code: "410700",
        name: "新乡市"
      },
      {
        code: "410800",
        name: "焦作市"
      },
      {
        code: "410900",
        name: "濮阳市"
      },
      {
        code: "411000",
        name: "许昌市"
      },
      {
        code: "411100",
        name: "漯河市"
      },
      {
        code: "411200",
        name: "三门峡市"
      },
      {
        code: "411300",
        name: "南阳市"
      },
      {
        code: "411400",
        name: "商丘市"
      },
      {
        code: "411500",
        name: "信阳市"
      },
      {
        code: "411600",
        name: "周口市"
      },
      {
        code: "411700",
        name: "驻马店市"
      },
      {
        code: "419000",
        name: "省直辖县级行政区划"
      }
    ],
    [
      {
        code: "420100",
        name: "武汉市"
      },
      {
        code: "420200",
        name: "黄石市"
      },
      {
        code: "420300",
        name: "十堰市"
      },
      {
        code: "420500",
        name: "宜昌市"
      },
      {
        code: "420600",
        name: "襄阳市"
      },
      {
        code: "420700",
        name: "鄂州市"
      },
      {
        code: "420800",
        name: "荆门市"
      },
      {
        code: "420900",
        name: "孝感市"
      },
      {
        code: "421000",
        name: "荆州市"
      },
      {
        code: "421100",
        name: "黄冈市"
      },
      {
        code: "421200",
        name: "咸宁市"
      },
      {
        code: "421300",
        name: "随州市"
      },
      {
        code: "422800",
        name: "恩施土家族苗族自治州"
      },
      {
        code: "429000",
        name: "省直辖县级行政区划"
      }
    ],
    [
      {
        code: "430100",
        name: "长沙市"
      },
      {
        code: "430200",
        name: "株洲市"
      },
      {
        code: "430300",
        name: "湘潭市"
      },
      {
        code: "430400",
        name: "衡阳市"
      },
      {
        code: "430500",
        name: "邵阳市"
      },
      {
        code: "430600",
        name: "岳阳市"
      },
      {
        code: "430700",
        name: "常德市"
      },
      {
        code: "430800",
        name: "张家界市"
      },
      {
        code: "430900",
        name: "益阳市"
      },
      {
        code: "431000",
        name: "郴州市"
      },
      {
        code: "431100",
        name: "永州市"
      },
      {
        code: "431200",
        name: "怀化市"
      },
      {
        code: "431300",
        name: "娄底市"
      },
      {
        code: "433100",
        name: "湘西土家族苗族自治州"
      }
    ],
    [
      {
        code: "440100",
        name: "广州市"
      },
      {
        code: "440200",
        name: "韶关市"
      },
      {
        code: "440300",
        name: "深圳市"
      },
      {
        code: "440400",
        name: "珠海市"
      },
      {
        code: "440500",
        name: "汕头市"
      },
      {
        code: "440600",
        name: "佛山市"
      },
      {
        code: "440700",
        name: "江门市"
      },
      {
        code: "440800",
        name: "湛江市"
      },
      {
        code: "440900",
        name: "茂名市"
      },
      {
        code: "441200",
        name: "肇庆市"
      },
      {
        code: "441300",
        name: "惠州市"
      },
      {
        code: "441400",
        name: "梅州市"
      },
      {
        code: "441500",
        name: "汕尾市"
      },
      {
        code: "441600",
        name: "河源市"
      },
      {
        code: "441700",
        name: "阳江市"
      },
      {
        code: "441800",
        name: "清远市"
      },
      {
        code: "441900",
        name: "东莞市"
      },
      {
        code: "442000",
        name: "中山市"
      },
      {
        code: "445100",
        name: "潮州市"
      },
      {
        code: "445200",
        name: "揭阳市"
      },
      {
        code: "445300",
        name: "云浮市"
      }
    ],
    [
      {
        code: "450100",
        name: "南宁市"
      },
      {
        code: "450200",
        name: "柳州市"
      },
      {
        code: "450300",
        name: "桂林市"
      },
      {
        code: "450400",
        name: "梧州市"
      },
      {
        code: "450500",
        name: "北海市"
      },
      {
        code: "450600",
        name: "防城港市"
      },
      {
        code: "450700",
        name: "钦州市"
      },
      {
        code: "450800",
        name: "贵港市"
      },
      {
        code: "450900",
        name: "玉林市"
      },
      {
        code: "451000",
        name: "百色市"
      },
      {
        code: "451100",
        name: "贺州市"
      },
      {
        code: "451200",
        name: "河池市"
      },
      {
        code: "451300",
        name: "来宾市"
      },
      {
        code: "451400",
        name: "崇左市"
      }
    ],
    [
      {
        code: "460100",
        name: "海口市"
      },
      {
        code: "460200",
        name: "三亚市"
      },
      {
        code: "460300",
        name: "三沙市"
      },
      {
        code: "460400",
        name: "儋州市"
      },
      {
        code: "469000",
        name: "省直辖县级行政区划"
      }
    ],
    [
      {
        code: "500100",
        name: "重庆市"
      },
      {
        code: "500200",
        name: "县"
      }
    ],
    [
      {
        code: "510100",
        name: "成都市"
      },
      {
        code: "510300",
        name: "自贡市"
      },
      {
        code: "510400",
        name: "攀枝花市"
      },
      {
        code: "510500",
        name: "泸州市"
      },
      {
        code: "510600",
        name: "德阳市"
      },
      {
        code: "510700",
        name: "绵阳市"
      },
      {
        code: "510800",
        name: "广元市"
      },
      {
        code: "510900",
        name: "遂宁市"
      },
      {
        code: "511000",
        name: "内江市"
      },
      {
        code: "511100",
        name: "乐山市"
      },
      {
        code: "511300",
        name: "南充市"
      },
      {
        code: "511400",
        name: "眉山市"
      },
      {
        code: "511500",
        name: "宜宾市"
      },
      {
        code: "511600",
        name: "广安市"
      },
      {
        code: "511700",
        name: "达州市"
      },
      {
        code: "511800",
        name: "雅安市"
      },
      {
        code: "511900",
        name: "巴中市"
      },
      {
        code: "512000",
        name: "资阳市"
      },
      {
        code: "513200",
        name: "阿坝藏族羌族自治州"
      },
      {
        code: "513300",
        name: "甘孜藏族自治州"
      },
      {
        code: "513400",
        name: "凉山彝族自治州"
      }
    ],
    [
      {
        code: "520100",
        name: "贵阳市"
      },
      {
        code: "520200",
        name: "六盘水市"
      },
      {
        code: "520300",
        name: "遵义市"
      },
      {
        code: "520400",
        name: "安顺市"
      },
      {
        code: "520500",
        name: "毕节市"
      },
      {
        code: "520600",
        name: "铜仁市"
      },
      {
        code: "522300",
        name: "黔西南布依族苗族自治州"
      },
      {
        code: "522600",
        name: "黔东南苗族侗族自治州"
      },
      {
        code: "522700",
        name: "黔南布依族苗族自治州"
      }
    ],
    [
      {
        code: "530100",
        name: "昆明市"
      },
      {
        code: "530300",
        name: "曲靖市"
      },
      {
        code: "530400",
        name: "玉溪市"
      },
      {
        code: "530500",
        name: "保山市"
      },
      {
        code: "530600",
        name: "昭通市"
      },
      {
        code: "530700",
        name: "丽江市"
      },
      {
        code: "530800",
        name: "普洱市"
      },
      {
        code: "530900",
        name: "临沧市"
      },
      {
        code: "532300",
        name: "楚雄彝族自治州"
      },
      {
        code: "532500",
        name: "红河哈尼族彝族自治州"
      },
      {
        code: "532600",
        name: "文山壮族苗族自治州"
      },
      {
        code: "532800",
        name: "西双版纳傣族自治州"
      },
      {
        code: "532900",
        name: "大理白族自治州"
      },
      {
        code: "533100",
        name: "德宏傣族景颇族自治州"
      },
      {
        code: "533300",
        name: "怒江傈僳族自治州"
      },
      {
        code: "533400",
        name: "迪庆藏族自治州"
      }
    ],
    [
      {
        code: "540100",
        name: "拉萨市"
      },
      {
        code: "540200",
        name: "日喀则市"
      },
      {
        code: "540300",
        name: "昌都市"
      },
      {
        code: "540400",
        name: "林芝市"
      },
      {
        code: "540500",
        name: "山南市"
      },
      {
        code: "542400",
        name: "那曲地区"
      },
      {
        code: "542500",
        name: "阿里地区"
      }
    ],
    [
      {
        code: "610100",
        name: "西安市"
      },
      {
        code: "610200",
        name: "铜川市"
      },
      {
        code: "610300",
        name: "宝鸡市"
      },
      {
        code: "610400",
        name: "咸阳市"
      },
      {
        code: "610500",
        name: "渭南市"
      },
      {
        code: "610600",
        name: "延安市"
      },
      {
        code: "610700",
        name: "汉中市"
      },
      {
        code: "610800",
        name: "榆林市"
      },
      {
        code: "610900",
        name: "安康市"
      },
      {
        code: "611000",
        name: "商洛市"
      }
    ],
    [
      {
        code: "620100",
        name: "兰州市"
      },
      {
        code: "620200",
        name: "嘉峪关市"
      },
      {
        code: "620300",
        name: "金昌市"
      },
      {
        code: "620400",
        name: "白银市"
      },
      {
        code: "620500",
        name: "天水市"
      },
      {
        code: "620600",
        name: "武威市"
      },
      {
        code: "620700",
        name: "张掖市"
      },
      {
        code: "620800",
        name: "平凉市"
      },
      {
        code: "620900",
        name: "酒泉市"
      },
      {
        code: "621000",
        name: "庆阳市"
      },
      {
        code: "621100",
        name: "定西市"
      },
      {
        code: "621200",
        name: "陇南市"
      },
      {
        code: "622900",
        name: "临夏回族自治州"
      },
      {
        code: "623000",
        name: "甘南藏族自治州"
      }
    ],
    [
      {
        code: "630100",
        name: "西宁市"
      },
      {
        code: "630200",
        name: "海东市"
      },
      {
        code: "632200",
        name: "海北藏族自治州"
      },
      {
        code: "632300",
        name: "黄南藏族自治州"
      },
      {
        code: "632500",
        name: "海南藏族自治州"
      },
      {
        code: "632600",
        name: "果洛藏族自治州"
      },
      {
        code: "632700",
        name: "玉树藏族自治州"
      },
      {
        code: "632800",
        name: "海西蒙古族藏族自治州"
      }
    ],
    [
      {
        code: "640100",
        name: "银川市"
      },
      {
        code: "640200",
        name: "石嘴山市"
      },
      {
        code: "640300",
        name: "吴忠市"
      },
      {
        code: "640400",
        name: "固原市"
      },
      {
        code: "640500",
        name: "中卫市"
      }
    ],
    [
      {
        code: "650100",
        name: "乌鲁木齐市"
      },
      {
        code: "650200",
        name: "克拉玛依市"
      },
      {
        code: "650400",
        name: "吐鲁番市"
      },
      {
        code: "650500",
        name: "哈密市"
      },
      {
        code: "652300",
        name: "昌吉回族自治州"
      },
      {
        code: "652700",
        name: "博尔塔拉蒙古自治州"
      },
      {
        code: "652800",
        name: "巴音郭楞蒙古自治州"
      },
      {
        code: "652900",
        name: "阿克苏地区"
      },
      {
        code: "653000",
        name: "克孜勒苏柯尔克孜自治州"
      },
      {
        code: "653100",
        name: "喀什地区"
      },
      {
        code: "653200",
        name: "和田地区"
      },
      {
        code: "654000",
        name: "伊犁哈萨克自治州"
      },
      {
        code: "654200",
        name: "塔城地区"
      },
      {
        code: "654300",
        name: "阿勒泰地区"
      },
      {
        code: "659000",
        name: "自治区直辖县级行政区划"
      }
    ],
    [
      {
        code: "710100",
        name: "台北市"
      },
      {
        code: "710200",
        name: "高雄市"
      },
      {
        code: "710300",
        name: "台南市"
      },
      {
        code: "710400",
        name: "台中市"
      },
      {
        code: "710600",
        name: "南投县"
      },
      {
        code: "710700",
        name: "基隆市"
      },
      {
        code: "710800",
        name: "新竹市"
      },
      {
        code: "710900",
        name: "嘉义市"
      },
      {
        code: "711100",
        name: "新北市"
      },
      {
        code: "711200",
        name: "宜兰县"
      },
      {
        code: "711300",
        name: "新竹县"
      },
      {
        code: "711400",
        name: "桃园市"
      },
      {
        code: "711500",
        name: "苗栗县"
      },
      {
        code: "711700",
        name: "彰化县"
      },
      {
        code: "711900",
        name: "嘉义县"
      },
      {
        code: "712100",
        name: "云林县"
      },
      {
        code: "712400",
        name: "屏东县"
      },
      {
        code: "712500",
        name: "台东县"
      },
      {
        code: "712600",
        name: "花莲县"
      },
      {
        code: "712700",
        name: "澎湖县"
      }
    ],
    [
      {
        code: "810100",
        name: "香港特别行政区"
      }
    ],
    [
      {
        code: "820100",
        name: "澳门特别行政区"
      }
    ]
  ];
  const areas = [
    [
      [
        {
          code: "110101",
          name: "东城区"
        },
        {
          code: "110102",
          name: "西城区"
        },
        {
          code: "110105",
          name: "朝阳区"
        },
        {
          code: "110106",
          name: "丰台区"
        },
        {
          code: "110107",
          name: "石景山区"
        },
        {
          code: "110108",
          name: "海淀区"
        },
        {
          code: "110109",
          name: "门头沟区"
        },
        {
          code: "110111",
          name: "房山区"
        },
        {
          code: "110112",
          name: "通州区"
        },
        {
          code: "110113",
          name: "顺义区"
        },
        {
          code: "110114",
          name: "昌平区"
        },
        {
          code: "110115",
          name: "大兴区"
        },
        {
          code: "110116",
          name: "怀柔区"
        },
        {
          code: "110117",
          name: "平谷区"
        },
        {
          code: "110118",
          name: "密云区"
        },
        {
          code: "110119",
          name: "延庆区"
        }
      ]
    ],
    [
      [
        {
          code: "120101",
          name: "和平区"
        },
        {
          code: "120102",
          name: "河东区"
        },
        {
          code: "120103",
          name: "河西区"
        },
        {
          code: "120104",
          name: "南开区"
        },
        {
          code: "120105",
          name: "河北区"
        },
        {
          code: "120106",
          name: "红桥区"
        },
        {
          code: "120110",
          name: "东丽区"
        },
        {
          code: "120111",
          name: "西青区"
        },
        {
          code: "120112",
          name: "津南区"
        },
        {
          code: "120113",
          name: "北辰区"
        },
        {
          code: "120114",
          name: "武清区"
        },
        {
          code: "120115",
          name: "宝坻区"
        },
        {
          code: "120116",
          name: "滨海新区"
        },
        {
          code: "120117",
          name: "宁河区"
        },
        {
          code: "120118",
          name: "静海区"
        },
        {
          code: "120119",
          name: "蓟州区"
        }
      ]
    ],
    [
      [
        {
          code: "130102",
          name: "长安区"
        },
        {
          code: "130104",
          name: "桥西区"
        },
        {
          code: "130105",
          name: "新华区"
        },
        {
          code: "130107",
          name: "井陉矿区"
        },
        {
          code: "130108",
          name: "裕华区"
        },
        {
          code: "130109",
          name: "藁城区"
        },
        {
          code: "130110",
          name: "鹿泉区"
        },
        {
          code: "130111",
          name: "栾城区"
        },
        {
          code: "130121",
          name: "井陉县"
        },
        {
          code: "130123",
          name: "正定县"
        },
        {
          code: "130125",
          name: "行唐县"
        },
        {
          code: "130126",
          name: "灵寿县"
        },
        {
          code: "130127",
          name: "高邑县"
        },
        {
          code: "130128",
          name: "深泽县"
        },
        {
          code: "130129",
          name: "赞皇县"
        },
        {
          code: "130130",
          name: "无极县"
        },
        {
          code: "130131",
          name: "平山县"
        },
        {
          code: "130132",
          name: "元氏县"
        },
        {
          code: "130133",
          name: "赵县"
        },
        {
          code: "130181",
          name: "辛集市"
        },
        {
          code: "130183",
          name: "晋州市"
        },
        {
          code: "130184",
          name: "新乐市"
        }
      ],
      [
        {
          code: "130202",
          name: "路南区"
        },
        {
          code: "130203",
          name: "路北区"
        },
        {
          code: "130204",
          name: "古冶区"
        },
        {
          code: "130205",
          name: "开平区"
        },
        {
          code: "130207",
          name: "丰南区"
        },
        {
          code: "130208",
          name: "丰润区"
        },
        {
          code: "130209",
          name: "曹妃甸区"
        },
        {
          code: "130223",
          name: "滦县"
        },
        {
          code: "130224",
          name: "滦南县"
        },
        {
          code: "130225",
          name: "乐亭县"
        },
        {
          code: "130227",
          name: "迁西县"
        },
        {
          code: "130229",
          name: "玉田县"
        },
        {
          code: "130281",
          name: "遵化市"
        },
        {
          code: "130283",
          name: "迁安市"
        }
      ],
      [
        {
          code: "130302",
          name: "海港区"
        },
        {
          code: "130303",
          name: "山海关区"
        },
        {
          code: "130304",
          name: "北戴河区"
        },
        {
          code: "130306",
          name: "抚宁区"
        },
        {
          code: "130321",
          name: "青龙满族自治县"
        },
        {
          code: "130322",
          name: "昌黎县"
        },
        {
          code: "130324",
          name: "卢龙县"
        }
      ],
      [
        {
          code: "130402",
          name: "邯山区"
        },
        {
          code: "130403",
          name: "丛台区"
        },
        {
          code: "130404",
          name: "复兴区"
        },
        {
          code: "130406",
          name: "峰峰矿区"
        },
        {
          code: "130407",
          name: "肥乡区"
        },
        {
          code: "130408",
          name: "永年区"
        },
        {
          code: "130423",
          name: "临漳县"
        },
        {
          code: "130424",
          name: "成安县"
        },
        {
          code: "130425",
          name: "大名县"
        },
        {
          code: "130426",
          name: "涉县"
        },
        {
          code: "130427",
          name: "磁县"
        },
        {
          code: "130430",
          name: "邱县"
        },
        {
          code: "130431",
          name: "鸡泽县"
        },
        {
          code: "130432",
          name: "广平县"
        },
        {
          code: "130433",
          name: "馆陶县"
        },
        {
          code: "130434",
          name: "魏县"
        },
        {
          code: "130435",
          name: "曲周县"
        },
        {
          code: "130481",
          name: "武安市"
        }
      ],
      [
        {
          code: "130502",
          name: "桥东区"
        },
        {
          code: "130503",
          name: "桥西区"
        },
        {
          code: "130521",
          name: "邢台县"
        },
        {
          code: "130522",
          name: "临城县"
        },
        {
          code: "130523",
          name: "内丘县"
        },
        {
          code: "130524",
          name: "柏乡县"
        },
        {
          code: "130525",
          name: "隆尧县"
        },
        {
          code: "130526",
          name: "任县"
        },
        {
          code: "130527",
          name: "南和县"
        },
        {
          code: "130528",
          name: "宁晋县"
        },
        {
          code: "130529",
          name: "巨鹿县"
        },
        {
          code: "130530",
          name: "新河县"
        },
        {
          code: "130531",
          name: "广宗县"
        },
        {
          code: "130532",
          name: "平乡县"
        },
        {
          code: "130533",
          name: "威县"
        },
        {
          code: "130534",
          name: "清河县"
        },
        {
          code: "130535",
          name: "临西县"
        },
        {
          code: "130581",
          name: "南宫市"
        },
        {
          code: "130582",
          name: "沙河市"
        }
      ],
      [
        {
          code: "130602",
          name: "竞秀区"
        },
        {
          code: "130606",
          name: "莲池区"
        },
        {
          code: "130607",
          name: "满城区"
        },
        {
          code: "130608",
          name: "清苑区"
        },
        {
          code: "130609",
          name: "徐水区"
        },
        {
          code: "130623",
          name: "涞水县"
        },
        {
          code: "130624",
          name: "阜平县"
        },
        {
          code: "130626",
          name: "定兴县"
        },
        {
          code: "130627",
          name: "唐县"
        },
        {
          code: "130628",
          name: "高阳县"
        },
        {
          code: "130629",
          name: "容城县"
        },
        {
          code: "130630",
          name: "涞源县"
        },
        {
          code: "130631",
          name: "望都县"
        },
        {
          code: "130632",
          name: "安新县"
        },
        {
          code: "130633",
          name: "易县"
        },
        {
          code: "130634",
          name: "曲阳县"
        },
        {
          code: "130635",
          name: "蠡县"
        },
        {
          code: "130636",
          name: "顺平县"
        },
        {
          code: "130637",
          name: "博野县"
        },
        {
          code: "130638",
          name: "雄县"
        },
        {
          code: "130681",
          name: "涿州市"
        },
        {
          code: "130682",
          name: "定州市"
        },
        {
          code: "130683",
          name: "安国市"
        },
        {
          code: "130684",
          name: "高碑店市"
        }
      ],
      [
        {
          code: "130702",
          name: "桥东区"
        },
        {
          code: "130703",
          name: "桥西区"
        },
        {
          code: "130705",
          name: "宣化区"
        },
        {
          code: "130706",
          name: "下花园区"
        },
        {
          code: "130708",
          name: "万全区"
        },
        {
          code: "130709",
          name: "崇礼区"
        },
        {
          code: "130722",
          name: "张北县"
        },
        {
          code: "130723",
          name: "康保县"
        },
        {
          code: "130724",
          name: "沽源县"
        },
        {
          code: "130725",
          name: "尚义县"
        },
        {
          code: "130726",
          name: "蔚县"
        },
        {
          code: "130727",
          name: "阳原县"
        },
        {
          code: "130728",
          name: "怀安县"
        },
        {
          code: "130730",
          name: "怀来县"
        },
        {
          code: "130731",
          name: "涿鹿县"
        },
        {
          code: "130732",
          name: "赤城县"
        }
      ],
      [
        {
          code: "130802",
          name: "双桥区"
        },
        {
          code: "130803",
          name: "双滦区"
        },
        {
          code: "130804",
          name: "鹰手营子矿区"
        },
        {
          code: "130821",
          name: "承德县"
        },
        {
          code: "130822",
          name: "兴隆县"
        },
        {
          code: "130824",
          name: "滦平县"
        },
        {
          code: "130825",
          name: "隆化县"
        },
        {
          code: "130826",
          name: "丰宁满族自治县"
        },
        {
          code: "130827",
          name: "宽城满族自治县"
        },
        {
          code: "130828",
          name: "围场满族蒙古族自治县"
        },
        {
          code: "130881",
          name: "平泉市"
        }
      ],
      [
        {
          code: "130902",
          name: "新华区"
        },
        {
          code: "130903",
          name: "运河区"
        },
        {
          code: "130921",
          name: "沧县"
        },
        {
          code: "130922",
          name: "青县"
        },
        {
          code: "130923",
          name: "东光县"
        },
        {
          code: "130924",
          name: "海兴县"
        },
        {
          code: "130925",
          name: "盐山县"
        },
        {
          code: "130926",
          name: "肃宁县"
        },
        {
          code: "130927",
          name: "南皮县"
        },
        {
          code: "130928",
          name: "吴桥县"
        },
        {
          code: "130929",
          name: "献县"
        },
        {
          code: "130930",
          name: "孟村回族自治县"
        },
        {
          code: "130981",
          name: "泊头市"
        },
        {
          code: "130982",
          name: "任丘市"
        },
        {
          code: "130983",
          name: "黄骅市"
        },
        {
          code: "130984",
          name: "河间市"
        }
      ],
      [
        {
          code: "131002",
          name: "安次区"
        },
        {
          code: "131003",
          name: "广阳区"
        },
        {
          code: "131022",
          name: "固安县"
        },
        {
          code: "131023",
          name: "永清县"
        },
        {
          code: "131024",
          name: "香河县"
        },
        {
          code: "131025",
          name: "大城县"
        },
        {
          code: "131026",
          name: "文安县"
        },
        {
          code: "131028",
          name: "大厂回族自治县"
        },
        {
          code: "131081",
          name: "霸州市"
        },
        {
          code: "131082",
          name: "三河市"
        }
      ],
      [
        {
          code: "131102",
          name: "桃城区"
        },
        {
          code: "131103",
          name: "冀州区"
        },
        {
          code: "131121",
          name: "枣强县"
        },
        {
          code: "131122",
          name: "武邑县"
        },
        {
          code: "131123",
          name: "武强县"
        },
        {
          code: "131124",
          name: "饶阳县"
        },
        {
          code: "131125",
          name: "安平县"
        },
        {
          code: "131126",
          name: "故城县"
        },
        {
          code: "131127",
          name: "景县"
        },
        {
          code: "131128",
          name: "阜城县"
        },
        {
          code: "131182",
          name: "深州市"
        }
      ]
    ],
    [
      [
        {
          code: "140105",
          name: "小店区"
        },
        {
          code: "140106",
          name: "迎泽区"
        },
        {
          code: "140107",
          name: "杏花岭区"
        },
        {
          code: "140108",
          name: "尖草坪区"
        },
        {
          code: "140109",
          name: "万柏林区"
        },
        {
          code: "140110",
          name: "晋源区"
        },
        {
          code: "140121",
          name: "清徐县"
        },
        {
          code: "140122",
          name: "阳曲县"
        },
        {
          code: "140123",
          name: "娄烦县"
        },
        {
          code: "140181",
          name: "古交市"
        }
      ],
      [
        {
          code: "140202",
          name: "城区"
        },
        {
          code: "140203",
          name: "矿区"
        },
        {
          code: "140211",
          name: "南郊区"
        },
        {
          code: "140212",
          name: "新荣区"
        },
        {
          code: "140221",
          name: "阳高县"
        },
        {
          code: "140222",
          name: "天镇县"
        },
        {
          code: "140223",
          name: "广灵县"
        },
        {
          code: "140224",
          name: "灵丘县"
        },
        {
          code: "140225",
          name: "浑源县"
        },
        {
          code: "140226",
          name: "左云县"
        },
        {
          code: "140227",
          name: "大同县"
        }
      ],
      [
        {
          code: "140302",
          name: "城区"
        },
        {
          code: "140303",
          name: "矿区"
        },
        {
          code: "140311",
          name: "郊区"
        },
        {
          code: "140321",
          name: "平定县"
        },
        {
          code: "140322",
          name: "盂县"
        }
      ],
      [
        {
          code: "140402",
          name: "城区"
        },
        {
          code: "140411",
          name: "郊区"
        },
        {
          code: "140421",
          name: "长治县"
        },
        {
          code: "140423",
          name: "襄垣县"
        },
        {
          code: "140424",
          name: "屯留县"
        },
        {
          code: "140425",
          name: "平顺县"
        },
        {
          code: "140426",
          name: "黎城县"
        },
        {
          code: "140427",
          name: "壶关县"
        },
        {
          code: "140428",
          name: "长子县"
        },
        {
          code: "140429",
          name: "武乡县"
        },
        {
          code: "140430",
          name: "沁县"
        },
        {
          code: "140431",
          name: "沁源县"
        },
        {
          code: "140481",
          name: "潞城市"
        }
      ],
      [
        {
          code: "140502",
          name: "城区"
        },
        {
          code: "140521",
          name: "沁水县"
        },
        {
          code: "140522",
          name: "阳城县"
        },
        {
          code: "140524",
          name: "陵川县"
        },
        {
          code: "140525",
          name: "泽州县"
        },
        {
          code: "140581",
          name: "高平市"
        }
      ],
      [
        {
          code: "140602",
          name: "朔城区"
        },
        {
          code: "140603",
          name: "平鲁区"
        },
        {
          code: "140621",
          name: "山阴县"
        },
        {
          code: "140622",
          name: "应县"
        },
        {
          code: "140623",
          name: "右玉县"
        },
        {
          code: "140624",
          name: "怀仁县"
        }
      ],
      [
        {
          code: "140702",
          name: "榆次区"
        },
        {
          code: "140721",
          name: "榆社县"
        },
        {
          code: "140722",
          name: "左权县"
        },
        {
          code: "140723",
          name: "和顺县"
        },
        {
          code: "140724",
          name: "昔阳县"
        },
        {
          code: "140725",
          name: "寿阳县"
        },
        {
          code: "140726",
          name: "太谷县"
        },
        {
          code: "140727",
          name: "祁县"
        },
        {
          code: "140728",
          name: "平遥县"
        },
        {
          code: "140729",
          name: "灵石县"
        },
        {
          code: "140781",
          name: "介休市"
        }
      ],
      [
        {
          code: "140802",
          name: "盐湖区"
        },
        {
          code: "140821",
          name: "临猗县"
        },
        {
          code: "140822",
          name: "万荣县"
        },
        {
          code: "140823",
          name: "闻喜县"
        },
        {
          code: "140824",
          name: "稷山县"
        },
        {
          code: "140825",
          name: "新绛县"
        },
        {
          code: "140826",
          name: "绛县"
        },
        {
          code: "140827",
          name: "垣曲县"
        },
        {
          code: "140828",
          name: "夏县"
        },
        {
          code: "140829",
          name: "平陆县"
        },
        {
          code: "140830",
          name: "芮城县"
        },
        {
          code: "140881",
          name: "永济市"
        },
        {
          code: "140882",
          name: "河津市"
        }
      ],
      [
        {
          code: "140902",
          name: "忻府区"
        },
        {
          code: "140921",
          name: "定襄县"
        },
        {
          code: "140922",
          name: "五台县"
        },
        {
          code: "140923",
          name: "代县"
        },
        {
          code: "140924",
          name: "繁峙县"
        },
        {
          code: "140925",
          name: "宁武县"
        },
        {
          code: "140926",
          name: "静乐县"
        },
        {
          code: "140927",
          name: "神池县"
        },
        {
          code: "140928",
          name: "五寨县"
        },
        {
          code: "140929",
          name: "岢岚县"
        },
        {
          code: "140930",
          name: "河曲县"
        },
        {
          code: "140931",
          name: "保德县"
        },
        {
          code: "140932",
          name: "偏关县"
        },
        {
          code: "140981",
          name: "原平市"
        }
      ],
      [
        {
          code: "141002",
          name: "尧都区"
        },
        {
          code: "141021",
          name: "曲沃县"
        },
        {
          code: "141022",
          name: "翼城县"
        },
        {
          code: "141023",
          name: "襄汾县"
        },
        {
          code: "141024",
          name: "洪洞县"
        },
        {
          code: "141025",
          name: "古县"
        },
        {
          code: "141026",
          name: "安泽县"
        },
        {
          code: "141027",
          name: "浮山县"
        },
        {
          code: "141028",
          name: "吉县"
        },
        {
          code: "141029",
          name: "乡宁县"
        },
        {
          code: "141030",
          name: "大宁县"
        },
        {
          code: "141031",
          name: "隰县"
        },
        {
          code: "141032",
          name: "永和县"
        },
        {
          code: "141033",
          name: "蒲县"
        },
        {
          code: "141034",
          name: "汾西县"
        },
        {
          code: "141081",
          name: "侯马市"
        },
        {
          code: "141082",
          name: "霍州市"
        }
      ],
      [
        {
          code: "141102",
          name: "离石区"
        },
        {
          code: "141121",
          name: "文水县"
        },
        {
          code: "141122",
          name: "交城县"
        },
        {
          code: "141123",
          name: "兴县"
        },
        {
          code: "141124",
          name: "临县"
        },
        {
          code: "141125",
          name: "柳林县"
        },
        {
          code: "141126",
          name: "石楼县"
        },
        {
          code: "141127",
          name: "岚县"
        },
        {
          code: "141128",
          name: "方山县"
        },
        {
          code: "141129",
          name: "中阳县"
        },
        {
          code: "141130",
          name: "交口县"
        },
        {
          code: "141181",
          name: "孝义市"
        },
        {
          code: "141182",
          name: "汾阳市"
        }
      ]
    ],
    [
      [
        {
          code: "150102",
          name: "新城区"
        },
        {
          code: "150103",
          name: "回民区"
        },
        {
          code: "150104",
          name: "玉泉区"
        },
        {
          code: "150105",
          name: "赛罕区"
        },
        {
          code: "150121",
          name: "土默特左旗"
        },
        {
          code: "150122",
          name: "托克托县"
        },
        {
          code: "150123",
          name: "和林格尔县"
        },
        {
          code: "150124",
          name: "清水河县"
        },
        {
          code: "150125",
          name: "武川县"
        }
      ],
      [
        {
          code: "150202",
          name: "东河区"
        },
        {
          code: "150203",
          name: "昆都仑区"
        },
        {
          code: "150204",
          name: "青山区"
        },
        {
          code: "150205",
          name: "石拐区"
        },
        {
          code: "150206",
          name: "白云鄂博矿区"
        },
        {
          code: "150207",
          name: "九原区"
        },
        {
          code: "150221",
          name: "土默特右旗"
        },
        {
          code: "150222",
          name: "固阳县"
        },
        {
          code: "150223",
          name: "达尔罕茂明安联合旗"
        }
      ],
      [
        {
          code: "150302",
          name: "海勃湾区"
        },
        {
          code: "150303",
          name: "海南区"
        },
        {
          code: "150304",
          name: "乌达区"
        }
      ],
      [
        {
          code: "150402",
          name: "红山区"
        },
        {
          code: "150403",
          name: "元宝山区"
        },
        {
          code: "150404",
          name: "松山区"
        },
        {
          code: "150421",
          name: "阿鲁科尔沁旗"
        },
        {
          code: "150422",
          name: "巴林左旗"
        },
        {
          code: "150423",
          name: "巴林右旗"
        },
        {
          code: "150424",
          name: "林西县"
        },
        {
          code: "150425",
          name: "克什克腾旗"
        },
        {
          code: "150426",
          name: "翁牛特旗"
        },
        {
          code: "150428",
          name: "喀喇沁旗"
        },
        {
          code: "150429",
          name: "宁城县"
        },
        {
          code: "150430",
          name: "敖汉旗"
        }
      ],
      [
        {
          code: "150502",
          name: "科尔沁区"
        },
        {
          code: "150521",
          name: "科尔沁左翼中旗"
        },
        {
          code: "150522",
          name: "科尔沁左翼后旗"
        },
        {
          code: "150523",
          name: "开鲁县"
        },
        {
          code: "150524",
          name: "库伦旗"
        },
        {
          code: "150525",
          name: "奈曼旗"
        },
        {
          code: "150526",
          name: "扎鲁特旗"
        },
        {
          code: "150581",
          name: "霍林郭勒市"
        }
      ],
      [
        {
          code: "150602",
          name: "东胜区"
        },
        {
          code: "150603",
          name: "康巴什区"
        },
        {
          code: "150621",
          name: "达拉特旗"
        },
        {
          code: "150622",
          name: "准格尔旗"
        },
        {
          code: "150623",
          name: "鄂托克前旗"
        },
        {
          code: "150624",
          name: "鄂托克旗"
        },
        {
          code: "150625",
          name: "杭锦旗"
        },
        {
          code: "150626",
          name: "乌审旗"
        },
        {
          code: "150627",
          name: "伊金霍洛旗"
        }
      ],
      [
        {
          code: "150702",
          name: "海拉尔区"
        },
        {
          code: "150703",
          name: "扎赉诺尔区"
        },
        {
          code: "150721",
          name: "阿荣旗"
        },
        {
          code: "150722",
          name: "莫力达瓦达斡尔族自治旗"
        },
        {
          code: "150723",
          name: "鄂伦春自治旗"
        },
        {
          code: "150724",
          name: "鄂温克族自治旗"
        },
        {
          code: "150725",
          name: "陈巴尔虎旗"
        },
        {
          code: "150726",
          name: "新巴尔虎左旗"
        },
        {
          code: "150727",
          name: "新巴尔虎右旗"
        },
        {
          code: "150781",
          name: "满洲里市"
        },
        {
          code: "150782",
          name: "牙克石市"
        },
        {
          code: "150783",
          name: "扎兰屯市"
        },
        {
          code: "150784",
          name: "额尔古纳市"
        },
        {
          code: "150785",
          name: "根河市"
        }
      ],
      [
        {
          code: "150802",
          name: "临河区"
        },
        {
          code: "150821",
          name: "五原县"
        },
        {
          code: "150822",
          name: "磴口县"
        },
        {
          code: "150823",
          name: "乌拉特前旗"
        },
        {
          code: "150824",
          name: "乌拉特中旗"
        },
        {
          code: "150825",
          name: "乌拉特后旗"
        },
        {
          code: "150826",
          name: "杭锦后旗"
        }
      ],
      [
        {
          code: "150902",
          name: "集宁区"
        },
        {
          code: "150921",
          name: "卓资县"
        },
        {
          code: "150922",
          name: "化德县"
        },
        {
          code: "150923",
          name: "商都县"
        },
        {
          code: "150924",
          name: "兴和县"
        },
        {
          code: "150925",
          name: "凉城县"
        },
        {
          code: "150926",
          name: "察哈尔右翼前旗"
        },
        {
          code: "150927",
          name: "察哈尔右翼中旗"
        },
        {
          code: "150928",
          name: "察哈尔右翼后旗"
        },
        {
          code: "150929",
          name: "四子王旗"
        },
        {
          code: "150981",
          name: "丰镇市"
        }
      ],
      [
        {
          code: "152201",
          name: "乌兰浩特市"
        },
        {
          code: "152202",
          name: "阿尔山市"
        },
        {
          code: "152221",
          name: "科尔沁右翼前旗"
        },
        {
          code: "152222",
          name: "科尔沁右翼中旗"
        },
        {
          code: "152223",
          name: "扎赉特旗"
        },
        {
          code: "152224",
          name: "突泉县"
        }
      ],
      [
        {
          code: "152501",
          name: "二连浩特市"
        },
        {
          code: "152502",
          name: "锡林浩特市"
        },
        {
          code: "152522",
          name: "阿巴嘎旗"
        },
        {
          code: "152523",
          name: "苏尼特左旗"
        },
        {
          code: "152524",
          name: "苏尼特右旗"
        },
        {
          code: "152525",
          name: "东乌珠穆沁旗"
        },
        {
          code: "152526",
          name: "西乌珠穆沁旗"
        },
        {
          code: "152527",
          name: "太仆寺旗"
        },
        {
          code: "152528",
          name: "镶黄旗"
        },
        {
          code: "152529",
          name: "正镶白旗"
        },
        {
          code: "152530",
          name: "正蓝旗"
        },
        {
          code: "152531",
          name: "多伦县"
        }
      ],
      [
        {
          code: "152921",
          name: "阿拉善左旗"
        },
        {
          code: "152922",
          name: "阿拉善右旗"
        },
        {
          code: "152923",
          name: "额济纳旗"
        }
      ]
    ],
    [
      [
        {
          code: "210102",
          name: "和平区"
        },
        {
          code: "210103",
          name: "沈河区"
        },
        {
          code: "210104",
          name: "大东区"
        },
        {
          code: "210105",
          name: "皇姑区"
        },
        {
          code: "210106",
          name: "铁西区"
        },
        {
          code: "210111",
          name: "苏家屯区"
        },
        {
          code: "210112",
          name: "浑南区"
        },
        {
          code: "210113",
          name: "沈北新区"
        },
        {
          code: "210114",
          name: "于洪区"
        },
        {
          code: "210115",
          name: "辽中区"
        },
        {
          code: "210123",
          name: "康平县"
        },
        {
          code: "210124",
          name: "法库县"
        },
        {
          code: "210181",
          name: "新民市"
        }
      ],
      [
        {
          code: "210202",
          name: "中山区"
        },
        {
          code: "210203",
          name: "西岗区"
        },
        {
          code: "210204",
          name: "沙河口区"
        },
        {
          code: "210211",
          name: "甘井子区"
        },
        {
          code: "210212",
          name: "旅顺口区"
        },
        {
          code: "210213",
          name: "金州区"
        },
        {
          code: "210214",
          name: "普兰店区"
        },
        {
          code: "210224",
          name: "长海县"
        },
        {
          code: "210281",
          name: "瓦房店市"
        },
        {
          code: "210283",
          name: "庄河市"
        }
      ],
      [
        {
          code: "210302",
          name: "铁东区"
        },
        {
          code: "210303",
          name: "铁西区"
        },
        {
          code: "210304",
          name: "立山区"
        },
        {
          code: "210311",
          name: "千山区"
        },
        {
          code: "210321",
          name: "台安县"
        },
        {
          code: "210323",
          name: "岫岩满族自治县"
        },
        {
          code: "210381",
          name: "海城市"
        }
      ],
      [
        {
          code: "210402",
          name: "新抚区"
        },
        {
          code: "210403",
          name: "东洲区"
        },
        {
          code: "210404",
          name: "望花区"
        },
        {
          code: "210411",
          name: "顺城区"
        },
        {
          code: "210421",
          name: "抚顺县"
        },
        {
          code: "210422",
          name: "新宾满族自治县"
        },
        {
          code: "210423",
          name: "清原满族自治县"
        }
      ],
      [
        {
          code: "210502",
          name: "平山区"
        },
        {
          code: "210503",
          name: "溪湖区"
        },
        {
          code: "210504",
          name: "明山区"
        },
        {
          code: "210505",
          name: "南芬区"
        },
        {
          code: "210521",
          name: "本溪满族自治县"
        },
        {
          code: "210522",
          name: "桓仁满族自治县"
        }
      ],
      [
        {
          code: "210602",
          name: "元宝区"
        },
        {
          code: "210603",
          name: "振兴区"
        },
        {
          code: "210604",
          name: "振安区"
        },
        {
          code: "210624",
          name: "宽甸满族自治县"
        },
        {
          code: "210681",
          name: "东港市"
        },
        {
          code: "210682",
          name: "凤城市"
        }
      ],
      [
        {
          code: "210702",
          name: "古塔区"
        },
        {
          code: "210703",
          name: "凌河区"
        },
        {
          code: "210711",
          name: "太和区"
        },
        {
          code: "210726",
          name: "黑山县"
        },
        {
          code: "210727",
          name: "义县"
        },
        {
          code: "210781",
          name: "凌海市"
        },
        {
          code: "210782",
          name: "北镇市"
        }
      ],
      [
        {
          code: "210802",
          name: "站前区"
        },
        {
          code: "210803",
          name: "西市区"
        },
        {
          code: "210804",
          name: "鲅鱼圈区"
        },
        {
          code: "210811",
          name: "老边区"
        },
        {
          code: "210881",
          name: "盖州市"
        },
        {
          code: "210882",
          name: "大石桥市"
        }
      ],
      [
        {
          code: "210902",
          name: "海州区"
        },
        {
          code: "210903",
          name: "新邱区"
        },
        {
          code: "210904",
          name: "太平区"
        },
        {
          code: "210905",
          name: "清河门区"
        },
        {
          code: "210911",
          name: "细河区"
        },
        {
          code: "210921",
          name: "阜新蒙古族自治县"
        },
        {
          code: "210922",
          name: "彰武县"
        }
      ],
      [
        {
          code: "211002",
          name: "白塔区"
        },
        {
          code: "211003",
          name: "文圣区"
        },
        {
          code: "211004",
          name: "宏伟区"
        },
        {
          code: "211005",
          name: "弓长岭区"
        },
        {
          code: "211011",
          name: "太子河区"
        },
        {
          code: "211021",
          name: "辽阳县"
        },
        {
          code: "211081",
          name: "灯塔市"
        }
      ],
      [
        {
          code: "211102",
          name: "双台子区"
        },
        {
          code: "211103",
          name: "兴隆台区"
        },
        {
          code: "211104",
          name: "大洼区"
        },
        {
          code: "211122",
          name: "盘山县"
        }
      ],
      [
        {
          code: "211202",
          name: "银州区"
        },
        {
          code: "211204",
          name: "清河区"
        },
        {
          code: "211221",
          name: "铁岭县"
        },
        {
          code: "211223",
          name: "西丰县"
        },
        {
          code: "211224",
          name: "昌图县"
        },
        {
          code: "211281",
          name: "调兵山市"
        },
        {
          code: "211282",
          name: "开原市"
        }
      ],
      [
        {
          code: "211302",
          name: "双塔区"
        },
        {
          code: "211303",
          name: "龙城区"
        },
        {
          code: "211321",
          name: "朝阳县"
        },
        {
          code: "211322",
          name: "建平县"
        },
        {
          code: "211324",
          name: "喀喇沁左翼蒙古族自治县"
        },
        {
          code: "211381",
          name: "北票市"
        },
        {
          code: "211382",
          name: "凌源市"
        }
      ],
      [
        {
          code: "211402",
          name: "连山区"
        },
        {
          code: "211403",
          name: "龙港区"
        },
        {
          code: "211404",
          name: "南票区"
        },
        {
          code: "211421",
          name: "绥中县"
        },
        {
          code: "211422",
          name: "建昌县"
        },
        {
          code: "211481",
          name: "兴城市"
        }
      ]
    ],
    [
      [
        {
          code: "220102",
          name: "南关区"
        },
        {
          code: "220103",
          name: "宽城区"
        },
        {
          code: "220104",
          name: "朝阳区"
        },
        {
          code: "220105",
          name: "二道区"
        },
        {
          code: "220106",
          name: "绿园区"
        },
        {
          code: "220112",
          name: "双阳区"
        },
        {
          code: "220113",
          name: "九台区"
        },
        {
          code: "220122",
          name: "农安县"
        },
        {
          code: "220182",
          name: "榆树市"
        },
        {
          code: "220183",
          name: "德惠市"
        }
      ],
      [
        {
          code: "220202",
          name: "昌邑区"
        },
        {
          code: "220203",
          name: "龙潭区"
        },
        {
          code: "220204",
          name: "船营区"
        },
        {
          code: "220211",
          name: "丰满区"
        },
        {
          code: "220221",
          name: "永吉县"
        },
        {
          code: "220281",
          name: "蛟河市"
        },
        {
          code: "220282",
          name: "桦甸市"
        },
        {
          code: "220283",
          name: "舒兰市"
        },
        {
          code: "220284",
          name: "磐石市"
        }
      ],
      [
        {
          code: "220302",
          name: "铁西区"
        },
        {
          code: "220303",
          name: "铁东区"
        },
        {
          code: "220322",
          name: "梨树县"
        },
        {
          code: "220323",
          name: "伊通满族自治县"
        },
        {
          code: "220381",
          name: "公主岭市"
        },
        {
          code: "220382",
          name: "双辽市"
        }
      ],
      [
        {
          code: "220402",
          name: "龙山区"
        },
        {
          code: "220403",
          name: "西安区"
        },
        {
          code: "220421",
          name: "东丰县"
        },
        {
          code: "220422",
          name: "东辽县"
        }
      ],
      [
        {
          code: "220502",
          name: "东昌区"
        },
        {
          code: "220503",
          name: "二道江区"
        },
        {
          code: "220521",
          name: "通化县"
        },
        {
          code: "220523",
          name: "辉南县"
        },
        {
          code: "220524",
          name: "柳河县"
        },
        {
          code: "220581",
          name: "梅河口市"
        },
        {
          code: "220582",
          name: "集安市"
        }
      ],
      [
        {
          code: "220602",
          name: "浑江区"
        },
        {
          code: "220605",
          name: "江源区"
        },
        {
          code: "220621",
          name: "抚松县"
        },
        {
          code: "220622",
          name: "靖宇县"
        },
        {
          code: "220623",
          name: "长白朝鲜族自治县"
        },
        {
          code: "220681",
          name: "临江市"
        }
      ],
      [
        {
          code: "220702",
          name: "宁江区"
        },
        {
          code: "220721",
          name: "前郭尔罗斯蒙古族自治县"
        },
        {
          code: "220722",
          name: "长岭县"
        },
        {
          code: "220723",
          name: "乾安县"
        },
        {
          code: "220781",
          name: "扶余市"
        }
      ],
      [
        {
          code: "220802",
          name: "洮北区"
        },
        {
          code: "220821",
          name: "镇赉县"
        },
        {
          code: "220822",
          name: "通榆县"
        },
        {
          code: "220881",
          name: "洮南市"
        },
        {
          code: "220882",
          name: "大安市"
        }
      ],
      [
        {
          code: "222401",
          name: "延吉市"
        },
        {
          code: "222402",
          name: "图们市"
        },
        {
          code: "222403",
          name: "敦化市"
        },
        {
          code: "222404",
          name: "珲春市"
        },
        {
          code: "222405",
          name: "龙井市"
        },
        {
          code: "222406",
          name: "和龙市"
        },
        {
          code: "222424",
          name: "汪清县"
        },
        {
          code: "222426",
          name: "安图县"
        }
      ]
    ],
    [
      [
        {
          code: "230102",
          name: "道里区"
        },
        {
          code: "230103",
          name: "南岗区"
        },
        {
          code: "230104",
          name: "道外区"
        },
        {
          code: "230108",
          name: "平房区"
        },
        {
          code: "230109",
          name: "松北区"
        },
        {
          code: "230110",
          name: "香坊区"
        },
        {
          code: "230111",
          name: "呼兰区"
        },
        {
          code: "230112",
          name: "阿城区"
        },
        {
          code: "230113",
          name: "双城区"
        },
        {
          code: "230123",
          name: "依兰县"
        },
        {
          code: "230124",
          name: "方正县"
        },
        {
          code: "230125",
          name: "宾县"
        },
        {
          code: "230126",
          name: "巴彦县"
        },
        {
          code: "230127",
          name: "木兰县"
        },
        {
          code: "230128",
          name: "通河县"
        },
        {
          code: "230129",
          name: "延寿县"
        },
        {
          code: "230183",
          name: "尚志市"
        },
        {
          code: "230184",
          name: "五常市"
        }
      ],
      [
        {
          code: "230202",
          name: "龙沙区"
        },
        {
          code: "230203",
          name: "建华区"
        },
        {
          code: "230204",
          name: "铁锋区"
        },
        {
          code: "230205",
          name: "昂昂溪区"
        },
        {
          code: "230206",
          name: "富拉尔基区"
        },
        {
          code: "230207",
          name: "碾子山区"
        },
        {
          code: "230208",
          name: "梅里斯达斡尔族区"
        },
        {
          code: "230221",
          name: "龙江县"
        },
        {
          code: "230223",
          name: "依安县"
        },
        {
          code: "230224",
          name: "泰来县"
        },
        {
          code: "230225",
          name: "甘南县"
        },
        {
          code: "230227",
          name: "富裕县"
        },
        {
          code: "230229",
          name: "克山县"
        },
        {
          code: "230230",
          name: "克东县"
        },
        {
          code: "230231",
          name: "拜泉县"
        },
        {
          code: "230281",
          name: "讷河市"
        }
      ],
      [
        {
          code: "230302",
          name: "鸡冠区"
        },
        {
          code: "230303",
          name: "恒山区"
        },
        {
          code: "230304",
          name: "滴道区"
        },
        {
          code: "230305",
          name: "梨树区"
        },
        {
          code: "230306",
          name: "城子河区"
        },
        {
          code: "230307",
          name: "麻山区"
        },
        {
          code: "230321",
          name: "鸡东县"
        },
        {
          code: "230381",
          name: "虎林市"
        },
        {
          code: "230382",
          name: "密山市"
        }
      ],
      [
        {
          code: "230402",
          name: "向阳区"
        },
        {
          code: "230403",
          name: "工农区"
        },
        {
          code: "230404",
          name: "南山区"
        },
        {
          code: "230405",
          name: "兴安区"
        },
        {
          code: "230406",
          name: "东山区"
        },
        {
          code: "230407",
          name: "兴山区"
        },
        {
          code: "230421",
          name: "萝北县"
        },
        {
          code: "230422",
          name: "绥滨县"
        }
      ],
      [
        {
          code: "230502",
          name: "尖山区"
        },
        {
          code: "230503",
          name: "岭东区"
        },
        {
          code: "230505",
          name: "四方台区"
        },
        {
          code: "230506",
          name: "宝山区"
        },
        {
          code: "230521",
          name: "集贤县"
        },
        {
          code: "230522",
          name: "友谊县"
        },
        {
          code: "230523",
          name: "宝清县"
        },
        {
          code: "230524",
          name: "饶河县"
        }
      ],
      [
        {
          code: "230602",
          name: "萨尔图区"
        },
        {
          code: "230603",
          name: "龙凤区"
        },
        {
          code: "230604",
          name: "让胡路区"
        },
        {
          code: "230605",
          name: "红岗区"
        },
        {
          code: "230606",
          name: "大同区"
        },
        {
          code: "230621",
          name: "肇州县"
        },
        {
          code: "230622",
          name: "肇源县"
        },
        {
          code: "230623",
          name: "林甸县"
        },
        {
          code: "230624",
          name: "杜尔伯特蒙古族自治县"
        }
      ],
      [
        {
          code: "230702",
          name: "伊春区"
        },
        {
          code: "230703",
          name: "南岔区"
        },
        {
          code: "230704",
          name: "友好区"
        },
        {
          code: "230705",
          name: "西林区"
        },
        {
          code: "230706",
          name: "翠峦区"
        },
        {
          code: "230707",
          name: "新青区"
        },
        {
          code: "230708",
          name: "美溪区"
        },
        {
          code: "230709",
          name: "金山屯区"
        },
        {
          code: "230710",
          name: "五营区"
        },
        {
          code: "230711",
          name: "乌马河区"
        },
        {
          code: "230712",
          name: "汤旺河区"
        },
        {
          code: "230713",
          name: "带岭区"
        },
        {
          code: "230714",
          name: "乌伊岭区"
        },
        {
          code: "230715",
          name: "红星区"
        },
        {
          code: "230716",
          name: "上甘岭区"
        },
        {
          code: "230722",
          name: "嘉荫县"
        },
        {
          code: "230781",
          name: "铁力市"
        }
      ],
      [
        {
          code: "230803",
          name: "向阳区"
        },
        {
          code: "230804",
          name: "前进区"
        },
        {
          code: "230805",
          name: "东风区"
        },
        {
          code: "230811",
          name: "郊区"
        },
        {
          code: "230822",
          name: "桦南县"
        },
        {
          code: "230826",
          name: "桦川县"
        },
        {
          code: "230828",
          name: "汤原县"
        },
        {
          code: "230881",
          name: "同江市"
        },
        {
          code: "230882",
          name: "富锦市"
        },
        {
          code: "230883",
          name: "抚远市"
        }
      ],
      [
        {
          code: "230902",
          name: "新兴区"
        },
        {
          code: "230903",
          name: "桃山区"
        },
        {
          code: "230904",
          name: "茄子河区"
        },
        {
          code: "230921",
          name: "勃利县"
        }
      ],
      [
        {
          code: "231002",
          name: "东安区"
        },
        {
          code: "231003",
          name: "阳明区"
        },
        {
          code: "231004",
          name: "爱民区"
        },
        {
          code: "231005",
          name: "西安区"
        },
        {
          code: "231025",
          name: "林口县"
        },
        {
          code: "231081",
          name: "绥芬河市"
        },
        {
          code: "231083",
          name: "海林市"
        },
        {
          code: "231084",
          name: "宁安市"
        },
        {
          code: "231085",
          name: "穆棱市"
        },
        {
          code: "231086",
          name: "东宁市"
        }
      ],
      [
        {
          code: "231102",
          name: "爱辉区"
        },
        {
          code: "231121",
          name: "嫩江县"
        },
        {
          code: "231123",
          name: "逊克县"
        },
        {
          code: "231124",
          name: "孙吴县"
        },
        {
          code: "231181",
          name: "北安市"
        },
        {
          code: "231182",
          name: "五大连池市"
        }
      ],
      [
        {
          code: "231202",
          name: "北林区"
        },
        {
          code: "231221",
          name: "望奎县"
        },
        {
          code: "231222",
          name: "兰西县"
        },
        {
          code: "231223",
          name: "青冈县"
        },
        {
          code: "231224",
          name: "庆安县"
        },
        {
          code: "231225",
          name: "明水县"
        },
        {
          code: "231226",
          name: "绥棱县"
        },
        {
          code: "231281",
          name: "安达市"
        },
        {
          code: "231282",
          name: "肇东市"
        },
        {
          code: "231283",
          name: "海伦市"
        }
      ],
      [
        {
          code: "232701",
          name: "加格达奇区"
        },
        {
          code: "232702",
          name: "松岭区"
        },
        {
          code: "232703",
          name: "新林区"
        },
        {
          code: "232704",
          name: "呼中区"
        },
        {
          code: "232721",
          name: "呼玛县"
        },
        {
          code: "232722",
          name: "塔河县"
        },
        {
          code: "232723",
          name: "漠河县"
        }
      ]
    ],
    [
      [
        {
          code: "310101",
          name: "黄浦区"
        },
        {
          code: "310104",
          name: "徐汇区"
        },
        {
          code: "310105",
          name: "长宁区"
        },
        {
          code: "310106",
          name: "静安区"
        },
        {
          code: "310107",
          name: "普陀区"
        },
        {
          code: "310109",
          name: "虹口区"
        },
        {
          code: "310110",
          name: "杨浦区"
        },
        {
          code: "310112",
          name: "闵行区"
        },
        {
          code: "310113",
          name: "宝山区"
        },
        {
          code: "310114",
          name: "嘉定区"
        },
        {
          code: "310115",
          name: "浦东新区"
        },
        {
          code: "310116",
          name: "金山区"
        },
        {
          code: "310117",
          name: "松江区"
        },
        {
          code: "310118",
          name: "青浦区"
        },
        {
          code: "310120",
          name: "奉贤区"
        },
        {
          code: "310151",
          name: "崇明区"
        }
      ]
    ],
    [
      [
        {
          code: "320102",
          name: "玄武区"
        },
        {
          code: "320104",
          name: "秦淮区"
        },
        {
          code: "320105",
          name: "建邺区"
        },
        {
          code: "320106",
          name: "鼓楼区"
        },
        {
          code: "320111",
          name: "浦口区"
        },
        {
          code: "320113",
          name: "栖霞区"
        },
        {
          code: "320114",
          name: "雨花台区"
        },
        {
          code: "320115",
          name: "江宁区"
        },
        {
          code: "320116",
          name: "六合区"
        },
        {
          code: "320117",
          name: "溧水区"
        },
        {
          code: "320118",
          name: "高淳区"
        }
      ],
      [
        {
          code: "320205",
          name: "锡山区"
        },
        {
          code: "320206",
          name: "惠山区"
        },
        {
          code: "320211",
          name: "滨湖区"
        },
        {
          code: "320213",
          name: "梁溪区"
        },
        {
          code: "320214",
          name: "新吴区"
        },
        {
          code: "320281",
          name: "江阴市"
        },
        {
          code: "320282",
          name: "宜兴市"
        }
      ],
      [
        {
          code: "320302",
          name: "鼓楼区"
        },
        {
          code: "320303",
          name: "云龙区"
        },
        {
          code: "320305",
          name: "贾汪区"
        },
        {
          code: "320311",
          name: "泉山区"
        },
        {
          code: "320312",
          name: "铜山区"
        },
        {
          code: "320321",
          name: "丰县"
        },
        {
          code: "320322",
          name: "沛县"
        },
        {
          code: "320324",
          name: "睢宁县"
        },
        {
          code: "320381",
          name: "新沂市"
        },
        {
          code: "320382",
          name: "邳州市"
        }
      ],
      [
        {
          code: "320402",
          name: "天宁区"
        },
        {
          code: "320404",
          name: "钟楼区"
        },
        {
          code: "320411",
          name: "新北区"
        },
        {
          code: "320412",
          name: "武进区"
        },
        {
          code: "320413",
          name: "金坛区"
        },
        {
          code: "320481",
          name: "溧阳市"
        }
      ],
      [
        {
          code: "320505",
          name: "虎丘区"
        },
        {
          code: "320506",
          name: "吴中区"
        },
        {
          code: "320507",
          name: "相城区"
        },
        {
          code: "320508",
          name: "姑苏区"
        },
        {
          code: "320509",
          name: "吴江区"
        },
        {
          code: "320581",
          name: "常熟市"
        },
        {
          code: "320582",
          name: "张家港市"
        },
        {
          code: "320583",
          name: "昆山市"
        },
        {
          code: "320585",
          name: "太仓市"
        }
      ],
      [
        {
          code: "320602",
          name: "崇川区"
        },
        {
          code: "320611",
          name: "港闸区"
        },
        {
          code: "320612",
          name: "通州区"
        },
        {
          code: "320621",
          name: "海安县"
        },
        {
          code: "320623",
          name: "如东县"
        },
        {
          code: "320681",
          name: "启东市"
        },
        {
          code: "320682",
          name: "如皋市"
        },
        {
          code: "320684",
          name: "海门市"
        }
      ],
      [
        {
          code: "320703",
          name: "连云区"
        },
        {
          code: "320706",
          name: "海州区"
        },
        {
          code: "320707",
          name: "赣榆区"
        },
        {
          code: "320722",
          name: "东海县"
        },
        {
          code: "320723",
          name: "灌云县"
        },
        {
          code: "320724",
          name: "灌南县"
        }
      ],
      [
        {
          code: "320803",
          name: "淮安区"
        },
        {
          code: "320804",
          name: "淮阴区"
        },
        {
          code: "320812",
          name: "清江浦区"
        },
        {
          code: "320813",
          name: "洪泽区"
        },
        {
          code: "320826",
          name: "涟水县"
        },
        {
          code: "320830",
          name: "盱眙县"
        },
        {
          code: "320831",
          name: "金湖县"
        }
      ],
      [
        {
          code: "320902",
          name: "亭湖区"
        },
        {
          code: "320903",
          name: "盐都区"
        },
        {
          code: "320904",
          name: "大丰区"
        },
        {
          code: "320921",
          name: "响水县"
        },
        {
          code: "320922",
          name: "滨海县"
        },
        {
          code: "320923",
          name: "阜宁县"
        },
        {
          code: "320924",
          name: "射阳县"
        },
        {
          code: "320925",
          name: "建湖县"
        },
        {
          code: "320981",
          name: "东台市"
        }
      ],
      [
        {
          code: "321002",
          name: "广陵区"
        },
        {
          code: "321003",
          name: "邗江区"
        },
        {
          code: "321012",
          name: "江都区"
        },
        {
          code: "321023",
          name: "宝应县"
        },
        {
          code: "321081",
          name: "仪征市"
        },
        {
          code: "321084",
          name: "高邮市"
        }
      ],
      [
        {
          code: "321102",
          name: "京口区"
        },
        {
          code: "321111",
          name: "润州区"
        },
        {
          code: "321112",
          name: "丹徒区"
        },
        {
          code: "321181",
          name: "丹阳市"
        },
        {
          code: "321182",
          name: "扬中市"
        },
        {
          code: "321183",
          name: "句容市"
        }
      ],
      [
        {
          code: "321202",
          name: "海陵区"
        },
        {
          code: "321203",
          name: "高港区"
        },
        {
          code: "321204",
          name: "姜堰区"
        },
        {
          code: "321281",
          name: "兴化市"
        },
        {
          code: "321282",
          name: "靖江市"
        },
        {
          code: "321283",
          name: "泰兴市"
        }
      ],
      [
        {
          code: "321302",
          name: "宿城区"
        },
        {
          code: "321311",
          name: "宿豫区"
        },
        {
          code: "321322",
          name: "沭阳县"
        },
        {
          code: "321323",
          name: "泗阳县"
        },
        {
          code: "321324",
          name: "泗洪县"
        }
      ]
    ],
    [
      [
        {
          code: "330102",
          name: "上城区"
        },
        {
          code: "330105",
          name: "拱墅区"
        },
        {
          code: "330106",
          name: "西湖区"
        },
        {
          code: "330108",
          name: "滨江区"
        },
        {
          code: "330109",
          name: "萧山区"
        },
        {
          code: "330110",
          name: "余杭区"
        },
        {
          code: "330111",
          name: "富阳区"
        },
        {
          code: "330112",
          name: "临安区"
        },
        {
          code: "330113",
          name: "临平区"
        },
        {
          code: "330114",
          name: "钱塘区"
        },
        {
          code: "330122",
          name: "桐庐县"
        },
        {
          code: "330127",
          name: "淳安县"
        },
        {
          code: "330182",
          name: "建德市"
        }
      ],
      [
        {
          code: "330203",
          name: "海曙区"
        },
        {
          code: "330205",
          name: "江北区"
        },
        {
          code: "330206",
          name: "北仑区"
        },
        {
          code: "330211",
          name: "镇海区"
        },
        {
          code: "330212",
          name: "鄞州区"
        },
        {
          code: "330213",
          name: "奉化区"
        },
        {
          code: "330225",
          name: "象山县"
        },
        {
          code: "330226",
          name: "宁海县"
        },
        {
          code: "330281",
          name: "余姚市"
        },
        {
          code: "330282",
          name: "慈溪市"
        }
      ],
      [
        {
          code: "330302",
          name: "鹿城区"
        },
        {
          code: "330303",
          name: "龙湾区"
        },
        {
          code: "330304",
          name: "瓯海区"
        },
        {
          code: "330305",
          name: "洞头区"
        },
        {
          code: "330324",
          name: "永嘉县"
        },
        {
          code: "330326",
          name: "平阳县"
        },
        {
          code: "330327",
          name: "苍南县"
        },
        {
          code: "330328",
          name: "文成县"
        },
        {
          code: "330329",
          name: "泰顺县"
        },
        {
          code: "330381",
          name: "瑞安市"
        },
        {
          code: "330382",
          name: "乐清市"
        }
      ],
      [
        {
          code: "330402",
          name: "南湖区"
        },
        {
          code: "330411",
          name: "秀洲区"
        },
        {
          code: "330421",
          name: "嘉善县"
        },
        {
          code: "330424",
          name: "海盐县"
        },
        {
          code: "330481",
          name: "海宁市"
        },
        {
          code: "330482",
          name: "平湖市"
        },
        {
          code: "330483",
          name: "桐乡市"
        }
      ],
      [
        {
          code: "330502",
          name: "吴兴区"
        },
        {
          code: "330503",
          name: "南浔区"
        },
        {
          code: "330521",
          name: "德清县"
        },
        {
          code: "330522",
          name: "长兴县"
        },
        {
          code: "330523",
          name: "安吉县"
        }
      ],
      [
        {
          code: "330602",
          name: "越城区"
        },
        {
          code: "330603",
          name: "柯桥区"
        },
        {
          code: "330604",
          name: "上虞区"
        },
        {
          code: "330624",
          name: "新昌县"
        },
        {
          code: "330681",
          name: "诸暨市"
        },
        {
          code: "330683",
          name: "嵊州市"
        }
      ],
      [
        {
          code: "330702",
          name: "婺城区"
        },
        {
          code: "330703",
          name: "金东区"
        },
        {
          code: "330723",
          name: "武义县"
        },
        {
          code: "330726",
          name: "浦江县"
        },
        {
          code: "330727",
          name: "磐安县"
        },
        {
          code: "330781",
          name: "兰溪市"
        },
        {
          code: "330782",
          name: "义乌市"
        },
        {
          code: "330783",
          name: "东阳市"
        },
        {
          code: "330784",
          name: "永康市"
        }
      ],
      [
        {
          code: "330802",
          name: "柯城区"
        },
        {
          code: "330803",
          name: "衢江区"
        },
        {
          code: "330822",
          name: "常山县"
        },
        {
          code: "330824",
          name: "开化县"
        },
        {
          code: "330825",
          name: "龙游县"
        },
        {
          code: "330881",
          name: "江山市"
        }
      ],
      [
        {
          code: "330902",
          name: "定海区"
        },
        {
          code: "330903",
          name: "普陀区"
        },
        {
          code: "330921",
          name: "岱山县"
        },
        {
          code: "330922",
          name: "嵊泗县"
        }
      ],
      [
        {
          code: "331002",
          name: "椒江区"
        },
        {
          code: "331003",
          name: "黄岩区"
        },
        {
          code: "331004",
          name: "路桥区"
        },
        {
          code: "331022",
          name: "三门县"
        },
        {
          code: "331023",
          name: "天台县"
        },
        {
          code: "331024",
          name: "仙居县"
        },
        {
          code: "331081",
          name: "温岭市"
        },
        {
          code: "331082",
          name: "临海市"
        },
        {
          code: "331083",
          name: "玉环市"
        }
      ],
      [
        {
          code: "331102",
          name: "莲都区"
        },
        {
          code: "331121",
          name: "青田县"
        },
        {
          code: "331122",
          name: "缙云县"
        },
        {
          code: "331123",
          name: "遂昌县"
        },
        {
          code: "331124",
          name: "松阳县"
        },
        {
          code: "331125",
          name: "云和县"
        },
        {
          code: "331126",
          name: "庆元县"
        },
        {
          code: "331127",
          name: "景宁畲族自治县"
        },
        {
          code: "331181",
          name: "龙泉市"
        }
      ]
    ],
    [
      [
        {
          code: "340102",
          name: "瑶海区"
        },
        {
          code: "340103",
          name: "庐阳区"
        },
        {
          code: "340104",
          name: "蜀山区"
        },
        {
          code: "340111",
          name: "包河区"
        },
        {
          code: "340121",
          name: "长丰县"
        },
        {
          code: "340122",
          name: "肥东县"
        },
        {
          code: "340123",
          name: "肥西县"
        },
        {
          code: "340124",
          name: "庐江县"
        },
        {
          code: "340181",
          name: "巢湖市"
        }
      ],
      [
        {
          code: "340202",
          name: "镜湖区"
        },
        {
          code: "340203",
          name: "弋江区"
        },
        {
          code: "340207",
          name: "鸠江区"
        },
        {
          code: "340208",
          name: "三山区"
        },
        {
          code: "340221",
          name: "芜湖县"
        },
        {
          code: "340222",
          name: "繁昌县"
        },
        {
          code: "340223",
          name: "南陵县"
        },
        {
          code: "340225",
          name: "无为县"
        }
      ],
      [
        {
          code: "340302",
          name: "龙子湖区"
        },
        {
          code: "340303",
          name: "蚌山区"
        },
        {
          code: "340304",
          name: "禹会区"
        },
        {
          code: "340311",
          name: "淮上区"
        },
        {
          code: "340321",
          name: "怀远县"
        },
        {
          code: "340322",
          name: "五河县"
        },
        {
          code: "340323",
          name: "固镇县"
        }
      ],
      [
        {
          code: "340402",
          name: "大通区"
        },
        {
          code: "340403",
          name: "田家庵区"
        },
        {
          code: "340404",
          name: "谢家集区"
        },
        {
          code: "340405",
          name: "八公山区"
        },
        {
          code: "340406",
          name: "潘集区"
        },
        {
          code: "340421",
          name: "凤台县"
        },
        {
          code: "340422",
          name: "寿县"
        }
      ],
      [
        {
          code: "340503",
          name: "花山区"
        },
        {
          code: "340504",
          name: "雨山区"
        },
        {
          code: "340506",
          name: "博望区"
        },
        {
          code: "340521",
          name: "当涂县"
        },
        {
          code: "340522",
          name: "含山县"
        },
        {
          code: "340523",
          name: "和县"
        }
      ],
      [
        {
          code: "340602",
          name: "杜集区"
        },
        {
          code: "340603",
          name: "相山区"
        },
        {
          code: "340604",
          name: "烈山区"
        },
        {
          code: "340621",
          name: "濉溪县"
        }
      ],
      [
        {
          code: "340705",
          name: "铜官区"
        },
        {
          code: "340706",
          name: "义安区"
        },
        {
          code: "340711",
          name: "郊区"
        },
        {
          code: "340722",
          name: "枞阳县"
        }
      ],
      [
        {
          code: "340802",
          name: "迎江区"
        },
        {
          code: "340803",
          name: "大观区"
        },
        {
          code: "340811",
          name: "宜秀区"
        },
        {
          code: "340822",
          name: "怀宁县"
        },
        {
          code: "340824",
          name: "潜山县"
        },
        {
          code: "340825",
          name: "太湖县"
        },
        {
          code: "340826",
          name: "宿松县"
        },
        {
          code: "340827",
          name: "望江县"
        },
        {
          code: "340828",
          name: "岳西县"
        },
        {
          code: "340881",
          name: "桐城市"
        }
      ],
      [
        {
          code: "341002",
          name: "屯溪区"
        },
        {
          code: "341003",
          name: "黄山区"
        },
        {
          code: "341004",
          name: "徽州区"
        },
        {
          code: "341021",
          name: "歙县"
        },
        {
          code: "341022",
          name: "休宁县"
        },
        {
          code: "341023",
          name: "黟县"
        },
        {
          code: "341024",
          name: "祁门县"
        }
      ],
      [
        {
          code: "341102",
          name: "琅琊区"
        },
        {
          code: "341103",
          name: "南谯区"
        },
        {
          code: "341122",
          name: "来安县"
        },
        {
          code: "341124",
          name: "全椒县"
        },
        {
          code: "341125",
          name: "定远县"
        },
        {
          code: "341126",
          name: "凤阳县"
        },
        {
          code: "341181",
          name: "天长市"
        },
        {
          code: "341182",
          name: "明光市"
        }
      ],
      [
        {
          code: "341202",
          name: "颍州区"
        },
        {
          code: "341203",
          name: "颍东区"
        },
        {
          code: "341204",
          name: "颍泉区"
        },
        {
          code: "341221",
          name: "临泉县"
        },
        {
          code: "341222",
          name: "太和县"
        },
        {
          code: "341225",
          name: "阜南县"
        },
        {
          code: "341226",
          name: "颍上县"
        },
        {
          code: "341282",
          name: "界首市"
        }
      ],
      [
        {
          code: "341302",
          name: "埇桥区"
        },
        {
          code: "341321",
          name: "砀山县"
        },
        {
          code: "341322",
          name: "萧县"
        },
        {
          code: "341323",
          name: "灵璧县"
        },
        {
          code: "341324",
          name: "泗县"
        }
      ],
      [
        {
          code: "341502",
          name: "金安区"
        },
        {
          code: "341503",
          name: "裕安区"
        },
        {
          code: "341504",
          name: "叶集区"
        },
        {
          code: "341522",
          name: "霍邱县"
        },
        {
          code: "341523",
          name: "舒城县"
        },
        {
          code: "341524",
          name: "金寨县"
        },
        {
          code: "341525",
          name: "霍山县"
        }
      ],
      [
        {
          code: "341602",
          name: "谯城区"
        },
        {
          code: "341621",
          name: "涡阳县"
        },
        {
          code: "341622",
          name: "蒙城县"
        },
        {
          code: "341623",
          name: "利辛县"
        }
      ],
      [
        {
          code: "341702",
          name: "贵池区"
        },
        {
          code: "341721",
          name: "东至县"
        },
        {
          code: "341722",
          name: "石台县"
        },
        {
          code: "341723",
          name: "青阳县"
        }
      ],
      [
        {
          code: "341802",
          name: "宣州区"
        },
        {
          code: "341821",
          name: "郎溪县"
        },
        {
          code: "341822",
          name: "广德县"
        },
        {
          code: "341823",
          name: "泾县"
        },
        {
          code: "341824",
          name: "绩溪县"
        },
        {
          code: "341825",
          name: "旌德县"
        },
        {
          code: "341881",
          name: "宁国市"
        }
      ]
    ],
    [
      [
        {
          code: "350102",
          name: "鼓楼区"
        },
        {
          code: "350103",
          name: "台江区"
        },
        {
          code: "350104",
          name: "仓山区"
        },
        {
          code: "350105",
          name: "马尾区"
        },
        {
          code: "350111",
          name: "晋安区"
        },
        {
          code: "350112",
          name: "长乐区"
        },
        {
          code: "350121",
          name: "闽侯县"
        },
        {
          code: "350122",
          name: "连江县"
        },
        {
          code: "350123",
          name: "罗源县"
        },
        {
          code: "350124",
          name: "闽清县"
        },
        {
          code: "350125",
          name: "永泰县"
        },
        {
          code: "350128",
          name: "平潭县"
        },
        {
          code: "350181",
          name: "福清市"
        }
      ],
      [
        {
          code: "350203",
          name: "思明区"
        },
        {
          code: "350205",
          name: "海沧区"
        },
        {
          code: "350206",
          name: "湖里区"
        },
        {
          code: "350211",
          name: "集美区"
        },
        {
          code: "350212",
          name: "同安区"
        },
        {
          code: "350213",
          name: "翔安区"
        }
      ],
      [
        {
          code: "350302",
          name: "城厢区"
        },
        {
          code: "350303",
          name: "涵江区"
        },
        {
          code: "350304",
          name: "荔城区"
        },
        {
          code: "350305",
          name: "秀屿区"
        },
        {
          code: "350322",
          name: "仙游县"
        }
      ],
      [
        {
          code: "350404",
          name: "三元区"
        },
        {
          code: "350405",
          name: "沙县区"
        },
        {
          code: "350421",
          name: "明溪县"
        },
        {
          code: "350423",
          name: "清流县"
        },
        {
          code: "350424",
          name: "宁化县"
        },
        {
          code: "350425",
          name: "大田县"
        },
        {
          code: "350426",
          name: "尤溪县"
        },
        {
          code: "350428",
          name: "将乐县"
        },
        {
          code: "350429",
          name: "泰宁县"
        },
        {
          code: "350430",
          name: "建宁县"
        },
        {
          code: "350481",
          name: "永安市"
        }
      ],
      [
        {
          code: "350502",
          name: "鲤城区"
        },
        {
          code: "350503",
          name: "丰泽区"
        },
        {
          code: "350504",
          name: "洛江区"
        },
        {
          code: "350505",
          name: "泉港区"
        },
        {
          code: "350521",
          name: "惠安县"
        },
        {
          code: "350524",
          name: "安溪县"
        },
        {
          code: "350525",
          name: "永春县"
        },
        {
          code: "350526",
          name: "德化县"
        },
        {
          code: "350527",
          name: "金门县"
        },
        {
          code: "350581",
          name: "石狮市"
        },
        {
          code: "350582",
          name: "晋江市"
        },
        {
          code: "350583",
          name: "南安市"
        }
      ],
      [
        {
          code: "350602",
          name: "芗城区"
        },
        {
          code: "350603",
          name: "龙文区"
        },
        {
          code: "350604",
          name: "龙海区"
        },
        {
          code: "350605",
          name: "长泰区"
        },
        {
          code: "350622",
          name: "云霄县"
        },
        {
          code: "350623",
          name: "漳浦县"
        },
        {
          code: "350624",
          name: "诏安县"
        },
        {
          code: "350626",
          name: "东山县"
        },
        {
          code: "350627",
          name: "南靖县"
        },
        {
          code: "350628",
          name: "平和县"
        },
        {
          code: "350629",
          name: "华安县"
        }
      ],
      [
        {
          code: "350702",
          name: "延平区"
        },
        {
          code: "350703",
          name: "建阳区"
        },
        {
          code: "350721",
          name: "顺昌县"
        },
        {
          code: "350722",
          name: "浦城县"
        },
        {
          code: "350723",
          name: "光泽县"
        },
        {
          code: "350724",
          name: "松溪县"
        },
        {
          code: "350725",
          name: "政和县"
        },
        {
          code: "350781",
          name: "邵武市"
        },
        {
          code: "350782",
          name: "武夷山市"
        },
        {
          code: "350783",
          name: "建瓯市"
        }
      ],
      [
        {
          code: "350802",
          name: "新罗区"
        },
        {
          code: "350803",
          name: "永定区"
        },
        {
          code: "350821",
          name: "长汀县"
        },
        {
          code: "350823",
          name: "上杭县"
        },
        {
          code: "350824",
          name: "武平县"
        },
        {
          code: "350825",
          name: "连城县"
        },
        {
          code: "350881",
          name: "漳平市"
        }
      ],
      [
        {
          code: "350902",
          name: "蕉城区"
        },
        {
          code: "350921",
          name: "霞浦县"
        },
        {
          code: "350922",
          name: "古田县"
        },
        {
          code: "350923",
          name: "屏南县"
        },
        {
          code: "350924",
          name: "寿宁县"
        },
        {
          code: "350925",
          name: "周宁县"
        },
        {
          code: "350926",
          name: "柘荣县"
        },
        {
          code: "350981",
          name: "福安市"
        },
        {
          code: "350982",
          name: "福鼎市"
        }
      ]
    ],
    [
      [
        {
          code: "360102",
          name: "东湖区"
        },
        {
          code: "360103",
          name: "西湖区"
        },
        {
          code: "360104",
          name: "青云谱区"
        },
        {
          code: "360105",
          name: "湾里区"
        },
        {
          code: "360111",
          name: "青山湖区"
        },
        {
          code: "360112",
          name: "新建区"
        },
        {
          code: "360121",
          name: "南昌县"
        },
        {
          code: "360123",
          name: "安义县"
        },
        {
          code: "360124",
          name: "进贤县"
        }
      ],
      [
        {
          code: "360202",
          name: "昌江区"
        },
        {
          code: "360203",
          name: "珠山区"
        },
        {
          code: "360222",
          name: "浮梁县"
        },
        {
          code: "360281",
          name: "乐平市"
        }
      ],
      [
        {
          code: "360302",
          name: "安源区"
        },
        {
          code: "360313",
          name: "湘东区"
        },
        {
          code: "360321",
          name: "莲花县"
        },
        {
          code: "360322",
          name: "上栗县"
        },
        {
          code: "360323",
          name: "芦溪县"
        }
      ],
      [
        {
          code: "360402",
          name: "濂溪区"
        },
        {
          code: "360403",
          name: "浔阳区"
        },
        {
          code: "360404",
          name: "柴桑区"
        },
        {
          code: "360423",
          name: "武宁县"
        },
        {
          code: "360424",
          name: "修水县"
        },
        {
          code: "360425",
          name: "永修县"
        },
        {
          code: "360426",
          name: "德安县"
        },
        {
          code: "360428",
          name: "都昌县"
        },
        {
          code: "360429",
          name: "湖口县"
        },
        {
          code: "360430",
          name: "彭泽县"
        },
        {
          code: "360481",
          name: "瑞昌市"
        },
        {
          code: "360482",
          name: "共青城市"
        },
        {
          code: "360483",
          name: "庐山市"
        }
      ],
      [
        {
          code: "360502",
          name: "渝水区"
        },
        {
          code: "360521",
          name: "分宜县"
        }
      ],
      [
        {
          code: "360602",
          name: "月湖区"
        },
        {
          code: "360622",
          name: "余江区"
        },
        {
          code: "360681",
          name: "贵溪市"
        }
      ],
      [
        {
          code: "360702",
          name: "章贡区"
        },
        {
          code: "360703",
          name: "南康区"
        },
        {
          code: "360704",
          name: "赣县区"
        },
        {
          code: "360722",
          name: "信丰县"
        },
        {
          code: "360723",
          name: "大余县"
        },
        {
          code: "360724",
          name: "上犹县"
        },
        {
          code: "360725",
          name: "崇义县"
        },
        {
          code: "360726",
          name: "安远县"
        },
        {
          code: "360727",
          name: "龙南县"
        },
        {
          code: "360728",
          name: "定南县"
        },
        {
          code: "360729",
          name: "全南县"
        },
        {
          code: "360730",
          name: "宁都县"
        },
        {
          code: "360731",
          name: "于都县"
        },
        {
          code: "360732",
          name: "兴国县"
        },
        {
          code: "360733",
          name: "会昌县"
        },
        {
          code: "360734",
          name: "寻乌县"
        },
        {
          code: "360735",
          name: "石城县"
        },
        {
          code: "360781",
          name: "瑞金市"
        }
      ],
      [
        {
          code: "360802",
          name: "吉州区"
        },
        {
          code: "360803",
          name: "青原区"
        },
        {
          code: "360821",
          name: "吉安县"
        },
        {
          code: "360822",
          name: "吉水县"
        },
        {
          code: "360823",
          name: "峡江县"
        },
        {
          code: "360824",
          name: "新干县"
        },
        {
          code: "360825",
          name: "永丰县"
        },
        {
          code: "360826",
          name: "泰和县"
        },
        {
          code: "360827",
          name: "遂川县"
        },
        {
          code: "360828",
          name: "万安县"
        },
        {
          code: "360829",
          name: "安福县"
        },
        {
          code: "360830",
          name: "永新县"
        },
        {
          code: "360881",
          name: "井冈山市"
        }
      ],
      [
        {
          code: "360902",
          name: "袁州区"
        },
        {
          code: "360921",
          name: "奉新县"
        },
        {
          code: "360922",
          name: "万载县"
        },
        {
          code: "360923",
          name: "上高县"
        },
        {
          code: "360924",
          name: "宜丰县"
        },
        {
          code: "360925",
          name: "靖安县"
        },
        {
          code: "360926",
          name: "铜鼓县"
        },
        {
          code: "360981",
          name: "丰城市"
        },
        {
          code: "360982",
          name: "樟树市"
        },
        {
          code: "360983",
          name: "高安市"
        }
      ],
      [
        {
          code: "361002",
          name: "临川区"
        },
        {
          code: "361003",
          name: "东乡区"
        },
        {
          code: "361021",
          name: "南城县"
        },
        {
          code: "361022",
          name: "黎川县"
        },
        {
          code: "361023",
          name: "南丰县"
        },
        {
          code: "361024",
          name: "崇仁县"
        },
        {
          code: "361025",
          name: "乐安县"
        },
        {
          code: "361026",
          name: "宜黄县"
        },
        {
          code: "361027",
          name: "金溪县"
        },
        {
          code: "361028",
          name: "资溪县"
        },
        {
          code: "361030",
          name: "广昌县"
        }
      ],
      [
        {
          code: "361102",
          name: "信州区"
        },
        {
          code: "361103",
          name: "广丰区"
        },
        {
          code: "361121",
          name: "上饶县"
        },
        {
          code: "361123",
          name: "玉山县"
        },
        {
          code: "361124",
          name: "铅山县"
        },
        {
          code: "361125",
          name: "横峰县"
        },
        {
          code: "361126",
          name: "弋阳县"
        },
        {
          code: "361127",
          name: "余干县"
        },
        {
          code: "361128",
          name: "鄱阳县"
        },
        {
          code: "361129",
          name: "万年县"
        },
        {
          code: "361130",
          name: "婺源县"
        },
        {
          code: "361181",
          name: "德兴市"
        }
      ]
    ],
    [
      [
        {
          code: "370102",
          name: "历下区"
        },
        {
          code: "370103",
          name: "市中区"
        },
        {
          code: "370104",
          name: "槐荫区"
        },
        {
          code: "370105",
          name: "天桥区"
        },
        {
          code: "370112",
          name: "历城区"
        },
        {
          code: "370113",
          name: "长清区"
        },
        {
          code: "370114",
          name: "章丘区"
        },
        {
          code: "370124",
          name: "平阴县"
        },
        {
          code: "370125",
          name: "济阳县"
        },
        {
          code: "370126",
          name: "商河县"
        }
      ],
      [
        {
          code: "370202",
          name: "市南区"
        },
        {
          code: "370203",
          name: "市北区"
        },
        {
          code: "370211",
          name: "黄岛区"
        },
        {
          code: "370212",
          name: "崂山区"
        },
        {
          code: "370213",
          name: "李沧区"
        },
        {
          code: "370214",
          name: "城阳区"
        },
        {
          code: "370215",
          name: "即墨区"
        },
        {
          code: "370281",
          name: "胶州市"
        },
        {
          code: "370283",
          name: "平度市"
        },
        {
          code: "370285",
          name: "莱西市"
        }
      ],
      [
        {
          code: "370302",
          name: "淄川区"
        },
        {
          code: "370303",
          name: "张店区"
        },
        {
          code: "370304",
          name: "博山区"
        },
        {
          code: "370305",
          name: "临淄区"
        },
        {
          code: "370306",
          name: "周村区"
        },
        {
          code: "370321",
          name: "桓台县"
        },
        {
          code: "370322",
          name: "高青县"
        },
        {
          code: "370323",
          name: "沂源县"
        }
      ],
      [
        {
          code: "370402",
          name: "市中区"
        },
        {
          code: "370403",
          name: "薛城区"
        },
        {
          code: "370404",
          name: "峄城区"
        },
        {
          code: "370405",
          name: "台儿庄区"
        },
        {
          code: "370406",
          name: "山亭区"
        },
        {
          code: "370481",
          name: "滕州市"
        }
      ],
      [
        {
          code: "370502",
          name: "东营区"
        },
        {
          code: "370503",
          name: "河口区"
        },
        {
          code: "370505",
          name: "垦利区"
        },
        {
          code: "370522",
          name: "利津县"
        },
        {
          code: "370523",
          name: "广饶县"
        }
      ],
      [
        {
          code: "370602",
          name: "芝罘区"
        },
        {
          code: "370611",
          name: "福山区"
        },
        {
          code: "370612",
          name: "牟平区"
        },
        {
          code: "370613",
          name: "莱山区"
        },
        {
          code: "370634",
          name: "长岛县"
        },
        {
          code: "370681",
          name: "龙口市"
        },
        {
          code: "370682",
          name: "莱阳市"
        },
        {
          code: "370683",
          name: "莱州市"
        },
        {
          code: "370684",
          name: "蓬莱市"
        },
        {
          code: "370685",
          name: "招远市"
        },
        {
          code: "370686",
          name: "栖霞市"
        },
        {
          code: "370687",
          name: "海阳市"
        }
      ],
      [
        {
          code: "370702",
          name: "潍城区"
        },
        {
          code: "370703",
          name: "寒亭区"
        },
        {
          code: "370704",
          name: "坊子区"
        },
        {
          code: "370705",
          name: "奎文区"
        },
        {
          code: "370724",
          name: "临朐县"
        },
        {
          code: "370725",
          name: "昌乐县"
        },
        {
          code: "370781",
          name: "青州市"
        },
        {
          code: "370782",
          name: "诸城市"
        },
        {
          code: "370783",
          name: "寿光市"
        },
        {
          code: "370784",
          name: "安丘市"
        },
        {
          code: "370785",
          name: "高密市"
        },
        {
          code: "370786",
          name: "昌邑市"
        }
      ],
      [
        {
          code: "370811",
          name: "任城区"
        },
        {
          code: "370812",
          name: "兖州区"
        },
        {
          code: "370826",
          name: "微山县"
        },
        {
          code: "370827",
          name: "鱼台县"
        },
        {
          code: "370828",
          name: "金乡县"
        },
        {
          code: "370829",
          name: "嘉祥县"
        },
        {
          code: "370830",
          name: "汶上县"
        },
        {
          code: "370831",
          name: "泗水县"
        },
        {
          code: "370832",
          name: "梁山县"
        },
        {
          code: "370881",
          name: "曲阜市"
        },
        {
          code: "370883",
          name: "邹城市"
        }
      ],
      [
        {
          code: "370902",
          name: "泰山区"
        },
        {
          code: "370911",
          name: "岱岳区"
        },
        {
          code: "370921",
          name: "宁阳县"
        },
        {
          code: "370923",
          name: "东平县"
        },
        {
          code: "370982",
          name: "新泰市"
        },
        {
          code: "370983",
          name: "肥城市"
        }
      ],
      [
        {
          code: "371002",
          name: "环翠区"
        },
        {
          code: "371003",
          name: "文登区"
        },
        {
          code: "371082",
          name: "荣成市"
        },
        {
          code: "371083",
          name: "乳山市"
        }
      ],
      [
        {
          code: "371102",
          name: "东港区"
        },
        {
          code: "371103",
          name: "岚山区"
        },
        {
          code: "371121",
          name: "五莲县"
        },
        {
          code: "371122",
          name: "莒县"
        }
      ],
      [
        {
          code: "371202",
          name: "莱城区"
        },
        {
          code: "371203",
          name: "钢城区"
        }
      ],
      [
        {
          code: "371302",
          name: "兰山区"
        },
        {
          code: "371311",
          name: "罗庄区"
        },
        {
          code: "371312",
          name: "河东区"
        },
        {
          code: "371321",
          name: "沂南县"
        },
        {
          code: "371322",
          name: "郯城县"
        },
        {
          code: "371323",
          name: "沂水县"
        },
        {
          code: "371324",
          name: "兰陵县"
        },
        {
          code: "371325",
          name: "费县"
        },
        {
          code: "371326",
          name: "平邑县"
        },
        {
          code: "371327",
          name: "莒南县"
        },
        {
          code: "371328",
          name: "蒙阴县"
        },
        {
          code: "371329",
          name: "临沭县"
        }
      ],
      [
        {
          code: "371402",
          name: "德城区"
        },
        {
          code: "371403",
          name: "陵城区"
        },
        {
          code: "371422",
          name: "宁津县"
        },
        {
          code: "371423",
          name: "庆云县"
        },
        {
          code: "371424",
          name: "临邑县"
        },
        {
          code: "371425",
          name: "齐河县"
        },
        {
          code: "371426",
          name: "平原县"
        },
        {
          code: "371427",
          name: "夏津县"
        },
        {
          code: "371428",
          name: "武城县"
        },
        {
          code: "371481",
          name: "乐陵市"
        },
        {
          code: "371482",
          name: "禹城市"
        }
      ],
      [
        {
          code: "371502",
          name: "东昌府区"
        },
        {
          code: "371521",
          name: "阳谷县"
        },
        {
          code: "371522",
          name: "莘县"
        },
        {
          code: "371523",
          name: "茌平县"
        },
        {
          code: "371524",
          name: "东阿县"
        },
        {
          code: "371525",
          name: "冠县"
        },
        {
          code: "371526",
          name: "高唐县"
        },
        {
          code: "371581",
          name: "临清市"
        }
      ],
      [
        {
          code: "371602",
          name: "滨城区"
        },
        {
          code: "371603",
          name: "沾化区"
        },
        {
          code: "371621",
          name: "惠民县"
        },
        {
          code: "371622",
          name: "阳信县"
        },
        {
          code: "371623",
          name: "无棣县"
        },
        {
          code: "371625",
          name: "博兴县"
        },
        {
          code: "371626",
          name: "邹平县"
        }
      ],
      [
        {
          code: "371702",
          name: "牡丹区"
        },
        {
          code: "371703",
          name: "定陶区"
        },
        {
          code: "371721",
          name: "曹县"
        },
        {
          code: "371722",
          name: "单县"
        },
        {
          code: "371723",
          name: "成武县"
        },
        {
          code: "371724",
          name: "巨野县"
        },
        {
          code: "371725",
          name: "郓城县"
        },
        {
          code: "371726",
          name: "鄄城县"
        },
        {
          code: "371728",
          name: "东明县"
        }
      ]
    ],
    [
      [
        {
          code: "410102",
          name: "中原区"
        },
        {
          code: "410103",
          name: "二七区"
        },
        {
          code: "410104",
          name: "管城回族区"
        },
        {
          code: "410105",
          name: "金水区"
        },
        {
          code: "410106",
          name: "上街区"
        },
        {
          code: "410108",
          name: "惠济区"
        },
        {
          code: "410122",
          name: "中牟县"
        },
        {
          code: "410181",
          name: "巩义市"
        },
        {
          code: "410182",
          name: "荥阳市"
        },
        {
          code: "410183",
          name: "新密市"
        },
        {
          code: "410184",
          name: "新郑市"
        },
        {
          code: "410185",
          name: "登封市"
        }
      ],
      [
        {
          code: "410202",
          name: "龙亭区"
        },
        {
          code: "410203",
          name: "顺河回族区"
        },
        {
          code: "410204",
          name: "鼓楼区"
        },
        {
          code: "410205",
          name: "禹王台区"
        },
        {
          code: "410212",
          name: "祥符区"
        },
        {
          code: "410221",
          name: "杞县"
        },
        {
          code: "410222",
          name: "通许县"
        },
        {
          code: "410223",
          name: "尉氏县"
        },
        {
          code: "410225",
          name: "兰考县"
        }
      ],
      [
        {
          code: "410302",
          name: "老城区"
        },
        {
          code: "410303",
          name: "西工区"
        },
        {
          code: "410304",
          name: "瀍河回族区"
        },
        {
          code: "410305",
          name: "涧西区"
        },
        {
          code: "410307",
          name: "偃师区"
        },
        {
          code: "410308",
          name: "孟津区"
        },
        {
          code: "410311",
          name: "洛龙区"
        },
        {
          code: "410323",
          name: "新安县"
        },
        {
          code: "410324",
          name: "栾川县"
        },
        {
          code: "410325",
          name: "嵩县"
        },
        {
          code: "410326",
          name: "汝阳县"
        },
        {
          code: "410327",
          name: "宜阳县"
        },
        {
          code: "410328",
          name: "洛宁县"
        },
        {
          code: "410329",
          name: "伊川县"
        }
      ],
      [
        {
          code: "410402",
          name: "新华区"
        },
        {
          code: "410403",
          name: "卫东区"
        },
        {
          code: "410404",
          name: "石龙区"
        },
        {
          code: "410411",
          name: "湛河区"
        },
        {
          code: "410421",
          name: "宝丰县"
        },
        {
          code: "410422",
          name: "叶县"
        },
        {
          code: "410423",
          name: "鲁山县"
        },
        {
          code: "410425",
          name: "郏县"
        },
        {
          code: "410481",
          name: "舞钢市"
        },
        {
          code: "410482",
          name: "汝州市"
        }
      ],
      [
        {
          code: "410502",
          name: "文峰区"
        },
        {
          code: "410503",
          name: "北关区"
        },
        {
          code: "410505",
          name: "殷都区"
        },
        {
          code: "410506",
          name: "龙安区"
        },
        {
          code: "410522",
          name: "安阳县"
        },
        {
          code: "410523",
          name: "汤阴县"
        },
        {
          code: "410526",
          name: "滑县"
        },
        {
          code: "410527",
          name: "内黄县"
        },
        {
          code: "410581",
          name: "林州市"
        }
      ],
      [
        {
          code: "410602",
          name: "鹤山区"
        },
        {
          code: "410603",
          name: "山城区"
        },
        {
          code: "410611",
          name: "淇滨区"
        },
        {
          code: "410621",
          name: "浚县"
        },
        {
          code: "410622",
          name: "淇县"
        }
      ],
      [
        {
          code: "410702",
          name: "红旗区"
        },
        {
          code: "410703",
          name: "卫滨区"
        },
        {
          code: "410704",
          name: "凤泉区"
        },
        {
          code: "410711",
          name: "牧野区"
        },
        {
          code: "410721",
          name: "新乡县"
        },
        {
          code: "410724",
          name: "获嘉县"
        },
        {
          code: "410725",
          name: "原阳县"
        },
        {
          code: "410726",
          name: "延津县"
        },
        {
          code: "410727",
          name: "封丘县"
        },
        {
          code: "410728",
          name: "长垣县"
        },
        {
          code: "410781",
          name: "卫辉市"
        },
        {
          code: "410782",
          name: "辉县市"
        }
      ],
      [
        {
          code: "410802",
          name: "解放区"
        },
        {
          code: "410803",
          name: "中站区"
        },
        {
          code: "410804",
          name: "马村区"
        },
        {
          code: "410811",
          name: "山阳区"
        },
        {
          code: "410821",
          name: "修武县"
        },
        {
          code: "410822",
          name: "博爱县"
        },
        {
          code: "410823",
          name: "武陟县"
        },
        {
          code: "410825",
          name: "温县"
        },
        {
          code: "410882",
          name: "沁阳市"
        },
        {
          code: "410883",
          name: "孟州市"
        }
      ],
      [
        {
          code: "410902",
          name: "华龙区"
        },
        {
          code: "410922",
          name: "清丰县"
        },
        {
          code: "410923",
          name: "南乐县"
        },
        {
          code: "410926",
          name: "范县"
        },
        {
          code: "410927",
          name: "台前县"
        },
        {
          code: "410928",
          name: "濮阳县"
        }
      ],
      [
        {
          code: "411002",
          name: "魏都区"
        },
        {
          code: "411003",
          name: "建安区"
        },
        {
          code: "411024",
          name: "鄢陵县"
        },
        {
          code: "411025",
          name: "襄城县"
        },
        {
          code: "411081",
          name: "禹州市"
        },
        {
          code: "411082",
          name: "长葛市"
        }
      ],
      [
        {
          code: "411102",
          name: "源汇区"
        },
        {
          code: "411103",
          name: "郾城区"
        },
        {
          code: "411104",
          name: "召陵区"
        },
        {
          code: "411121",
          name: "舞阳县"
        },
        {
          code: "411122",
          name: "临颍县"
        }
      ],
      [
        {
          code: "411202",
          name: "湖滨区"
        },
        {
          code: "411203",
          name: "陕州区"
        },
        {
          code: "411221",
          name: "渑池县"
        },
        {
          code: "411224",
          name: "卢氏县"
        },
        {
          code: "411281",
          name: "义马市"
        },
        {
          code: "411282",
          name: "灵宝市"
        }
      ],
      [
        {
          code: "411302",
          name: "宛城区"
        },
        {
          code: "411303",
          name: "卧龙区"
        },
        {
          code: "411321",
          name: "南召县"
        },
        {
          code: "411322",
          name: "方城县"
        },
        {
          code: "411323",
          name: "西峡县"
        },
        {
          code: "411324",
          name: "镇平县"
        },
        {
          code: "411325",
          name: "内乡县"
        },
        {
          code: "411326",
          name: "淅川县"
        },
        {
          code: "411327",
          name: "社旗县"
        },
        {
          code: "411328",
          name: "唐河县"
        },
        {
          code: "411329",
          name: "新野县"
        },
        {
          code: "411330",
          name: "桐柏县"
        },
        {
          code: "411381",
          name: "邓州市"
        }
      ],
      [
        {
          code: "411402",
          name: "梁园区"
        },
        {
          code: "411403",
          name: "睢阳区"
        },
        {
          code: "411421",
          name: "民权县"
        },
        {
          code: "411422",
          name: "睢县"
        },
        {
          code: "411423",
          name: "宁陵县"
        },
        {
          code: "411424",
          name: "柘城县"
        },
        {
          code: "411425",
          name: "虞城县"
        },
        {
          code: "411426",
          name: "夏邑县"
        },
        {
          code: "411481",
          name: "永城市"
        }
      ],
      [
        {
          code: "411502",
          name: "浉河区"
        },
        {
          code: "411503",
          name: "平桥区"
        },
        {
          code: "411521",
          name: "罗山县"
        },
        {
          code: "411522",
          name: "光山县"
        },
        {
          code: "411523",
          name: "新县"
        },
        {
          code: "411524",
          name: "商城县"
        },
        {
          code: "411525",
          name: "固始县"
        },
        {
          code: "411526",
          name: "潢川县"
        },
        {
          code: "411527",
          name: "淮滨县"
        },
        {
          code: "411528",
          name: "息县"
        }
      ],
      [
        {
          code: "411602",
          name: "川汇区"
        },
        {
          code: "411621",
          name: "扶沟县"
        },
        {
          code: "411622",
          name: "西华县"
        },
        {
          code: "411623",
          name: "商水县"
        },
        {
          code: "411624",
          name: "沈丘县"
        },
        {
          code: "411625",
          name: "郸城县"
        },
        {
          code: "411626",
          name: "淮阳县"
        },
        {
          code: "411627",
          name: "太康县"
        },
        {
          code: "411628",
          name: "鹿邑县"
        },
        {
          code: "411681",
          name: "项城市"
        }
      ],
      [
        {
          code: "411702",
          name: "驿城区"
        },
        {
          code: "411721",
          name: "西平县"
        },
        {
          code: "411722",
          name: "上蔡县"
        },
        {
          code: "411723",
          name: "平舆县"
        },
        {
          code: "411724",
          name: "正阳县"
        },
        {
          code: "411725",
          name: "确山县"
        },
        {
          code: "411726",
          name: "泌阳县"
        },
        {
          code: "411727",
          name: "汝南县"
        },
        {
          code: "411728",
          name: "遂平县"
        },
        {
          code: "411729",
          name: "新蔡县"
        }
      ],
      [
        {
          code: "419001",
          name: "济源市"
        }
      ]
    ],
    [
      [
        {
          code: "420102",
          name: "江岸区"
        },
        {
          code: "420103",
          name: "江汉区"
        },
        {
          code: "420104",
          name: "硚口区"
        },
        {
          code: "420105",
          name: "汉阳区"
        },
        {
          code: "420106",
          name: "武昌区"
        },
        {
          code: "420107",
          name: "青山区"
        },
        {
          code: "420111",
          name: "洪山区"
        },
        {
          code: "420112",
          name: "东西湖区"
        },
        {
          code: "420113",
          name: "汉南区"
        },
        {
          code: "420114",
          name: "蔡甸区"
        },
        {
          code: "420115",
          name: "江夏区"
        },
        {
          code: "420116",
          name: "黄陂区"
        },
        {
          code: "420117",
          name: "新洲区"
        }
      ],
      [
        {
          code: "420202",
          name: "黄石港区"
        },
        {
          code: "420203",
          name: "西塞山区"
        },
        {
          code: "420204",
          name: "下陆区"
        },
        {
          code: "420205",
          name: "铁山区"
        },
        {
          code: "420222",
          name: "阳新县"
        },
        {
          code: "420281",
          name: "大冶市"
        }
      ],
      [
        {
          code: "420302",
          name: "茅箭区"
        },
        {
          code: "420303",
          name: "张湾区"
        },
        {
          code: "420304",
          name: "郧阳区"
        },
        {
          code: "420322",
          name: "郧西县"
        },
        {
          code: "420323",
          name: "竹山县"
        },
        {
          code: "420324",
          name: "竹溪县"
        },
        {
          code: "420325",
          name: "房县"
        },
        {
          code: "420381",
          name: "丹江口市"
        }
      ],
      [
        {
          code: "420502",
          name: "西陵区"
        },
        {
          code: "420503",
          name: "伍家岗区"
        },
        {
          code: "420504",
          name: "点军区"
        },
        {
          code: "420505",
          name: "猇亭区"
        },
        {
          code: "420506",
          name: "夷陵区"
        },
        {
          code: "420525",
          name: "远安县"
        },
        {
          code: "420526",
          name: "兴山县"
        },
        {
          code: "420527",
          name: "秭归县"
        },
        {
          code: "420528",
          name: "长阳土家族自治县"
        },
        {
          code: "420529",
          name: "五峰土家族自治县"
        },
        {
          code: "420581",
          name: "宜都市"
        },
        {
          code: "420582",
          name: "当阳市"
        },
        {
          code: "420583",
          name: "枝江市"
        }
      ],
      [
        {
          code: "420602",
          name: "襄城区"
        },
        {
          code: "420606",
          name: "樊城区"
        },
        {
          code: "420607",
          name: "襄州区"
        },
        {
          code: "420624",
          name: "南漳县"
        },
        {
          code: "420625",
          name: "谷城县"
        },
        {
          code: "420626",
          name: "保康县"
        },
        {
          code: "420682",
          name: "老河口市"
        },
        {
          code: "420683",
          name: "枣阳市"
        },
        {
          code: "420684",
          name: "宜城市"
        }
      ],
      [
        {
          code: "420702",
          name: "梁子湖区"
        },
        {
          code: "420703",
          name: "华容区"
        },
        {
          code: "420704",
          name: "鄂城区"
        }
      ],
      [
        {
          code: "420802",
          name: "东宝区"
        },
        {
          code: "420804",
          name: "掇刀区"
        },
        {
          code: "420821",
          name: "京山县"
        },
        {
          code: "420822",
          name: "沙洋县"
        },
        {
          code: "420881",
          name: "钟祥市"
        }
      ],
      [
        {
          code: "420902",
          name: "孝南区"
        },
        {
          code: "420921",
          name: "孝昌县"
        },
        {
          code: "420922",
          name: "大悟县"
        },
        {
          code: "420923",
          name: "云梦县"
        },
        {
          code: "420981",
          name: "应城市"
        },
        {
          code: "420982",
          name: "安陆市"
        },
        {
          code: "420984",
          name: "汉川市"
        }
      ],
      [
        {
          code: "421002",
          name: "沙市区"
        },
        {
          code: "421003",
          name: "荆州区"
        },
        {
          code: "421022",
          name: "公安县"
        },
        {
          code: "421023",
          name: "监利县"
        },
        {
          code: "421024",
          name: "江陵县"
        },
        {
          code: "421081",
          name: "石首市"
        },
        {
          code: "421083",
          name: "洪湖市"
        },
        {
          code: "421087",
          name: "松滋市"
        }
      ],
      [
        {
          code: "421102",
          name: "黄州区"
        },
        {
          code: "421121",
          name: "团风县"
        },
        {
          code: "421122",
          name: "红安县"
        },
        {
          code: "421123",
          name: "罗田县"
        },
        {
          code: "421124",
          name: "英山县"
        },
        {
          code: "421125",
          name: "浠水县"
        },
        {
          code: "421126",
          name: "蕲春县"
        },
        {
          code: "421127",
          name: "黄梅县"
        },
        {
          code: "421181",
          name: "麻城市"
        },
        {
          code: "421182",
          name: "武穴市"
        }
      ],
      [
        {
          code: "421202",
          name: "咸安区"
        },
        {
          code: "421221",
          name: "嘉鱼县"
        },
        {
          code: "421222",
          name: "通城县"
        },
        {
          code: "421223",
          name: "崇阳县"
        },
        {
          code: "421224",
          name: "通山县"
        },
        {
          code: "421281",
          name: "赤壁市"
        }
      ],
      [
        {
          code: "421303",
          name: "曾都区"
        },
        {
          code: "421321",
          name: "随县"
        },
        {
          code: "421381",
          name: "广水市"
        }
      ],
      [
        {
          code: "422801",
          name: "恩施市"
        },
        {
          code: "422802",
          name: "利川市"
        },
        {
          code: "422822",
          name: "建始县"
        },
        {
          code: "422823",
          name: "巴东县"
        },
        {
          code: "422825",
          name: "宣恩县"
        },
        {
          code: "422826",
          name: "咸丰县"
        },
        {
          code: "422827",
          name: "来凤县"
        },
        {
          code: "422828",
          name: "鹤峰县"
        }
      ],
      [
        {
          code: "429004",
          name: "仙桃市"
        },
        {
          code: "429005",
          name: "潜江市"
        },
        {
          code: "429006",
          name: "天门市"
        },
        {
          code: "429021",
          name: "神农架林区"
        }
      ]
    ],
    [
      [
        {
          code: "430102",
          name: "芙蓉区"
        },
        {
          code: "430103",
          name: "天心区"
        },
        {
          code: "430104",
          name: "岳麓区"
        },
        {
          code: "430105",
          name: "开福区"
        },
        {
          code: "430111",
          name: "雨花区"
        },
        {
          code: "430112",
          name: "望城区"
        },
        {
          code: "430121",
          name: "长沙县"
        },
        {
          code: "430181",
          name: "浏阳市"
        },
        {
          code: "430182",
          name: "宁乡市"
        }
      ],
      [
        {
          code: "430202",
          name: "荷塘区"
        },
        {
          code: "430203",
          name: "芦淞区"
        },
        {
          code: "430204",
          name: "石峰区"
        },
        {
          code: "430211",
          name: "天元区"
        },
        {
          code: "430221",
          name: "株洲县"
        },
        {
          code: "430223",
          name: "攸县"
        },
        {
          code: "430224",
          name: "茶陵县"
        },
        {
          code: "430225",
          name: "炎陵县"
        },
        {
          code: "430281",
          name: "醴陵市"
        }
      ],
      [
        {
          code: "430302",
          name: "雨湖区"
        },
        {
          code: "430304",
          name: "岳塘区"
        },
        {
          code: "430321",
          name: "湘潭县"
        },
        {
          code: "430381",
          name: "湘乡市"
        },
        {
          code: "430382",
          name: "韶山市"
        }
      ],
      [
        {
          code: "430405",
          name: "珠晖区"
        },
        {
          code: "430406",
          name: "雁峰区"
        },
        {
          code: "430407",
          name: "石鼓区"
        },
        {
          code: "430408",
          name: "蒸湘区"
        },
        {
          code: "430412",
          name: "南岳区"
        },
        {
          code: "430421",
          name: "衡阳县"
        },
        {
          code: "430422",
          name: "衡南县"
        },
        {
          code: "430423",
          name: "衡山县"
        },
        {
          code: "430424",
          name: "衡东县"
        },
        {
          code: "430426",
          name: "祁东县"
        },
        {
          code: "430481",
          name: "耒阳市"
        },
        {
          code: "430482",
          name: "常宁市"
        }
      ],
      [
        {
          code: "430502",
          name: "双清区"
        },
        {
          code: "430503",
          name: "大祥区"
        },
        {
          code: "430511",
          name: "北塔区"
        },
        {
          code: "430521",
          name: "邵东县"
        },
        {
          code: "430522",
          name: "新邵县"
        },
        {
          code: "430523",
          name: "邵阳县"
        },
        {
          code: "430524",
          name: "隆回县"
        },
        {
          code: "430525",
          name: "洞口县"
        },
        {
          code: "430527",
          name: "绥宁县"
        },
        {
          code: "430528",
          name: "新宁县"
        },
        {
          code: "430529",
          name: "城步苗族自治县"
        },
        {
          code: "430581",
          name: "武冈市"
        }
      ],
      [
        {
          code: "430602",
          name: "岳阳楼区"
        },
        {
          code: "430603",
          name: "云溪区"
        },
        {
          code: "430611",
          name: "君山区"
        },
        {
          code: "430621",
          name: "岳阳县"
        },
        {
          code: "430623",
          name: "华容县"
        },
        {
          code: "430624",
          name: "湘阴县"
        },
        {
          code: "430626",
          name: "平江县"
        },
        {
          code: "430681",
          name: "汨罗市"
        },
        {
          code: "430682",
          name: "临湘市"
        }
      ],
      [
        {
          code: "430702",
          name: "武陵区"
        },
        {
          code: "430703",
          name: "鼎城区"
        },
        {
          code: "430721",
          name: "安乡县"
        },
        {
          code: "430722",
          name: "汉寿县"
        },
        {
          code: "430723",
          name: "澧县"
        },
        {
          code: "430724",
          name: "临澧县"
        },
        {
          code: "430725",
          name: "桃源县"
        },
        {
          code: "430726",
          name: "石门县"
        },
        {
          code: "430781",
          name: "津市市"
        }
      ],
      [
        {
          code: "430802",
          name: "永定区"
        },
        {
          code: "430811",
          name: "武陵源区"
        },
        {
          code: "430821",
          name: "慈利县"
        },
        {
          code: "430822",
          name: "桑植县"
        }
      ],
      [
        {
          code: "430902",
          name: "资阳区"
        },
        {
          code: "430903",
          name: "赫山区"
        },
        {
          code: "430921",
          name: "南县"
        },
        {
          code: "430922",
          name: "桃江县"
        },
        {
          code: "430923",
          name: "安化县"
        },
        {
          code: "430981",
          name: "沅江市"
        }
      ],
      [
        {
          code: "431002",
          name: "北湖区"
        },
        {
          code: "431003",
          name: "苏仙区"
        },
        {
          code: "431021",
          name: "桂阳县"
        },
        {
          code: "431022",
          name: "宜章县"
        },
        {
          code: "431023",
          name: "永兴县"
        },
        {
          code: "431024",
          name: "嘉禾县"
        },
        {
          code: "431025",
          name: "临武县"
        },
        {
          code: "431026",
          name: "汝城县"
        },
        {
          code: "431027",
          name: "桂东县"
        },
        {
          code: "431028",
          name: "安仁县"
        },
        {
          code: "431081",
          name: "资兴市"
        }
      ],
      [
        {
          code: "431102",
          name: "零陵区"
        },
        {
          code: "431103",
          name: "冷水滩区"
        },
        {
          code: "431122",
          name: "东安县"
        },
        {
          code: "431123",
          name: "双牌县"
        },
        {
          code: "431124",
          name: "道县"
        },
        {
          code: "431125",
          name: "江永县"
        },
        {
          code: "431126",
          name: "宁远县"
        },
        {
          code: "431127",
          name: "蓝山县"
        },
        {
          code: "431128",
          name: "新田县"
        },
        {
          code: "431129",
          name: "江华瑶族自治县"
        },
        {
          code: "431181",
          name: "祁阳市"
        }
      ],
      [
        {
          code: "431202",
          name: "鹤城区"
        },
        {
          code: "431221",
          name: "中方县"
        },
        {
          code: "431222",
          name: "沅陵县"
        },
        {
          code: "431223",
          name: "辰溪县"
        },
        {
          code: "431224",
          name: "溆浦县"
        },
        {
          code: "431225",
          name: "会同县"
        },
        {
          code: "431226",
          name: "麻阳苗族自治县"
        },
        {
          code: "431227",
          name: "新晃侗族自治县"
        },
        {
          code: "431228",
          name: "芷江侗族自治县"
        },
        {
          code: "431229",
          name: "靖州苗族侗族自治县"
        },
        {
          code: "431230",
          name: "通道侗族自治县"
        },
        {
          code: "431281",
          name: "洪江市"
        }
      ],
      [
        {
          code: "431302",
          name: "娄星区"
        },
        {
          code: "431321",
          name: "双峰县"
        },
        {
          code: "431322",
          name: "新化县"
        },
        {
          code: "431381",
          name: "冷水江市"
        },
        {
          code: "431382",
          name: "涟源市"
        }
      ],
      [
        {
          code: "433101",
          name: "吉首市"
        },
        {
          code: "433122",
          name: "泸溪县"
        },
        {
          code: "433123",
          name: "凤凰县"
        },
        {
          code: "433124",
          name: "花垣县"
        },
        {
          code: "433125",
          name: "保靖县"
        },
        {
          code: "433126",
          name: "古丈县"
        },
        {
          code: "433127",
          name: "永顺县"
        },
        {
          code: "433130",
          name: "龙山县"
        }
      ]
    ],
    [
      [
        {
          code: "440103",
          name: "荔湾区"
        },
        {
          code: "440104",
          name: "越秀区"
        },
        {
          code: "440105",
          name: "海珠区"
        },
        {
          code: "440106",
          name: "天河区"
        },
        {
          code: "440111",
          name: "白云区"
        },
        {
          code: "440112",
          name: "黄埔区"
        },
        {
          code: "440113",
          name: "番禺区"
        },
        {
          code: "440114",
          name: "花都区"
        },
        {
          code: "440115",
          name: "南沙区"
        },
        {
          code: "440117",
          name: "从化区"
        },
        {
          code: "440118",
          name: "增城区"
        }
      ],
      [
        {
          code: "440203",
          name: "武江区"
        },
        {
          code: "440204",
          name: "浈江区"
        },
        {
          code: "440205",
          name: "曲江区"
        },
        {
          code: "440222",
          name: "始兴县"
        },
        {
          code: "440224",
          name: "仁化县"
        },
        {
          code: "440229",
          name: "翁源县"
        },
        {
          code: "440232",
          name: "乳源瑶族自治县"
        },
        {
          code: "440233",
          name: "新丰县"
        },
        {
          code: "440281",
          name: "乐昌市"
        },
        {
          code: "440282",
          name: "南雄市"
        }
      ],
      [
        {
          code: "440303",
          name: "罗湖区"
        },
        {
          code: "440304",
          name: "福田区"
        },
        {
          code: "440305",
          name: "南山区"
        },
        {
          code: "440306",
          name: "宝安区"
        },
        {
          code: "440307",
          name: "龙岗区"
        },
        {
          code: "440308",
          name: "盐田区"
        },
        {
          code: "440309",
          name: "龙华区"
        },
        {
          code: "440310",
          name: "坪山区"
        }
      ],
      [
        {
          code: "440402",
          name: "香洲区"
        },
        {
          code: "440403",
          name: "斗门区"
        },
        {
          code: "440404",
          name: "金湾区"
        }
      ],
      [
        {
          code: "440507",
          name: "龙湖区"
        },
        {
          code: "440511",
          name: "金平区"
        },
        {
          code: "440512",
          name: "濠江区"
        },
        {
          code: "440513",
          name: "潮阳区"
        },
        {
          code: "440514",
          name: "潮南区"
        },
        {
          code: "440515",
          name: "澄海区"
        },
        {
          code: "440523",
          name: "南澳县"
        }
      ],
      [
        {
          code: "440604",
          name: "禅城区"
        },
        {
          code: "440605",
          name: "南海区"
        },
        {
          code: "440606",
          name: "顺德区"
        },
        {
          code: "440607",
          name: "三水区"
        },
        {
          code: "440608",
          name: "高明区"
        }
      ],
      [
        {
          code: "440703",
          name: "蓬江区"
        },
        {
          code: "440704",
          name: "江海区"
        },
        {
          code: "440705",
          name: "新会区"
        },
        {
          code: "440781",
          name: "台山市"
        },
        {
          code: "440783",
          name: "开平市"
        },
        {
          code: "440784",
          name: "鹤山市"
        },
        {
          code: "440785",
          name: "恩平市"
        }
      ],
      [
        {
          code: "440802",
          name: "赤坎区"
        },
        {
          code: "440803",
          name: "霞山区"
        },
        {
          code: "440804",
          name: "坡头区"
        },
        {
          code: "440811",
          name: "麻章区"
        },
        {
          code: "440823",
          name: "遂溪县"
        },
        {
          code: "440825",
          name: "徐闻县"
        },
        {
          code: "440881",
          name: "廉江市"
        },
        {
          code: "440882",
          name: "雷州市"
        },
        {
          code: "440883",
          name: "吴川市"
        }
      ],
      [
        {
          code: "440902",
          name: "茂南区"
        },
        {
          code: "440904",
          name: "电白区"
        },
        {
          code: "440981",
          name: "高州市"
        },
        {
          code: "440982",
          name: "化州市"
        },
        {
          code: "440983",
          name: "信宜市"
        }
      ],
      [
        {
          code: "441202",
          name: "端州区"
        },
        {
          code: "441203",
          name: "鼎湖区"
        },
        {
          code: "441204",
          name: "高要区"
        },
        {
          code: "441223",
          name: "广宁县"
        },
        {
          code: "441224",
          name: "怀集县"
        },
        {
          code: "441225",
          name: "封开县"
        },
        {
          code: "441226",
          name: "德庆县"
        },
        {
          code: "441284",
          name: "四会市"
        }
      ],
      [
        {
          code: "441302",
          name: "惠城区"
        },
        {
          code: "441303",
          name: "惠阳区"
        },
        {
          code: "441322",
          name: "博罗县"
        },
        {
          code: "441323",
          name: "惠东县"
        },
        {
          code: "441324",
          name: "龙门县"
        }
      ],
      [
        {
          code: "441402",
          name: "梅江区"
        },
        {
          code: "441403",
          name: "梅县区"
        },
        {
          code: "441422",
          name: "大埔县"
        },
        {
          code: "441423",
          name: "丰顺县"
        },
        {
          code: "441424",
          name: "五华县"
        },
        {
          code: "441426",
          name: "平远县"
        },
        {
          code: "441427",
          name: "蕉岭县"
        },
        {
          code: "441481",
          name: "兴宁市"
        }
      ],
      [
        {
          code: "441502",
          name: "城区"
        },
        {
          code: "441521",
          name: "海丰县"
        },
        {
          code: "441523",
          name: "陆河县"
        },
        {
          code: "441581",
          name: "陆丰市"
        }
      ],
      [
        {
          code: "441602",
          name: "源城区"
        },
        {
          code: "441621",
          name: "紫金县"
        },
        {
          code: "441622",
          name: "龙川县"
        },
        {
          code: "441623",
          name: "连平县"
        },
        {
          code: "441624",
          name: "和平县"
        },
        {
          code: "441625",
          name: "东源县"
        }
      ],
      [
        {
          code: "441702",
          name: "江城区"
        },
        {
          code: "441704",
          name: "阳东区"
        },
        {
          code: "441721",
          name: "阳西县"
        },
        {
          code: "441781",
          name: "阳春市"
        }
      ],
      [
        {
          code: "441802",
          name: "清城区"
        },
        {
          code: "441803",
          name: "清新区"
        },
        {
          code: "441821",
          name: "佛冈县"
        },
        {
          code: "441823",
          name: "阳山县"
        },
        {
          code: "441825",
          name: "连山壮族瑶族自治县"
        },
        {
          code: "441826",
          name: "连南瑶族自治县"
        },
        {
          code: "441881",
          name: "英德市"
        },
        {
          code: "441882",
          name: "连州市"
        }
      ],
      [
        {
          code: "441901",
          name: "东城街道"
        },
        {
          code: "441902",
          name: "南城街道"
        },
        {
          code: "441903",
          name: "万江街道"
        },
        {
          code: "441904",
          name: "莞城街道"
        },
        {
          code: "441905",
          name: "石碣镇"
        },
        {
          code: "441906",
          name: "石龙镇"
        },
        {
          code: "441907",
          name: "茶山镇"
        },
        {
          code: "441908",
          name: "石排镇"
        },
        {
          code: "441909",
          name: "企石镇"
        },
        {
          code: "441910",
          name: "横沥镇"
        },
        {
          code: "441911",
          name: "桥头镇"
        },
        {
          code: "441912",
          name: "谢岗镇"
        },
        {
          code: "441913",
          name: "东坑镇"
        },
        {
          code: "441914",
          name: "常平镇"
        },
        {
          code: "441915",
          name: "寮步镇"
        },
        {
          code: "441916",
          name: "樟木头镇"
        },
        {
          code: "441917",
          name: "大朗镇"
        },
        {
          code: "441918",
          name: "黄江镇"
        },
        {
          code: "441919",
          name: "清溪镇"
        },
        {
          code: "441920",
          name: "塘厦镇"
        },
        {
          code: "441921",
          name: "凤岗镇"
        },
        {
          code: "441922",
          name: "大岭山镇"
        },
        {
          code: "441923",
          name: "长安镇"
        },
        {
          code: "441924",
          name: "虎门镇"
        },
        {
          code: "441925",
          name: "厚街镇"
        },
        {
          code: "441926",
          name: "沙田镇"
        },
        {
          code: "441927",
          name: "道滘镇"
        },
        {
          code: "441928",
          name: "洪梅镇"
        },
        {
          code: "441929",
          name: "麻涌镇"
        },
        {
          code: "441930",
          name: "望牛墩镇"
        },
        {
          code: "441931",
          name: "中堂镇"
        },
        {
          code: "441932",
          name: "高埗镇"
        },
        {
          code: "441933",
          name: "松山湖管委会"
        },
        {
          code: "441934",
          name: "虎门港管委会"
        },
        {
          code: "441935",
          name: "东莞生态园"
        }
      ],
      [
        {
          code: "442001",
          name: "石岐区街道"
        },
        {
          code: "442002",
          name: "东区街道"
        },
        {
          code: "442003",
          name: "火炬开发区"
        },
        {
          code: "442004",
          name: "西区街道"
        },
        {
          code: "442005",
          name: "南区街道"
        },
        {
          code: "442006",
          name: "五桂山街道"
        },
        {
          code: "442007",
          name: "小榄镇"
        },
        {
          code: "442008",
          name: "黄圃镇"
        },
        {
          code: "442009",
          name: "民众镇"
        },
        {
          code: "442010",
          name: "东凤镇"
        },
        {
          code: "442011",
          name: "东升镇"
        },
        {
          code: "442012",
          name: "古镇镇"
        },
        {
          code: "442013",
          name: "沙溪镇"
        },
        {
          code: "442014",
          name: "坦洲镇"
        },
        {
          code: "442015",
          name: "港口镇"
        },
        {
          code: "442016",
          name: "三角镇"
        },
        {
          code: "442017",
          name: "横栏镇"
        },
        {
          code: "442018",
          name: "南头镇"
        },
        {
          code: "442019",
          name: "阜沙镇"
        },
        {
          code: "442020",
          name: "南朗镇"
        },
        {
          code: "442021",
          name: "三乡镇"
        },
        {
          code: "442022",
          name: "板芙镇"
        },
        {
          code: "442023",
          name: "大涌镇"
        },
        {
          code: "442024",
          name: "神湾镇"
        }
      ],
      [
        {
          code: "445102",
          name: "湘桥区"
        },
        {
          code: "445103",
          name: "潮安区"
        },
        {
          code: "445122",
          name: "饶平县"
        }
      ],
      [
        {
          code: "445202",
          name: "榕城区"
        },
        {
          code: "445203",
          name: "揭东区"
        },
        {
          code: "445222",
          name: "揭西县"
        },
        {
          code: "445224",
          name: "惠来县"
        },
        {
          code: "445281",
          name: "普宁市"
        }
      ],
      [
        {
          code: "445302",
          name: "云城区"
        },
        {
          code: "445303",
          name: "云安区"
        },
        {
          code: "445321",
          name: "新兴县"
        },
        {
          code: "445322",
          name: "郁南县"
        },
        {
          code: "445381",
          name: "罗定市"
        }
      ]
    ],
    [
      [
        {
          code: "450102",
          name: "兴宁区"
        },
        {
          code: "450103",
          name: "青秀区"
        },
        {
          code: "450105",
          name: "江南区"
        },
        {
          code: "450107",
          name: "西乡塘区"
        },
        {
          code: "450108",
          name: "良庆区"
        },
        {
          code: "450109",
          name: "邕宁区"
        },
        {
          code: "450110",
          name: "武鸣区"
        },
        {
          code: "450123",
          name: "隆安县"
        },
        {
          code: "450124",
          name: "马山县"
        },
        {
          code: "450125",
          name: "上林县"
        },
        {
          code: "450126",
          name: "宾阳县"
        },
        {
          code: "450181",
          name: "横州市"
        }
      ],
      [
        {
          code: "450202",
          name: "城中区"
        },
        {
          code: "450203",
          name: "鱼峰区"
        },
        {
          code: "450204",
          name: "柳南区"
        },
        {
          code: "450205",
          name: "柳北区"
        },
        {
          code: "450206",
          name: "柳江区"
        },
        {
          code: "450222",
          name: "柳城县"
        },
        {
          code: "450223",
          name: "鹿寨县"
        },
        {
          code: "450224",
          name: "融安县"
        },
        {
          code: "450225",
          name: "融水苗族自治县"
        },
        {
          code: "450226",
          name: "三江侗族自治县"
        }
      ],
      [
        {
          code: "450302",
          name: "秀峰区"
        },
        {
          code: "450303",
          name: "叠彩区"
        },
        {
          code: "450304",
          name: "象山区"
        },
        {
          code: "450305",
          name: "七星区"
        },
        {
          code: "450311",
          name: "雁山区"
        },
        {
          code: "450312",
          name: "临桂区"
        },
        {
          code: "450321",
          name: "阳朔县"
        },
        {
          code: "450323",
          name: "灵川县"
        },
        {
          code: "450324",
          name: "全州县"
        },
        {
          code: "450325",
          name: "兴安县"
        },
        {
          code: "450326",
          name: "永福县"
        },
        {
          code: "450327",
          name: "灌阳县"
        },
        {
          code: "450328",
          name: "龙胜各族自治县"
        },
        {
          code: "450329",
          name: "资源县"
        },
        {
          code: "450330",
          name: "平乐县"
        },
        {
          code: "450331",
          name: "荔浦县"
        },
        {
          code: "450332",
          name: "恭城瑶族自治县"
        }
      ],
      [
        {
          code: "450403",
          name: "万秀区"
        },
        {
          code: "450405",
          name: "长洲区"
        },
        {
          code: "450406",
          name: "龙圩区"
        },
        {
          code: "450421",
          name: "苍梧县"
        },
        {
          code: "450422",
          name: "藤县"
        },
        {
          code: "450423",
          name: "蒙山县"
        },
        {
          code: "450481",
          name: "岑溪市"
        }
      ],
      [
        {
          code: "450502",
          name: "海城区"
        },
        {
          code: "450503",
          name: "银海区"
        },
        {
          code: "450512",
          name: "铁山港区"
        },
        {
          code: "450521",
          name: "合浦县"
        }
      ],
      [
        {
          code: "450602",
          name: "港口区"
        },
        {
          code: "450603",
          name: "防城区"
        },
        {
          code: "450621",
          name: "上思县"
        },
        {
          code: "450681",
          name: "东兴市"
        }
      ],
      [
        {
          code: "450702",
          name: "钦南区"
        },
        {
          code: "450703",
          name: "钦北区"
        },
        {
          code: "450721",
          name: "灵山县"
        },
        {
          code: "450722",
          name: "浦北县"
        }
      ],
      [
        {
          code: "450802",
          name: "港北区"
        },
        {
          code: "450803",
          name: "港南区"
        },
        {
          code: "450804",
          name: "覃塘区"
        },
        {
          code: "450821",
          name: "平南县"
        },
        {
          code: "450881",
          name: "桂平市"
        }
      ],
      [
        {
          code: "450902",
          name: "玉州区"
        },
        {
          code: "450903",
          name: "福绵区"
        },
        {
          code: "450921",
          name: "容县"
        },
        {
          code: "450922",
          name: "陆川县"
        },
        {
          code: "450923",
          name: "博白县"
        },
        {
          code: "450924",
          name: "兴业县"
        },
        {
          code: "450981",
          name: "北流市"
        }
      ],
      [
        {
          code: "451002",
          name: "右江区"
        },
        {
          code: "451021",
          name: "田阳县"
        },
        {
          code: "451022",
          name: "田东县"
        },
        {
          code: "451023",
          name: "平果县"
        },
        {
          code: "451024",
          name: "德保县"
        },
        {
          code: "451026",
          name: "那坡县"
        },
        {
          code: "451027",
          name: "凌云县"
        },
        {
          code: "451028",
          name: "乐业县"
        },
        {
          code: "451029",
          name: "田林县"
        },
        {
          code: "451030",
          name: "西林县"
        },
        {
          code: "451031",
          name: "隆林各族自治县"
        },
        {
          code: "451081",
          name: "靖西市"
        }
      ],
      [
        {
          code: "451102",
          name: "八步区"
        },
        {
          code: "451103",
          name: "平桂区"
        },
        {
          code: "451121",
          name: "昭平县"
        },
        {
          code: "451122",
          name: "钟山县"
        },
        {
          code: "451123",
          name: "富川瑶族自治县"
        }
      ],
      [
        {
          code: "451202",
          name: "金城江区"
        },
        {
          code: "451203",
          name: "宜州区"
        },
        {
          code: "451221",
          name: "南丹县"
        },
        {
          code: "451222",
          name: "天峨县"
        },
        {
          code: "451223",
          name: "凤山县"
        },
        {
          code: "451224",
          name: "东兰县"
        },
        {
          code: "451225",
          name: "罗城仫佬族自治县"
        },
        {
          code: "451226",
          name: "环江毛南族自治县"
        },
        {
          code: "451227",
          name: "巴马瑶族自治县"
        },
        {
          code: "451228",
          name: "都安瑶族自治县"
        },
        {
          code: "451229",
          name: "大化瑶族自治县"
        }
      ],
      [
        {
          code: "451302",
          name: "兴宾区"
        },
        {
          code: "451321",
          name: "忻城县"
        },
        {
          code: "451322",
          name: "象州县"
        },
        {
          code: "451323",
          name: "武宣县"
        },
        {
          code: "451324",
          name: "金秀瑶族自治县"
        },
        {
          code: "451381",
          name: "合山市"
        }
      ],
      [
        {
          code: "451402",
          name: "江州区"
        },
        {
          code: "451421",
          name: "扶绥县"
        },
        {
          code: "451422",
          name: "宁明县"
        },
        {
          code: "451423",
          name: "龙州县"
        },
        {
          code: "451424",
          name: "大新县"
        },
        {
          code: "451425",
          name: "天等县"
        },
        {
          code: "451481",
          name: "凭祥市"
        }
      ]
    ],
    [
      [
        {
          code: "460105",
          name: "秀英区"
        },
        {
          code: "460106",
          name: "龙华区"
        },
        {
          code: "460107",
          name: "琼山区"
        },
        {
          code: "460108",
          name: "美兰区"
        }
      ],
      [
        {
          code: "460202",
          name: "海棠区"
        },
        {
          code: "460203",
          name: "吉阳区"
        },
        {
          code: "460204",
          name: "天涯区"
        },
        {
          code: "460205",
          name: "崖州区"
        }
      ],
      [
        {
          code: "460321",
          name: "西沙群岛"
        },
        {
          code: "460322",
          name: "南沙群岛"
        },
        {
          code: "460323",
          name: "中沙群岛的岛礁及其海域"
        }
      ],
      [
        {
          code: "460401",
          name: "那大镇"
        },
        {
          code: "460402",
          name: "和庆镇"
        },
        {
          code: "460403",
          name: "南丰镇"
        },
        {
          code: "460404",
          name: "大成镇"
        },
        {
          code: "460405",
          name: "雅星镇"
        },
        {
          code: "460406",
          name: "兰洋镇"
        },
        {
          code: "460407",
          name: "光村镇"
        },
        {
          code: "460408",
          name: "木棠镇"
        },
        {
          code: "460409",
          name: "海头镇"
        },
        {
          code: "460410",
          name: "峨蔓镇"
        },
        {
          code: "460411",
          name: "三都镇"
        },
        {
          code: "460412",
          name: "王五镇"
        },
        {
          code: "460413",
          name: "白马井镇"
        },
        {
          code: "460414",
          name: "中和镇"
        },
        {
          code: "460415",
          name: "排浦镇"
        },
        {
          code: "460416",
          name: "东成镇"
        },
        {
          code: "460417",
          name: "新州镇"
        },
        {
          code: "460418",
          name: "国营西培农场"
        },
        {
          code: "460419",
          name: "国营西联农场"
        },
        {
          code: "460420",
          name: "国营蓝洋农场"
        },
        {
          code: "460421",
          name: "国营八一农场"
        },
        {
          code: "460422",
          name: "洋浦经济开发区"
        },
        {
          code: "460423",
          name: "华南热作学院"
        },
        {
          code: "460424",
          name: "红岭农场"
        }
      ],
      [
        {
          code: "469001",
          name: "五指山市"
        },
        {
          code: "469002",
          name: "琼海市"
        },
        {
          code: "469005",
          name: "文昌市"
        },
        {
          code: "469006",
          name: "万宁市"
        },
        {
          code: "469007",
          name: "东方市"
        },
        {
          code: "469021",
          name: "定安县"
        },
        {
          code: "469022",
          name: "屯昌县"
        },
        {
          code: "469023",
          name: "澄迈县"
        },
        {
          code: "469024",
          name: "临高县"
        },
        {
          code: "469025",
          name: "白沙黎族自治县"
        },
        {
          code: "469026",
          name: "昌江黎族自治县"
        },
        {
          code: "469027",
          name: "乐东黎族自治县"
        },
        {
          code: "469028",
          name: "陵水黎族自治县"
        },
        {
          code: "469029",
          name: "保亭黎族苗族自治县"
        },
        {
          code: "469030",
          name: "琼中黎族苗族自治县"
        }
      ]
    ],
    [
      [
        {
          code: "500101",
          name: "万州区"
        },
        {
          code: "500102",
          name: "涪陵区"
        },
        {
          code: "500103",
          name: "渝中区"
        },
        {
          code: "500104",
          name: "大渡口区"
        },
        {
          code: "500105",
          name: "江北区"
        },
        {
          code: "500106",
          name: "沙坪坝区"
        },
        {
          code: "500107",
          name: "九龙坡区"
        },
        {
          code: "500108",
          name: "南岸区"
        },
        {
          code: "500109",
          name: "北碚区"
        },
        {
          code: "500110",
          name: "綦江区"
        },
        {
          code: "500111",
          name: "大足区"
        },
        {
          code: "500112",
          name: "渝北区"
        },
        {
          code: "500113",
          name: "巴南区"
        },
        {
          code: "500114",
          name: "黔江区"
        },
        {
          code: "500115",
          name: "长寿区"
        },
        {
          code: "500116",
          name: "江津区"
        },
        {
          code: "500117",
          name: "合川区"
        },
        {
          code: "500118",
          name: "永川区"
        },
        {
          code: "500119",
          name: "南川区"
        },
        {
          code: "500120",
          name: "璧山区"
        },
        {
          code: "500151",
          name: "铜梁区"
        },
        {
          code: "500152",
          name: "潼南区"
        },
        {
          code: "500153",
          name: "荣昌区"
        },
        {
          code: "500154",
          name: "开州区"
        },
        {
          code: "500155",
          name: "梁平区"
        },
        {
          code: "500156",
          name: "武隆区"
        }
      ],
      [
        {
          code: "500229",
          name: "城口县"
        },
        {
          code: "500230",
          name: "丰都县"
        },
        {
          code: "500231",
          name: "垫江县"
        },
        {
          code: "500233",
          name: "忠县"
        },
        {
          code: "500235",
          name: "云阳县"
        },
        {
          code: "500236",
          name: "奉节县"
        },
        {
          code: "500237",
          name: "巫山县"
        },
        {
          code: "500238",
          name: "巫溪县"
        },
        {
          code: "500240",
          name: "石柱土家族自治县"
        },
        {
          code: "500241",
          name: "秀山土家族苗族自治县"
        },
        {
          code: "500242",
          name: "酉阳土家族苗族自治县"
        },
        {
          code: "500243",
          name: "彭水苗族土家族自治县"
        }
      ]
    ],
    [
      [
        {
          code: "510104",
          name: "锦江区"
        },
        {
          code: "510105",
          name: "青羊区"
        },
        {
          code: "510106",
          name: "金牛区"
        },
        {
          code: "510107",
          name: "武侯区"
        },
        {
          code: "510108",
          name: "成华区"
        },
        {
          code: "510112",
          name: "龙泉驿区"
        },
        {
          code: "510113",
          name: "青白江区"
        },
        {
          code: "510114",
          name: "新都区"
        },
        {
          code: "510115",
          name: "温江区"
        },
        {
          code: "510116",
          name: "双流区"
        },
        {
          code: "510117",
          name: "郫都区"
        },
        {
          code: "510121",
          name: "金堂县"
        },
        {
          code: "510129",
          name: "大邑县"
        },
        {
          code: "510131",
          name: "蒲江县"
        },
        {
          code: "510132",
          name: "新津县"
        },
        {
          code: "510181",
          name: "都江堰市"
        },
        {
          code: "510182",
          name: "彭州市"
        },
        {
          code: "510183",
          name: "邛崃市"
        },
        {
          code: "510184",
          name: "崇州市"
        },
        {
          code: "510185",
          name: "简阳市"
        }
      ],
      [
        {
          code: "510302",
          name: "自流井区"
        },
        {
          code: "510303",
          name: "贡井区"
        },
        {
          code: "510304",
          name: "大安区"
        },
        {
          code: "510311",
          name: "沿滩区"
        },
        {
          code: "510321",
          name: "荣县"
        },
        {
          code: "510322",
          name: "富顺县"
        }
      ],
      [
        {
          code: "510402",
          name: "东区"
        },
        {
          code: "510403",
          name: "西区"
        },
        {
          code: "510411",
          name: "仁和区"
        },
        {
          code: "510421",
          name: "米易县"
        },
        {
          code: "510422",
          name: "盐边县"
        }
      ],
      [
        {
          code: "510502",
          name: "江阳区"
        },
        {
          code: "510503",
          name: "纳溪区"
        },
        {
          code: "510504",
          name: "龙马潭区"
        },
        {
          code: "510521",
          name: "泸县"
        },
        {
          code: "510522",
          name: "合江县"
        },
        {
          code: "510524",
          name: "叙永县"
        },
        {
          code: "510525",
          name: "古蔺县"
        }
      ],
      [
        {
          code: "510603",
          name: "旌阳区"
        },
        {
          code: "510604",
          name: "罗江区"
        },
        {
          code: "510623",
          name: "中江县"
        },
        {
          code: "510681",
          name: "广汉市"
        },
        {
          code: "510682",
          name: "什邡市"
        },
        {
          code: "510683",
          name: "绵竹市"
        }
      ],
      [
        {
          code: "510703",
          name: "涪城区"
        },
        {
          code: "510704",
          name: "游仙区"
        },
        {
          code: "510705",
          name: "安州区"
        },
        {
          code: "510722",
          name: "三台县"
        },
        {
          code: "510723",
          name: "盐亭县"
        },
        {
          code: "510725",
          name: "梓潼县"
        },
        {
          code: "510726",
          name: "北川羌族自治县"
        },
        {
          code: "510727",
          name: "平武县"
        },
        {
          code: "510781",
          name: "江油市"
        }
      ],
      [
        {
          code: "510802",
          name: "利州区"
        },
        {
          code: "510811",
          name: "昭化区"
        },
        {
          code: "510812",
          name: "朝天区"
        },
        {
          code: "510821",
          name: "旺苍县"
        },
        {
          code: "510822",
          name: "青川县"
        },
        {
          code: "510823",
          name: "剑阁县"
        },
        {
          code: "510824",
          name: "苍溪县"
        }
      ],
      [
        {
          code: "510903",
          name: "船山区"
        },
        {
          code: "510904",
          name: "安居区"
        },
        {
          code: "510921",
          name: "蓬溪县"
        },
        {
          code: "510922",
          name: "射洪县"
        },
        {
          code: "510923",
          name: "大英县"
        }
      ],
      [
        {
          code: "511002",
          name: "市中区"
        },
        {
          code: "511011",
          name: "东兴区"
        },
        {
          code: "511024",
          name: "威远县"
        },
        {
          code: "511025",
          name: "资中县"
        },
        {
          code: "511083",
          name: "隆昌市"
        }
      ],
      [
        {
          code: "511102",
          name: "市中区"
        },
        {
          code: "511111",
          name: "沙湾区"
        },
        {
          code: "511112",
          name: "五通桥区"
        },
        {
          code: "511113",
          name: "金口河区"
        },
        {
          code: "511123",
          name: "犍为县"
        },
        {
          code: "511124",
          name: "井研县"
        },
        {
          code: "511126",
          name: "夹江县"
        },
        {
          code: "511129",
          name: "沐川县"
        },
        {
          code: "511132",
          name: "峨边彝族自治县"
        },
        {
          code: "511133",
          name: "马边彝族自治县"
        },
        {
          code: "511181",
          name: "峨眉山市"
        }
      ],
      [
        {
          code: "511302",
          name: "顺庆区"
        },
        {
          code: "511303",
          name: "高坪区"
        },
        {
          code: "511304",
          name: "嘉陵区"
        },
        {
          code: "511321",
          name: "南部县"
        },
        {
          code: "511322",
          name: "营山县"
        },
        {
          code: "511323",
          name: "蓬安县"
        },
        {
          code: "511324",
          name: "仪陇县"
        },
        {
          code: "511325",
          name: "西充县"
        },
        {
          code: "511381",
          name: "阆中市"
        }
      ],
      [
        {
          code: "511402",
          name: "东坡区"
        },
        {
          code: "511403",
          name: "彭山区"
        },
        {
          code: "511421",
          name: "仁寿县"
        },
        {
          code: "511423",
          name: "洪雅县"
        },
        {
          code: "511424",
          name: "丹棱县"
        },
        {
          code: "511425",
          name: "青神县"
        }
      ],
      [
        {
          code: "511502",
          name: "翠屏区"
        },
        {
          code: "511503",
          name: "南溪区"
        },
        {
          code: "511521",
          name: "宜宾县"
        },
        {
          code: "511523",
          name: "江安县"
        },
        {
          code: "511524",
          name: "长宁县"
        },
        {
          code: "511525",
          name: "高县"
        },
        {
          code: "511526",
          name: "珙县"
        },
        {
          code: "511527",
          name: "筠连县"
        },
        {
          code: "511528",
          name: "兴文县"
        },
        {
          code: "511529",
          name: "屏山县"
        }
      ],
      [
        {
          code: "511602",
          name: "广安区"
        },
        {
          code: "511603",
          name: "前锋区"
        },
        {
          code: "511621",
          name: "岳池县"
        },
        {
          code: "511622",
          name: "武胜县"
        },
        {
          code: "511623",
          name: "邻水县"
        },
        {
          code: "511681",
          name: "华蓥市"
        }
      ],
      [
        {
          code: "511702",
          name: "通川区"
        },
        {
          code: "511703",
          name: "达川区"
        },
        {
          code: "511722",
          name: "宣汉县"
        },
        {
          code: "511723",
          name: "开江县"
        },
        {
          code: "511724",
          name: "大竹县"
        },
        {
          code: "511725",
          name: "渠县"
        },
        {
          code: "511781",
          name: "万源市"
        }
      ],
      [
        {
          code: "511802",
          name: "雨城区"
        },
        {
          code: "511803",
          name: "名山区"
        },
        {
          code: "511822",
          name: "荥经县"
        },
        {
          code: "511823",
          name: "汉源县"
        },
        {
          code: "511824",
          name: "石棉县"
        },
        {
          code: "511825",
          name: "天全县"
        },
        {
          code: "511826",
          name: "芦山县"
        },
        {
          code: "511827",
          name: "宝兴县"
        }
      ],
      [
        {
          code: "511902",
          name: "巴州区"
        },
        {
          code: "511903",
          name: "恩阳区"
        },
        {
          code: "511921",
          name: "通江县"
        },
        {
          code: "511922",
          name: "南江县"
        },
        {
          code: "511923",
          name: "平昌县"
        }
      ],
      [
        {
          code: "512002",
          name: "雁江区"
        },
        {
          code: "512021",
          name: "安岳县"
        },
        {
          code: "512022",
          name: "乐至县"
        }
      ],
      [
        {
          code: "513201",
          name: "马尔康市"
        },
        {
          code: "513221",
          name: "汶川县"
        },
        {
          code: "513222",
          name: "理县"
        },
        {
          code: "513223",
          name: "茂县"
        },
        {
          code: "513224",
          name: "松潘县"
        },
        {
          code: "513225",
          name: "九寨沟县"
        },
        {
          code: "513226",
          name: "金川县"
        },
        {
          code: "513227",
          name: "小金县"
        },
        {
          code: "513228",
          name: "黑水县"
        },
        {
          code: "513230",
          name: "壤塘县"
        },
        {
          code: "513231",
          name: "阿坝县"
        },
        {
          code: "513232",
          name: "若尔盖县"
        },
        {
          code: "513233",
          name: "红原县"
        }
      ],
      [
        {
          code: "513301",
          name: "康定市"
        },
        {
          code: "513322",
          name: "泸定县"
        },
        {
          code: "513323",
          name: "丹巴县"
        },
        {
          code: "513324",
          name: "九龙县"
        },
        {
          code: "513325",
          name: "雅江县"
        },
        {
          code: "513326",
          name: "道孚县"
        },
        {
          code: "513327",
          name: "炉霍县"
        },
        {
          code: "513328",
          name: "甘孜县"
        },
        {
          code: "513329",
          name: "新龙县"
        },
        {
          code: "513330",
          name: "德格县"
        },
        {
          code: "513331",
          name: "白玉县"
        },
        {
          code: "513332",
          name: "石渠县"
        },
        {
          code: "513333",
          name: "色达县"
        },
        {
          code: "513334",
          name: "理塘县"
        },
        {
          code: "513335",
          name: "巴塘县"
        },
        {
          code: "513336",
          name: "乡城县"
        },
        {
          code: "513337",
          name: "稻城县"
        },
        {
          code: "513338",
          name: "得荣县"
        }
      ],
      [
        {
          code: "513401",
          name: "西昌市"
        },
        {
          code: "513402",
          name: "会理市"
        },
        {
          code: "513422",
          name: "木里藏族自治县"
        },
        {
          code: "513423",
          name: "盐源县"
        },
        {
          code: "513424",
          name: "德昌县"
        },
        {
          code: "513426",
          name: "会东县"
        },
        {
          code: "513427",
          name: "宁南县"
        },
        {
          code: "513428",
          name: "普格县"
        },
        {
          code: "513429",
          name: "布拖县"
        },
        {
          code: "513430",
          name: "金阳县"
        },
        {
          code: "513431",
          name: "昭觉县"
        },
        {
          code: "513432",
          name: "喜德县"
        },
        {
          code: "513433",
          name: "冕宁县"
        },
        {
          code: "513434",
          name: "越西县"
        },
        {
          code: "513435",
          name: "甘洛县"
        },
        {
          code: "513436",
          name: "美姑县"
        },
        {
          code: "513437",
          name: "雷波县"
        }
      ]
    ],
    [
      [
        {
          code: "520102",
          name: "南明区"
        },
        {
          code: "520103",
          name: "云岩区"
        },
        {
          code: "520111",
          name: "花溪区"
        },
        {
          code: "520112",
          name: "乌当区"
        },
        {
          code: "520113",
          name: "白云区"
        },
        {
          code: "520115",
          name: "观山湖区"
        },
        {
          code: "520121",
          name: "开阳县"
        },
        {
          code: "520122",
          name: "息烽县"
        },
        {
          code: "520123",
          name: "修文县"
        },
        {
          code: "520181",
          name: "清镇市"
        }
      ],
      [
        {
          code: "520201",
          name: "钟山区"
        },
        {
          code: "520203",
          name: "六枝特区"
        },
        {
          code: "520221",
          name: "水城县"
        },
        {
          code: "520281",
          name: "盘州市"
        }
      ],
      [
        {
          code: "520302",
          name: "红花岗区"
        },
        {
          code: "520303",
          name: "汇川区"
        },
        {
          code: "520304",
          name: "播州区"
        },
        {
          code: "520322",
          name: "桐梓县"
        },
        {
          code: "520323",
          name: "绥阳县"
        },
        {
          code: "520324",
          name: "正安县"
        },
        {
          code: "520325",
          name: "道真仡佬族苗族自治县"
        },
        {
          code: "520326",
          name: "务川仡佬族苗族自治县"
        },
        {
          code: "520327",
          name: "凤冈县"
        },
        {
          code: "520328",
          name: "湄潭县"
        },
        {
          code: "520329",
          name: "余庆县"
        },
        {
          code: "520330",
          name: "习水县"
        },
        {
          code: "520381",
          name: "赤水市"
        },
        {
          code: "520382",
          name: "仁怀市"
        }
      ],
      [
        {
          code: "520402",
          name: "西秀区"
        },
        {
          code: "520403",
          name: "平坝区"
        },
        {
          code: "520422",
          name: "普定县"
        },
        {
          code: "520423",
          name: "镇宁布依族苗族自治县"
        },
        {
          code: "520424",
          name: "关岭布依族苗族自治县"
        },
        {
          code: "520425",
          name: "紫云苗族布依族自治县"
        }
      ],
      [
        {
          code: "520502",
          name: "七星关区"
        },
        {
          code: "520521",
          name: "大方县"
        },
        {
          code: "520523",
          name: "金沙县"
        },
        {
          code: "520524",
          name: "织金县"
        },
        {
          code: "520525",
          name: "纳雍县"
        },
        {
          code: "520526",
          name: "威宁彝族回族苗族自治县"
        },
        {
          code: "520527",
          name: "赫章县"
        },
        {
          code: "520581",
          name: "黔西市"
        }
      ],
      [
        {
          code: "520602",
          name: "碧江区"
        },
        {
          code: "520603",
          name: "万山区"
        },
        {
          code: "520621",
          name: "江口县"
        },
        {
          code: "520622",
          name: "玉屏侗族自治县"
        },
        {
          code: "520623",
          name: "石阡县"
        },
        {
          code: "520624",
          name: "思南县"
        },
        {
          code: "520625",
          name: "印江土家族苗族自治县"
        },
        {
          code: "520626",
          name: "德江县"
        },
        {
          code: "520627",
          name: "沿河土家族自治县"
        },
        {
          code: "520628",
          name: "松桃苗族自治县"
        }
      ],
      [
        {
          code: "522301",
          name: "兴义市"
        },
        {
          code: "522322",
          name: "兴仁县"
        },
        {
          code: "522323",
          name: "普安县"
        },
        {
          code: "522324",
          name: "晴隆县"
        },
        {
          code: "522325",
          name: "贞丰县"
        },
        {
          code: "522326",
          name: "望谟县"
        },
        {
          code: "522327",
          name: "册亨县"
        },
        {
          code: "522328",
          name: "安龙县"
        }
      ],
      [
        {
          code: "522601",
          name: "凯里市"
        },
        {
          code: "522622",
          name: "黄平县"
        },
        {
          code: "522623",
          name: "施秉县"
        },
        {
          code: "522624",
          name: "三穗县"
        },
        {
          code: "522625",
          name: "镇远县"
        },
        {
          code: "522626",
          name: "岑巩县"
        },
        {
          code: "522627",
          name: "天柱县"
        },
        {
          code: "522628",
          name: "锦屏县"
        },
        {
          code: "522629",
          name: "剑河县"
        },
        {
          code: "522630",
          name: "台江县"
        },
        {
          code: "522631",
          name: "黎平县"
        },
        {
          code: "522632",
          name: "榕江县"
        },
        {
          code: "522633",
          name: "从江县"
        },
        {
          code: "522634",
          name: "雷山县"
        },
        {
          code: "522635",
          name: "麻江县"
        },
        {
          code: "522636",
          name: "丹寨县"
        }
      ],
      [
        {
          code: "522701",
          name: "都匀市"
        },
        {
          code: "522702",
          name: "福泉市"
        },
        {
          code: "522722",
          name: "荔波县"
        },
        {
          code: "522723",
          name: "贵定县"
        },
        {
          code: "522725",
          name: "瓮安县"
        },
        {
          code: "522726",
          name: "独山县"
        },
        {
          code: "522727",
          name: "平塘县"
        },
        {
          code: "522728",
          name: "罗甸县"
        },
        {
          code: "522729",
          name: "长顺县"
        },
        {
          code: "522730",
          name: "龙里县"
        },
        {
          code: "522731",
          name: "惠水县"
        },
        {
          code: "522732",
          name: "三都水族自治县"
        }
      ]
    ],
    [
      [
        {
          code: "530102",
          name: "五华区"
        },
        {
          code: "530103",
          name: "盘龙区"
        },
        {
          code: "530111",
          name: "官渡区"
        },
        {
          code: "530112",
          name: "西山区"
        },
        {
          code: "530113",
          name: "东川区"
        },
        {
          code: "530114",
          name: "呈贡区"
        },
        {
          code: "530115",
          name: "晋宁区"
        },
        {
          code: "530124",
          name: "富民县"
        },
        {
          code: "530125",
          name: "宜良县"
        },
        {
          code: "530126",
          name: "石林彝族自治县"
        },
        {
          code: "530127",
          name: "嵩明县"
        },
        {
          code: "530128",
          name: "禄劝彝族苗族自治县"
        },
        {
          code: "530129",
          name: "寻甸回族彝族自治县"
        },
        {
          code: "530181",
          name: "安宁市"
        }
      ],
      [
        {
          code: "530302",
          name: "麒麟区"
        },
        {
          code: "530303",
          name: "沾益区"
        },
        {
          code: "530321",
          name: "马龙县"
        },
        {
          code: "530322",
          name: "陆良县"
        },
        {
          code: "530323",
          name: "师宗县"
        },
        {
          code: "530324",
          name: "罗平县"
        },
        {
          code: "530325",
          name: "富源县"
        },
        {
          code: "530326",
          name: "会泽县"
        },
        {
          code: "530381",
          name: "宣威市"
        }
      ],
      [
        {
          code: "530402",
          name: "红塔区"
        },
        {
          code: "530403",
          name: "江川区"
        },
        {
          code: "530422",
          name: "澄江县"
        },
        {
          code: "530423",
          name: "通海县"
        },
        {
          code: "530424",
          name: "华宁县"
        },
        {
          code: "530425",
          name: "易门县"
        },
        {
          code: "530426",
          name: "峨山彝族自治县"
        },
        {
          code: "530427",
          name: "新平彝族傣族自治县"
        },
        {
          code: "530428",
          name: "元江哈尼族彝族傣族自治县"
        }
      ],
      [
        {
          code: "530502",
          name: "隆阳区"
        },
        {
          code: "530521",
          name: "施甸县"
        },
        {
          code: "530523",
          name: "龙陵县"
        },
        {
          code: "530524",
          name: "昌宁县"
        },
        {
          code: "530581",
          name: "腾冲市"
        }
      ],
      [
        {
          code: "530602",
          name: "昭阳区"
        },
        {
          code: "530621",
          name: "鲁甸县"
        },
        {
          code: "530622",
          name: "巧家县"
        },
        {
          code: "530623",
          name: "盐津县"
        },
        {
          code: "530624",
          name: "大关县"
        },
        {
          code: "530625",
          name: "永善县"
        },
        {
          code: "530626",
          name: "绥江县"
        },
        {
          code: "530627",
          name: "镇雄县"
        },
        {
          code: "530628",
          name: "彝良县"
        },
        {
          code: "530629",
          name: "威信县"
        },
        {
          code: "530630",
          name: "水富县"
        }
      ],
      [
        {
          code: "530702",
          name: "古城区"
        },
        {
          code: "530721",
          name: "玉龙纳西族自治县"
        },
        {
          code: "530722",
          name: "永胜县"
        },
        {
          code: "530723",
          name: "华坪县"
        },
        {
          code: "530724",
          name: "宁蒗彝族自治县"
        }
      ],
      [
        {
          code: "530802",
          name: "思茅区"
        },
        {
          code: "530821",
          name: "宁洱哈尼族彝族自治县"
        },
        {
          code: "530822",
          name: "墨江哈尼族自治县"
        },
        {
          code: "530823",
          name: "景东彝族自治县"
        },
        {
          code: "530824",
          name: "景谷傣族彝族自治县"
        },
        {
          code: "530825",
          name: "镇沅彝族哈尼族拉祜族自治县"
        },
        {
          code: "530826",
          name: "江城哈尼族彝族自治县"
        },
        {
          code: "530827",
          name: "孟连傣族拉祜族佤族自治县"
        },
        {
          code: "530828",
          name: "澜沧拉祜族自治县"
        },
        {
          code: "530829",
          name: "西盟佤族自治县"
        }
      ],
      [
        {
          code: "530902",
          name: "临翔区"
        },
        {
          code: "530921",
          name: "凤庆县"
        },
        {
          code: "530922",
          name: "云县"
        },
        {
          code: "530923",
          name: "永德县"
        },
        {
          code: "530924",
          name: "镇康县"
        },
        {
          code: "530925",
          name: "双江拉祜族佤族布朗族傣族自治县"
        },
        {
          code: "530926",
          name: "耿马傣族佤族自治县"
        },
        {
          code: "530927",
          name: "沧源佤族自治县"
        }
      ],
      [
        {
          code: "532301",
          name: "楚雄市"
        },
        {
          code: "532302",
          name: "禄丰市"
        },
        {
          code: "532322",
          name: "双柏县"
        },
        {
          code: "532323",
          name: "牟定县"
        },
        {
          code: "532324",
          name: "南华县"
        },
        {
          code: "532325",
          name: "姚安县"
        },
        {
          code: "532326",
          name: "大姚县"
        },
        {
          code: "532327",
          name: "永仁县"
        },
        {
          code: "532328",
          name: "元谋县"
        },
        {
          code: "532329",
          name: "武定县"
        }
      ],
      [
        {
          code: "532501",
          name: "个旧市"
        },
        {
          code: "532502",
          name: "开远市"
        },
        {
          code: "532503",
          name: "蒙自市"
        },
        {
          code: "532504",
          name: "弥勒市"
        },
        {
          code: "532523",
          name: "屏边苗族自治县"
        },
        {
          code: "532524",
          name: "建水县"
        },
        {
          code: "532525",
          name: "石屏县"
        },
        {
          code: "532527",
          name: "泸西县"
        },
        {
          code: "532528",
          name: "元阳县"
        },
        {
          code: "532529",
          name: "红河县"
        },
        {
          code: "532530",
          name: "金平苗族瑶族傣族自治县"
        },
        {
          code: "532531",
          name: "绿春县"
        },
        {
          code: "532532",
          name: "河口瑶族自治县"
        }
      ],
      [
        {
          code: "532601",
          name: "文山市"
        },
        {
          code: "532622",
          name: "砚山县"
        },
        {
          code: "532623",
          name: "西畴县"
        },
        {
          code: "532624",
          name: "麻栗坡县"
        },
        {
          code: "532625",
          name: "马关县"
        },
        {
          code: "532626",
          name: "丘北县"
        },
        {
          code: "532627",
          name: "广南县"
        },
        {
          code: "532628",
          name: "富宁县"
        }
      ],
      [
        {
          code: "532801",
          name: "景洪市"
        },
        {
          code: "532822",
          name: "勐海县"
        },
        {
          code: "532823",
          name: "勐腊县"
        }
      ],
      [
        {
          code: "532901",
          name: "大理市"
        },
        {
          code: "532922",
          name: "漾濞彝族自治县"
        },
        {
          code: "532923",
          name: "祥云县"
        },
        {
          code: "532924",
          name: "宾川县"
        },
        {
          code: "532925",
          name: "弥渡县"
        },
        {
          code: "532926",
          name: "南涧彝族自治县"
        },
        {
          code: "532927",
          name: "巍山彝族回族自治县"
        },
        {
          code: "532928",
          name: "永平县"
        },
        {
          code: "532929",
          name: "云龙县"
        },
        {
          code: "532930",
          name: "洱源县"
        },
        {
          code: "532931",
          name: "剑川县"
        },
        {
          code: "532932",
          name: "鹤庆县"
        }
      ],
      [
        {
          code: "533102",
          name: "瑞丽市"
        },
        {
          code: "533103",
          name: "芒市"
        },
        {
          code: "533122",
          name: "梁河县"
        },
        {
          code: "533123",
          name: "盈江县"
        },
        {
          code: "533124",
          name: "陇川县"
        }
      ],
      [
        {
          code: "533301",
          name: "泸水市"
        },
        {
          code: "533323",
          name: "福贡县"
        },
        {
          code: "533324",
          name: "贡山独龙族怒族自治县"
        },
        {
          code: "533325",
          name: "兰坪白族普米族自治县"
        }
      ],
      [
        {
          code: "533401",
          name: "香格里拉市"
        },
        {
          code: "533422",
          name: "德钦县"
        },
        {
          code: "533423",
          name: "维西傈僳族自治县"
        }
      ]
    ],
    [
      [
        {
          code: "540102",
          name: "城关区"
        },
        {
          code: "540103",
          name: "堆龙德庆区"
        },
        {
          code: "540104",
          name: "达孜区"
        },
        {
          code: "540121",
          name: "林周县"
        },
        {
          code: "540122",
          name: "当雄县"
        },
        {
          code: "540123",
          name: "尼木县"
        },
        {
          code: "540124",
          name: "曲水县"
        },
        {
          code: "540127",
          name: "墨竹工卡县"
        }
      ],
      [
        {
          code: "540202",
          name: "桑珠孜区"
        },
        {
          code: "540221",
          name: "南木林县"
        },
        {
          code: "540222",
          name: "江孜县"
        },
        {
          code: "540223",
          name: "定日县"
        },
        {
          code: "540224",
          name: "萨迦县"
        },
        {
          code: "540225",
          name: "拉孜县"
        },
        {
          code: "540226",
          name: "昂仁县"
        },
        {
          code: "540227",
          name: "谢通门县"
        },
        {
          code: "540228",
          name: "白朗县"
        },
        {
          code: "540229",
          name: "仁布县"
        },
        {
          code: "540230",
          name: "康马县"
        },
        {
          code: "540231",
          name: "定结县"
        },
        {
          code: "540232",
          name: "仲巴县"
        },
        {
          code: "540233",
          name: "亚东县"
        },
        {
          code: "540234",
          name: "吉隆县"
        },
        {
          code: "540235",
          name: "聂拉木县"
        },
        {
          code: "540236",
          name: "萨嘎县"
        },
        {
          code: "540237",
          name: "岗巴县"
        }
      ],
      [
        {
          code: "540302",
          name: "卡若区"
        },
        {
          code: "540321",
          name: "江达县"
        },
        {
          code: "540322",
          name: "贡觉县"
        },
        {
          code: "540323",
          name: "类乌齐县"
        },
        {
          code: "540324",
          name: "丁青县"
        },
        {
          code: "540325",
          name: "察雅县"
        },
        {
          code: "540326",
          name: "八宿县"
        },
        {
          code: "540327",
          name: "左贡县"
        },
        {
          code: "540328",
          name: "芒康县"
        },
        {
          code: "540329",
          name: "洛隆县"
        },
        {
          code: "540330",
          name: "边坝县"
        }
      ],
      [
        {
          code: "540402",
          name: "巴宜区"
        },
        {
          code: "540421",
          name: "工布江达县"
        },
        {
          code: "540422",
          name: "米林县"
        },
        {
          code: "540423",
          name: "墨脱县"
        },
        {
          code: "540424",
          name: "波密县"
        },
        {
          code: "540425",
          name: "察隅县"
        },
        {
          code: "540426",
          name: "朗县"
        }
      ],
      [
        {
          code: "540502",
          name: "乃东区"
        },
        {
          code: "540521",
          name: "扎囊县"
        },
        {
          code: "540522",
          name: "贡嘎县"
        },
        {
          code: "540523",
          name: "桑日县"
        },
        {
          code: "540524",
          name: "琼结县"
        },
        {
          code: "540525",
          name: "曲松县"
        },
        {
          code: "540526",
          name: "措美县"
        },
        {
          code: "540527",
          name: "洛扎县"
        },
        {
          code: "540528",
          name: "加查县"
        },
        {
          code: "540529",
          name: "隆子县"
        },
        {
          code: "540530",
          name: "错那县"
        },
        {
          code: "540531",
          name: "浪卡子县"
        }
      ],
      [
        {
          code: "542421",
          name: "那曲县"
        },
        {
          code: "542422",
          name: "嘉黎县"
        },
        {
          code: "542423",
          name: "比如县"
        },
        {
          code: "542424",
          name: "聂荣县"
        },
        {
          code: "542425",
          name: "安多县"
        },
        {
          code: "542426",
          name: "申扎县"
        },
        {
          code: "542427",
          name: "索县"
        },
        {
          code: "542428",
          name: "班戈县"
        },
        {
          code: "542429",
          name: "巴青县"
        },
        {
          code: "542430",
          name: "尼玛县"
        },
        {
          code: "542431",
          name: "双湖县"
        }
      ],
      [
        {
          code: "542521",
          name: "普兰县"
        },
        {
          code: "542522",
          name: "札达县"
        },
        {
          code: "542523",
          name: "噶尔县"
        },
        {
          code: "542524",
          name: "日土县"
        },
        {
          code: "542525",
          name: "革吉县"
        },
        {
          code: "542526",
          name: "改则县"
        },
        {
          code: "542527",
          name: "措勤县"
        }
      ]
    ],
    [
      [
        {
          code: "610102",
          name: "新城区"
        },
        {
          code: "610103",
          name: "碑林区"
        },
        {
          code: "610104",
          name: "莲湖区"
        },
        {
          code: "610111",
          name: "灞桥区"
        },
        {
          code: "610112",
          name: "未央区"
        },
        {
          code: "610113",
          name: "雁塔区"
        },
        {
          code: "610114",
          name: "阎良区"
        },
        {
          code: "610115",
          name: "临潼区"
        },
        {
          code: "610116",
          name: "长安区"
        },
        {
          code: "610117",
          name: "高陵区"
        },
        {
          code: "610118",
          name: "鄠邑区"
        },
        {
          code: "610122",
          name: "蓝田县"
        },
        {
          code: "610124",
          name: "周至县"
        }
      ],
      [
        {
          code: "610202",
          name: "王益区"
        },
        {
          code: "610203",
          name: "印台区"
        },
        {
          code: "610204",
          name: "耀州区"
        },
        {
          code: "610222",
          name: "宜君县"
        }
      ],
      [
        {
          code: "610302",
          name: "渭滨区"
        },
        {
          code: "610303",
          name: "金台区"
        },
        {
          code: "610304",
          name: "陈仓区"
        },
        {
          code: "610305",
          name: "凤翔区"
        },
        {
          code: "610323",
          name: "岐山县"
        },
        {
          code: "610324",
          name: "扶风县"
        },
        {
          code: "610326",
          name: "眉县"
        },
        {
          code: "610327",
          name: "陇县"
        },
        {
          code: "610328",
          name: "千阳县"
        },
        {
          code: "610329",
          name: "麟游县"
        },
        {
          code: "610330",
          name: "凤县"
        },
        {
          code: "610331",
          name: "太白县"
        }
      ],
      [
        {
          code: "610402",
          name: "秦都区"
        },
        {
          code: "610403",
          name: "杨陵区"
        },
        {
          code: "610404",
          name: "渭城区"
        },
        {
          code: "610422",
          name: "三原县"
        },
        {
          code: "610423",
          name: "泾阳县"
        },
        {
          code: "610424",
          name: "乾县"
        },
        {
          code: "610425",
          name: "礼泉县"
        },
        {
          code: "610426",
          name: "永寿县"
        },
        {
          code: "610427",
          name: "彬州市"
        },
        {
          code: "610428",
          name: "长武县"
        },
        {
          code: "610429",
          name: "旬邑县"
        },
        {
          code: "610430",
          name: "淳化县"
        },
        {
          code: "610431",
          name: "武功县"
        },
        {
          code: "610481",
          name: "兴平市"
        }
      ],
      [
        {
          code: "610502",
          name: "临渭区"
        },
        {
          code: "610503",
          name: "华州区"
        },
        {
          code: "610522",
          name: "潼关县"
        },
        {
          code: "610523",
          name: "大荔县"
        },
        {
          code: "610524",
          name: "合阳县"
        },
        {
          code: "610525",
          name: "澄城县"
        },
        {
          code: "610526",
          name: "蒲城县"
        },
        {
          code: "610527",
          name: "白水县"
        },
        {
          code: "610528",
          name: "富平县"
        },
        {
          code: "610581",
          name: "韩城市"
        },
        {
          code: "610582",
          name: "华阴市"
        }
      ],
      [
        {
          code: "610602",
          name: "宝塔区"
        },
        {
          code: "610603",
          name: "安塞区"
        },
        {
          code: "610621",
          name: "延长县"
        },
        {
          code: "610622",
          name: "延川县"
        },
        {
          code: "610623",
          name: "子长县"
        },
        {
          code: "610625",
          name: "志丹县"
        },
        {
          code: "610626",
          name: "吴起县"
        },
        {
          code: "610627",
          name: "甘泉县"
        },
        {
          code: "610628",
          name: "富县"
        },
        {
          code: "610629",
          name: "洛川县"
        },
        {
          code: "610630",
          name: "宜川县"
        },
        {
          code: "610631",
          name: "黄龙县"
        },
        {
          code: "610632",
          name: "黄陵县"
        }
      ],
      [
        {
          code: "610702",
          name: "汉台区"
        },
        {
          code: "610703",
          name: "南郑区"
        },
        {
          code: "610722",
          name: "城固县"
        },
        {
          code: "610723",
          name: "洋县"
        },
        {
          code: "610724",
          name: "西乡县"
        },
        {
          code: "610725",
          name: "勉县"
        },
        {
          code: "610726",
          name: "宁强县"
        },
        {
          code: "610727",
          name: "略阳县"
        },
        {
          code: "610728",
          name: "镇巴县"
        },
        {
          code: "610729",
          name: "留坝县"
        },
        {
          code: "610730",
          name: "佛坪县"
        }
      ],
      [
        {
          code: "610802",
          name: "榆阳区"
        },
        {
          code: "610803",
          name: "横山区"
        },
        {
          code: "610822",
          name: "府谷县"
        },
        {
          code: "610824",
          name: "靖边县"
        },
        {
          code: "610825",
          name: "定边县"
        },
        {
          code: "610826",
          name: "绥德县"
        },
        {
          code: "610827",
          name: "米脂县"
        },
        {
          code: "610828",
          name: "佳县"
        },
        {
          code: "610829",
          name: "吴堡县"
        },
        {
          code: "610830",
          name: "清涧县"
        },
        {
          code: "610831",
          name: "子洲县"
        },
        {
          code: "610881",
          name: "神木市"
        }
      ],
      [
        {
          code: "610902",
          name: "汉滨区"
        },
        {
          code: "610921",
          name: "汉阴县"
        },
        {
          code: "610922",
          name: "石泉县"
        },
        {
          code: "610923",
          name: "宁陕县"
        },
        {
          code: "610924",
          name: "紫阳县"
        },
        {
          code: "610925",
          name: "岚皋县"
        },
        {
          code: "610926",
          name: "平利县"
        },
        {
          code: "610927",
          name: "镇坪县"
        },
        {
          code: "610929",
          name: "白河县"
        },
        {
          code: "610981",
          name: "旬阳市"
        }
      ],
      [
        {
          code: "611002",
          name: "商州区"
        },
        {
          code: "611021",
          name: "洛南县"
        },
        {
          code: "611022",
          name: "丹凤县"
        },
        {
          code: "611023",
          name: "商南县"
        },
        {
          code: "611024",
          name: "山阳县"
        },
        {
          code: "611025",
          name: "镇安县"
        },
        {
          code: "611026",
          name: "柞水县"
        }
      ]
    ],
    [
      [
        {
          code: "620102",
          name: "城关区"
        },
        {
          code: "620103",
          name: "七里河区"
        },
        {
          code: "620104",
          name: "西固区"
        },
        {
          code: "620105",
          name: "安宁区"
        },
        {
          code: "620111",
          name: "红古区"
        },
        {
          code: "620121",
          name: "永登县"
        },
        {
          code: "620122",
          name: "皋兰县"
        },
        {
          code: "620123",
          name: "榆中县"
        }
      ],
      [
        {
          code: "620201",
          name: "雄关区"
        },
        {
          code: "620202",
          name: "镜铁区"
        },
        {
          code: "620203",
          name: "长城区"
        }
      ],
      [
        {
          code: "620302",
          name: "金川区"
        },
        {
          code: "620321",
          name: "永昌县"
        }
      ],
      [
        {
          code: "620402",
          name: "白银区"
        },
        {
          code: "620403",
          name: "平川区"
        },
        {
          code: "620421",
          name: "靖远县"
        },
        {
          code: "620422",
          name: "会宁县"
        },
        {
          code: "620423",
          name: "景泰县"
        }
      ],
      [
        {
          code: "620502",
          name: "秦州区"
        },
        {
          code: "620503",
          name: "麦积区"
        },
        {
          code: "620521",
          name: "清水县"
        },
        {
          code: "620522",
          name: "秦安县"
        },
        {
          code: "620523",
          name: "甘谷县"
        },
        {
          code: "620524",
          name: "武山县"
        },
        {
          code: "620525",
          name: "张家川回族自治县"
        }
      ],
      [
        {
          code: "620602",
          name: "凉州区"
        },
        {
          code: "620621",
          name: "民勤县"
        },
        {
          code: "620622",
          name: "古浪县"
        },
        {
          code: "620623",
          name: "天祝藏族自治县"
        }
      ],
      [
        {
          code: "620702",
          name: "甘州区"
        },
        {
          code: "620721",
          name: "肃南裕固族自治县"
        },
        {
          code: "620722",
          name: "民乐县"
        },
        {
          code: "620723",
          name: "临泽县"
        },
        {
          code: "620724",
          name: "高台县"
        },
        {
          code: "620725",
          name: "山丹县"
        }
      ],
      [
        {
          code: "620802",
          name: "崆峒区"
        },
        {
          code: "620821",
          name: "泾川县"
        },
        {
          code: "620822",
          name: "灵台县"
        },
        {
          code: "620823",
          name: "崇信县"
        },
        {
          code: "620824",
          name: "华亭县"
        },
        {
          code: "620825",
          name: "庄浪县"
        },
        {
          code: "620826",
          name: "静宁县"
        }
      ],
      [
        {
          code: "620902",
          name: "肃州区"
        },
        {
          code: "620921",
          name: "金塔县"
        },
        {
          code: "620922",
          name: "瓜州县"
        },
        {
          code: "620923",
          name: "肃北蒙古族自治县"
        },
        {
          code: "620924",
          name: "阿克塞哈萨克族自治县"
        },
        {
          code: "620981",
          name: "玉门市"
        },
        {
          code: "620982",
          name: "敦煌市"
        }
      ],
      [
        {
          code: "621002",
          name: "西峰区"
        },
        {
          code: "621021",
          name: "庆城县"
        },
        {
          code: "621022",
          name: "环县"
        },
        {
          code: "621023",
          name: "华池县"
        },
        {
          code: "621024",
          name: "合水县"
        },
        {
          code: "621025",
          name: "正宁县"
        },
        {
          code: "621026",
          name: "宁县"
        },
        {
          code: "621027",
          name: "镇原县"
        }
      ],
      [
        {
          code: "621102",
          name: "安定区"
        },
        {
          code: "621121",
          name: "通渭县"
        },
        {
          code: "621122",
          name: "陇西县"
        },
        {
          code: "621123",
          name: "渭源县"
        },
        {
          code: "621124",
          name: "临洮县"
        },
        {
          code: "621125",
          name: "漳县"
        },
        {
          code: "621126",
          name: "岷县"
        }
      ],
      [
        {
          code: "621202",
          name: "武都区"
        },
        {
          code: "621221",
          name: "成县"
        },
        {
          code: "621222",
          name: "文县"
        },
        {
          code: "621223",
          name: "宕昌县"
        },
        {
          code: "621224",
          name: "康县"
        },
        {
          code: "621225",
          name: "西和县"
        },
        {
          code: "621226",
          name: "礼县"
        },
        {
          code: "621227",
          name: "徽县"
        },
        {
          code: "621228",
          name: "两当县"
        }
      ],
      [
        {
          code: "622901",
          name: "临夏市"
        },
        {
          code: "622921",
          name: "临夏县"
        },
        {
          code: "622922",
          name: "康乐县"
        },
        {
          code: "622923",
          name: "永靖县"
        },
        {
          code: "622924",
          name: "广河县"
        },
        {
          code: "622925",
          name: "和政县"
        },
        {
          code: "622926",
          name: "东乡族自治县"
        },
        {
          code: "622927",
          name: "积石山保安族东乡族撒拉族自治县"
        }
      ],
      [
        {
          code: "623001",
          name: "合作市"
        },
        {
          code: "623021",
          name: "临潭县"
        },
        {
          code: "623022",
          name: "卓尼县"
        },
        {
          code: "623023",
          name: "舟曲县"
        },
        {
          code: "623024",
          name: "迭部县"
        },
        {
          code: "623025",
          name: "玛曲县"
        },
        {
          code: "623026",
          name: "碌曲县"
        },
        {
          code: "623027",
          name: "夏河县"
        }
      ]
    ],
    [
      [
        {
          code: "630102",
          name: "城东区"
        },
        {
          code: "630103",
          name: "城中区"
        },
        {
          code: "630104",
          name: "城西区"
        },
        {
          code: "630105",
          name: "城北区"
        },
        {
          code: "630121",
          name: "大通回族土族自治县"
        },
        {
          code: "630122",
          name: "湟中县"
        },
        {
          code: "630123",
          name: "湟源县"
        }
      ],
      [
        {
          code: "630202",
          name: "乐都区"
        },
        {
          code: "630203",
          name: "平安区"
        },
        {
          code: "630222",
          name: "民和回族土族自治县"
        },
        {
          code: "630223",
          name: "互助土族自治县"
        },
        {
          code: "630224",
          name: "化隆回族自治县"
        },
        {
          code: "630225",
          name: "循化撒拉族自治县"
        }
      ],
      [
        {
          code: "632221",
          name: "门源回族自治县"
        },
        {
          code: "632222",
          name: "祁连县"
        },
        {
          code: "632223",
          name: "海晏县"
        },
        {
          code: "632224",
          name: "刚察县"
        }
      ],
      [
        {
          code: "632321",
          name: "同仁县"
        },
        {
          code: "632322",
          name: "尖扎县"
        },
        {
          code: "632323",
          name: "泽库县"
        },
        {
          code: "632324",
          name: "河南蒙古族自治县"
        }
      ],
      [
        {
          code: "632521",
          name: "共和县"
        },
        {
          code: "632522",
          name: "同德县"
        },
        {
          code: "632523",
          name: "贵德县"
        },
        {
          code: "632524",
          name: "兴海县"
        },
        {
          code: "632525",
          name: "贵南县"
        }
      ],
      [
        {
          code: "632621",
          name: "玛沁县"
        },
        {
          code: "632622",
          name: "班玛县"
        },
        {
          code: "632623",
          name: "甘德县"
        },
        {
          code: "632624",
          name: "达日县"
        },
        {
          code: "632625",
          name: "久治县"
        },
        {
          code: "632626",
          name: "玛多县"
        }
      ],
      [
        {
          code: "632701",
          name: "玉树市"
        },
        {
          code: "632722",
          name: "杂多县"
        },
        {
          code: "632723",
          name: "称多县"
        },
        {
          code: "632724",
          name: "治多县"
        },
        {
          code: "632725",
          name: "囊谦县"
        },
        {
          code: "632726",
          name: "曲麻莱县"
        }
      ],
      [
        {
          code: "632801",
          name: "格尔木市"
        },
        {
          code: "632802",
          name: "德令哈市"
        },
        {
          code: "632821",
          name: "乌兰县"
        },
        {
          code: "632822",
          name: "都兰县"
        },
        {
          code: "632823",
          name: "天峻县"
        },
        {
          code: "632824",
          name: "冷湖行政委员会"
        },
        {
          code: "632825",
          name: "大柴旦行政委员会"
        },
        {
          code: "632826",
          name: "茫崖行政委员会"
        }
      ]
    ],
    [
      [
        {
          code: "640104",
          name: "兴庆区"
        },
        {
          code: "640105",
          name: "西夏区"
        },
        {
          code: "640106",
          name: "金凤区"
        },
        {
          code: "640121",
          name: "永宁县"
        },
        {
          code: "640122",
          name: "贺兰县"
        },
        {
          code: "640181",
          name: "灵武市"
        }
      ],
      [
        {
          code: "640202",
          name: "大武口区"
        },
        {
          code: "640205",
          name: "惠农区"
        },
        {
          code: "640221",
          name: "平罗县"
        }
      ],
      [
        {
          code: "640302",
          name: "利通区"
        },
        {
          code: "640303",
          name: "红寺堡区"
        },
        {
          code: "640323",
          name: "盐池县"
        },
        {
          code: "640324",
          name: "同心县"
        },
        {
          code: "640381",
          name: "青铜峡市"
        }
      ],
      [
        {
          code: "640402",
          name: "原州区"
        },
        {
          code: "640422",
          name: "西吉县"
        },
        {
          code: "640423",
          name: "隆德县"
        },
        {
          code: "640424",
          name: "泾源县"
        },
        {
          code: "640425",
          name: "彭阳县"
        }
      ],
      [
        {
          code: "640502",
          name: "沙坡头区"
        },
        {
          code: "640521",
          name: "中宁县"
        },
        {
          code: "640522",
          name: "海原县"
        }
      ]
    ],
    [
      [
        {
          code: "650102",
          name: "天山区"
        },
        {
          code: "650103",
          name: "沙依巴克区"
        },
        {
          code: "650104",
          name: "新市区"
        },
        {
          code: "650105",
          name: "水磨沟区"
        },
        {
          code: "650106",
          name: "头屯河区"
        },
        {
          code: "650107",
          name: "达坂城区"
        },
        {
          code: "650109",
          name: "米东区"
        },
        {
          code: "650121",
          name: "乌鲁木齐县"
        }
      ],
      [
        {
          code: "650202",
          name: "独山子区"
        },
        {
          code: "650203",
          name: "克拉玛依区"
        },
        {
          code: "650204",
          name: "白碱滩区"
        },
        {
          code: "650205",
          name: "乌尔禾区"
        }
      ],
      [
        {
          code: "650402",
          name: "高昌区"
        },
        {
          code: "650421",
          name: "鄯善县"
        },
        {
          code: "650422",
          name: "托克逊县"
        }
      ],
      [
        {
          code: "650502",
          name: "伊州区"
        },
        {
          code: "650521",
          name: "巴里坤哈萨克自治县"
        },
        {
          code: "650522",
          name: "伊吾县"
        }
      ],
      [
        {
          code: "652301",
          name: "昌吉市"
        },
        {
          code: "652302",
          name: "阜康市"
        },
        {
          code: "652323",
          name: "呼图壁县"
        },
        {
          code: "652324",
          name: "玛纳斯县"
        },
        {
          code: "652325",
          name: "奇台县"
        },
        {
          code: "652327",
          name: "吉木萨尔县"
        },
        {
          code: "652328",
          name: "木垒哈萨克自治县"
        }
      ],
      [
        {
          code: "652701",
          name: "博乐市"
        },
        {
          code: "652702",
          name: "阿拉山口市"
        },
        {
          code: "652722",
          name: "精河县"
        },
        {
          code: "652723",
          name: "温泉县"
        }
      ],
      [
        {
          code: "652801",
          name: "库尔勒市"
        },
        {
          code: "652822",
          name: "轮台县"
        },
        {
          code: "652823",
          name: "尉犁县"
        },
        {
          code: "652824",
          name: "若羌县"
        },
        {
          code: "652825",
          name: "且末县"
        },
        {
          code: "652826",
          name: "焉耆回族自治县"
        },
        {
          code: "652827",
          name: "和静县"
        },
        {
          code: "652828",
          name: "和硕县"
        },
        {
          code: "652829",
          name: "博湖县"
        }
      ],
      [
        {
          code: "652901",
          name: "阿克苏市"
        },
        {
          code: "652922",
          name: "温宿县"
        },
        {
          code: "652923",
          name: "库车县"
        },
        {
          code: "652924",
          name: "沙雅县"
        },
        {
          code: "652925",
          name: "新和县"
        },
        {
          code: "652926",
          name: "拜城县"
        },
        {
          code: "652927",
          name: "乌什县"
        },
        {
          code: "652928",
          name: "阿瓦提县"
        },
        {
          code: "652929",
          name: "柯坪县"
        }
      ],
      [
        {
          code: "653001",
          name: "阿图什市"
        },
        {
          code: "653022",
          name: "阿克陶县"
        },
        {
          code: "653023",
          name: "阿合奇县"
        },
        {
          code: "653024",
          name: "乌恰县"
        }
      ],
      [
        {
          code: "653101",
          name: "喀什市"
        },
        {
          code: "653121",
          name: "疏附县"
        },
        {
          code: "653122",
          name: "疏勒县"
        },
        {
          code: "653123",
          name: "英吉沙县"
        },
        {
          code: "653124",
          name: "泽普县"
        },
        {
          code: "653125",
          name: "莎车县"
        },
        {
          code: "653126",
          name: "叶城县"
        },
        {
          code: "653127",
          name: "麦盖提县"
        },
        {
          code: "653128",
          name: "岳普湖县"
        },
        {
          code: "653129",
          name: "伽师县"
        },
        {
          code: "653130",
          name: "巴楚县"
        },
        {
          code: "653131",
          name: "塔什库尔干塔吉克自治县"
        }
      ],
      [
        {
          code: "653201",
          name: "和田市"
        },
        {
          code: "653221",
          name: "和田县"
        },
        {
          code: "653222",
          name: "墨玉县"
        },
        {
          code: "653223",
          name: "皮山县"
        },
        {
          code: "653224",
          name: "洛浦县"
        },
        {
          code: "653225",
          name: "策勒县"
        },
        {
          code: "653226",
          name: "于田县"
        },
        {
          code: "653227",
          name: "民丰县"
        }
      ],
      [
        {
          code: "654002",
          name: "伊宁市"
        },
        {
          code: "654003",
          name: "奎屯市"
        },
        {
          code: "654004",
          name: "霍尔果斯市"
        },
        {
          code: "654021",
          name: "伊宁县"
        },
        {
          code: "654022",
          name: "察布查尔锡伯自治县"
        },
        {
          code: "654023",
          name: "霍城县"
        },
        {
          code: "654024",
          name: "巩留县"
        },
        {
          code: "654025",
          name: "新源县"
        },
        {
          code: "654026",
          name: "昭苏县"
        },
        {
          code: "654027",
          name: "特克斯县"
        },
        {
          code: "654028",
          name: "尼勒克县"
        }
      ],
      [
        {
          code: "654201",
          name: "塔城市"
        },
        {
          code: "654202",
          name: "乌苏市"
        },
        {
          code: "654203",
          name: "沙湾市"
        },
        {
          code: "654221",
          name: "额敏县"
        },
        {
          code: "654224",
          name: "托里县"
        },
        {
          code: "654225",
          name: "裕民县"
        },
        {
          code: "654226",
          name: "和布克赛尔蒙古自治县"
        }
      ],
      [
        {
          code: "654301",
          name: "阿勒泰市"
        },
        {
          code: "654321",
          name: "布尔津县"
        },
        {
          code: "654322",
          name: "富蕴县"
        },
        {
          code: "654323",
          name: "福海县"
        },
        {
          code: "654324",
          name: "哈巴河县"
        },
        {
          code: "654325",
          name: "青河县"
        },
        {
          code: "654326",
          name: "吉木乃县"
        }
      ],
      [
        {
          code: "659001",
          name: "石河子市"
        },
        {
          code: "659002",
          name: "阿拉尔市"
        },
        {
          code: "659003",
          name: "图木舒克市"
        },
        {
          code: "659004",
          name: "五家渠市"
        },
        {
          code: "659005",
          name: "北屯市"
        },
        {
          code: "659006",
          name: "铁门关市"
        },
        {
          code: "659007",
          name: "双河市"
        },
        {
          code: "659008",
          name: "可克达拉市"
        },
        {
          code: "659009",
          name: "昆玉市"
        }
      ]
    ],
    [
      [
        {
          code: "710101",
          name: "中正区"
        },
        {
          code: "710102",
          name: "大同区"
        },
        {
          code: "710103",
          name: "中山区"
        },
        {
          code: "710104",
          name: "松山区"
        },
        {
          code: "710105",
          name: "大安区"
        },
        {
          code: "710106",
          name: "万华区"
        },
        {
          code: "710107",
          name: "信义区"
        },
        {
          code: "710108",
          name: "士林区"
        },
        {
          code: "710109",
          name: "北投区"
        },
        {
          code: "710110",
          name: "内湖区"
        },
        {
          code: "710111",
          name: "南港区"
        },
        {
          code: "710112",
          name: "文山区"
        }
      ],
      [
        {
          code: "710201",
          name: "新兴区"
        },
        {
          code: "710202",
          name: "前金区"
        },
        {
          code: "710203",
          name: "苓雅区"
        },
        {
          code: "710204",
          name: "盐埕区"
        },
        {
          code: "710205",
          name: "鼓山区"
        },
        {
          code: "710206",
          name: "旗津区"
        },
        {
          code: "710207",
          name: "前镇区"
        },
        {
          code: "710208",
          name: "三民区"
        },
        {
          code: "710209",
          name: "左营区"
        },
        {
          code: "710210",
          name: "楠梓区"
        },
        {
          code: "710211",
          name: "小港区"
        },
        {
          code: "710242",
          name: "仁武区"
        },
        {
          code: "710243",
          name: "大社区"
        },
        {
          code: "710244",
          name: "冈山区"
        },
        {
          code: "710245",
          name: "路竹区"
        },
        {
          code: "710246",
          name: "阿莲区"
        },
        {
          code: "710247",
          name: "田寮区"
        },
        {
          code: "710248",
          name: "燕巢区"
        },
        {
          code: "710249",
          name: "桥头区"
        },
        {
          code: "710250",
          name: "梓官区"
        },
        {
          code: "710251",
          name: "弥陀区"
        },
        {
          code: "710252",
          name: "永安区"
        },
        {
          code: "710253",
          name: "湖内区"
        },
        {
          code: "710254",
          name: "凤山区"
        },
        {
          code: "710255",
          name: "大寮区"
        },
        {
          code: "710256",
          name: "林园区"
        },
        {
          code: "710257",
          name: "鸟松区"
        },
        {
          code: "710258",
          name: "大树区"
        },
        {
          code: "710259",
          name: "旗山区"
        },
        {
          code: "710260",
          name: "美浓区"
        },
        {
          code: "710261",
          name: "六龟区"
        },
        {
          code: "710262",
          name: "内门区"
        },
        {
          code: "710263",
          name: "杉林区"
        },
        {
          code: "710264",
          name: "甲仙区"
        },
        {
          code: "710265",
          name: "桃源区"
        },
        {
          code: "710266",
          name: "那玛夏区"
        },
        {
          code: "710267",
          name: "茂林区"
        },
        {
          code: "710268",
          name: "茄萣区"
        }
      ],
      [
        {
          code: "710301",
          name: "中西区"
        },
        {
          code: "710302",
          name: "东区"
        },
        {
          code: "710303",
          name: "南区"
        },
        {
          code: "710304",
          name: "北区"
        },
        {
          code: "710305",
          name: "安平区"
        },
        {
          code: "710306",
          name: "安南区"
        },
        {
          code: "710339",
          name: "永康区"
        },
        {
          code: "710340",
          name: "归仁区"
        },
        {
          code: "710341",
          name: "新化区"
        },
        {
          code: "710342",
          name: "左镇区"
        },
        {
          code: "710343",
          name: "玉井区"
        },
        {
          code: "710344",
          name: "楠西区"
        },
        {
          code: "710345",
          name: "南化区"
        },
        {
          code: "710346",
          name: "仁德区"
        },
        {
          code: "710347",
          name: "关庙区"
        },
        {
          code: "710348",
          name: "龙崎区"
        },
        {
          code: "710349",
          name: "官田区"
        },
        {
          code: "710350",
          name: "麻豆区"
        },
        {
          code: "710351",
          name: "佳里区"
        },
        {
          code: "710352",
          name: "西港区"
        },
        {
          code: "710353",
          name: "七股区"
        },
        {
          code: "710354",
          name: "将军区"
        },
        {
          code: "710355",
          name: "学甲区"
        },
        {
          code: "710356",
          name: "北门区"
        },
        {
          code: "710357",
          name: "新营区"
        },
        {
          code: "710358",
          name: "后壁区"
        },
        {
          code: "710359",
          name: "白河区"
        },
        {
          code: "710360",
          name: "东山区"
        },
        {
          code: "710361",
          name: "六甲区"
        },
        {
          code: "710362",
          name: "下营区"
        },
        {
          code: "710363",
          name: "柳营区"
        },
        {
          code: "710364",
          name: "盐水区"
        },
        {
          code: "710365",
          name: "善化区"
        },
        {
          code: "710366",
          name: "大内区"
        },
        {
          code: "710367",
          name: "山上区"
        },
        {
          code: "710368",
          name: "新市区"
        },
        {
          code: "710369",
          name: "安定区"
        }
      ],
      [
        {
          code: "710401",
          name: "中区"
        },
        {
          code: "710402",
          name: "东区"
        },
        {
          code: "710403",
          name: "南区"
        },
        {
          code: "710404",
          name: "西区"
        },
        {
          code: "710405",
          name: "北区"
        },
        {
          code: "710406",
          name: "北屯区"
        },
        {
          code: "710407",
          name: "西屯区"
        },
        {
          code: "710408",
          name: "南屯区"
        },
        {
          code: "710431",
          name: "太平区"
        },
        {
          code: "710432",
          name: "大里区"
        },
        {
          code: "710433",
          name: "雾峰区"
        },
        {
          code: "710434",
          name: "乌日区"
        },
        {
          code: "710435",
          name: "丰原区"
        },
        {
          code: "710436",
          name: "后里区"
        },
        {
          code: "710437",
          name: "石冈区"
        },
        {
          code: "710438",
          name: "东势区"
        },
        {
          code: "710439",
          name: "和平区"
        },
        {
          code: "710440",
          name: "新社区"
        },
        {
          code: "710441",
          name: "潭子区"
        },
        {
          code: "710442",
          name: "大雅区"
        },
        {
          code: "710443",
          name: "神冈区"
        },
        {
          code: "710444",
          name: "大肚区"
        },
        {
          code: "710445",
          name: "沙鹿区"
        },
        {
          code: "710446",
          name: "龙井区"
        },
        {
          code: "710447",
          name: "梧栖区"
        },
        {
          code: "710448",
          name: "清水区"
        },
        {
          code: "710449",
          name: "大甲区"
        },
        {
          code: "710450",
          name: "外埔区"
        },
        {
          code: "710451",
          name: "大安区"
        }
      ],
      [
        {
          code: "710614",
          name: "南投市"
        },
        {
          code: "710615",
          name: "中寮乡"
        },
        {
          code: "710616",
          name: "草屯镇"
        },
        {
          code: "710617",
          name: "国姓乡"
        },
        {
          code: "710618",
          name: "埔里镇"
        },
        {
          code: "710619",
          name: "仁爱乡"
        },
        {
          code: "710620",
          name: "名间乡"
        },
        {
          code: "710621",
          name: "集集镇"
        },
        {
          code: "710622",
          name: "水里乡"
        },
        {
          code: "710623",
          name: "鱼池乡"
        },
        {
          code: "710624",
          name: "信义乡"
        },
        {
          code: "710625",
          name: "竹山镇"
        },
        {
          code: "710626",
          name: "鹿谷乡"
        }
      ],
      [
        {
          code: "710701",
          name: "仁爱区"
        },
        {
          code: "710702",
          name: "信义区"
        },
        {
          code: "710703",
          name: "中正区"
        },
        {
          code: "710704",
          name: "中山区"
        },
        {
          code: "710705",
          name: "安乐区"
        },
        {
          code: "710706",
          name: "暖暖区"
        },
        {
          code: "710707",
          name: "七堵区"
        }
      ],
      [
        {
          code: "710801",
          name: "东区"
        },
        {
          code: "710802",
          name: "北区"
        },
        {
          code: "710803",
          name: "香山区"
        }
      ],
      [
        {
          code: "710901",
          name: "东区"
        },
        {
          code: "710902",
          name: "西区"
        }
      ],
      [
        {
          code: "711130",
          name: "万里区"
        },
        {
          code: "711131",
          name: "金山区"
        },
        {
          code: "711132",
          name: "板桥区"
        },
        {
          code: "711133",
          name: "汐止区"
        },
        {
          code: "711134",
          name: "深坑区"
        },
        {
          code: "711135",
          name: "石碇区"
        },
        {
          code: "711136",
          name: "瑞芳区"
        },
        {
          code: "711137",
          name: "平溪区"
        },
        {
          code: "711138",
          name: "双溪区"
        },
        {
          code: "711139",
          name: "贡寮区"
        },
        {
          code: "711140",
          name: "新店区"
        },
        {
          code: "711141",
          name: "坪林区"
        },
        {
          code: "711142",
          name: "乌来区"
        },
        {
          code: "711143",
          name: "永和区"
        },
        {
          code: "711144",
          name: "中和区"
        },
        {
          code: "711145",
          name: "土城区"
        },
        {
          code: "711146",
          name: "三峡区"
        },
        {
          code: "711147",
          name: "树林区"
        },
        {
          code: "711148",
          name: "莺歌区"
        },
        {
          code: "711149",
          name: "三重区"
        },
        {
          code: "711150",
          name: "新庄区"
        },
        {
          code: "711151",
          name: "泰山区"
        },
        {
          code: "711152",
          name: "林口区"
        },
        {
          code: "711153",
          name: "芦洲区"
        },
        {
          code: "711154",
          name: "五股区"
        },
        {
          code: "711155",
          name: "八里区"
        },
        {
          code: "711156",
          name: "淡水区"
        },
        {
          code: "711157",
          name: "三芝区"
        },
        {
          code: "711158",
          name: "石门区"
        }
      ],
      [
        {
          code: "711214",
          name: "宜兰市"
        },
        {
          code: "711215",
          name: "头城镇"
        },
        {
          code: "711216",
          name: "礁溪乡"
        },
        {
          code: "711217",
          name: "壮围乡"
        },
        {
          code: "711218",
          name: "员山乡"
        },
        {
          code: "711219",
          name: "罗东镇"
        },
        {
          code: "711220",
          name: "三星乡"
        },
        {
          code: "711221",
          name: "大同乡"
        },
        {
          code: "711222",
          name: "五结乡"
        },
        {
          code: "711223",
          name: "冬山乡"
        },
        {
          code: "711224",
          name: "苏澳镇"
        },
        {
          code: "711225",
          name: "南澳乡"
        }
      ],
      [
        {
          code: "711314",
          name: "竹北市"
        },
        {
          code: "711315",
          name: "湖口乡"
        },
        {
          code: "711316",
          name: "新丰乡"
        },
        {
          code: "711317",
          name: "新埔镇"
        },
        {
          code: "711318",
          name: "关西镇"
        },
        {
          code: "711319",
          name: "芎林乡"
        },
        {
          code: "711320",
          name: "宝山乡"
        },
        {
          code: "711321",
          name: "竹东镇"
        },
        {
          code: "711322",
          name: "五峰乡"
        },
        {
          code: "711323",
          name: "横山乡"
        },
        {
          code: "711324",
          name: "尖石乡"
        },
        {
          code: "711325",
          name: "北埔乡"
        },
        {
          code: "711326",
          name: "峨眉乡"
        }
      ],
      [
        {
          code: "711414",
          name: "中坜区"
        },
        {
          code: "711415",
          name: "平镇区"
        },
        {
          code: "711416",
          name: "龙潭区"
        },
        {
          code: "711417",
          name: "杨梅区"
        },
        {
          code: "711418",
          name: "新屋区"
        },
        {
          code: "711419",
          name: "观音区"
        },
        {
          code: "711420",
          name: "桃园区"
        },
        {
          code: "711421",
          name: "龟山区"
        },
        {
          code: "711422",
          name: "八德区"
        },
        {
          code: "711423",
          name: "大溪区"
        },
        {
          code: "711424",
          name: "复兴区"
        },
        {
          code: "711425",
          name: "大园区"
        },
        {
          code: "711426",
          name: "芦竹区"
        }
      ],
      [
        {
          code: "711519",
          name: "竹南镇"
        },
        {
          code: "711520",
          name: "头份市"
        },
        {
          code: "711521",
          name: "三湾乡"
        },
        {
          code: "711522",
          name: "南庄乡"
        },
        {
          code: "711523",
          name: "狮潭乡"
        },
        {
          code: "711524",
          name: "后龙镇"
        },
        {
          code: "711525",
          name: "通霄镇"
        },
        {
          code: "711526",
          name: "苑里镇"
        },
        {
          code: "711527",
          name: "苗栗市"
        },
        {
          code: "711528",
          name: "造桥乡"
        },
        {
          code: "711529",
          name: "头屋乡"
        },
        {
          code: "711530",
          name: "公馆乡"
        },
        {
          code: "711531",
          name: "大湖乡"
        },
        {
          code: "711532",
          name: "泰安乡"
        },
        {
          code: "711533",
          name: "铜锣乡"
        },
        {
          code: "711534",
          name: "三义乡"
        },
        {
          code: "711535",
          name: "西湖乡"
        },
        {
          code: "711536",
          name: "卓兰镇"
        }
      ],
      [
        {
          code: "711727",
          name: "彰化市"
        },
        {
          code: "711728",
          name: "芬园乡"
        },
        {
          code: "711729",
          name: "花坛乡"
        },
        {
          code: "711730",
          name: "秀水乡"
        },
        {
          code: "711731",
          name: "鹿港镇"
        },
        {
          code: "711732",
          name: "福兴乡"
        },
        {
          code: "711733",
          name: "线西乡"
        },
        {
          code: "711734",
          name: "和美镇"
        },
        {
          code: "711735",
          name: "伸港乡"
        },
        {
          code: "711736",
          name: "员林市"
        },
        {
          code: "711737",
          name: "社头乡"
        },
        {
          code: "711738",
          name: "永靖乡"
        },
        {
          code: "711739",
          name: "埔心乡"
        },
        {
          code: "711740",
          name: "溪湖镇"
        },
        {
          code: "711741",
          name: "大村乡"
        },
        {
          code: "711742",
          name: "埔盐乡"
        },
        {
          code: "711743",
          name: "田中镇"
        },
        {
          code: "711744",
          name: "北斗镇"
        },
        {
          code: "711745",
          name: "田尾乡"
        },
        {
          code: "711746",
          name: "埤头乡"
        },
        {
          code: "711747",
          name: "溪州乡"
        },
        {
          code: "711748",
          name: "竹塘乡"
        },
        {
          code: "711749",
          name: "二林镇"
        },
        {
          code: "711750",
          name: "大城乡"
        },
        {
          code: "711751",
          name: "芳苑乡"
        },
        {
          code: "711752",
          name: "二水乡"
        }
      ],
      [
        {
          code: "711919",
          name: "番路乡"
        },
        {
          code: "711920",
          name: "梅山乡"
        },
        {
          code: "711921",
          name: "竹崎乡"
        },
        {
          code: "711922",
          name: "阿里山乡"
        },
        {
          code: "711923",
          name: "中埔乡"
        },
        {
          code: "711924",
          name: "大埔乡"
        },
        {
          code: "711925",
          name: "水上乡"
        },
        {
          code: "711926",
          name: "鹿草乡"
        },
        {
          code: "711927",
          name: "太保市"
        },
        {
          code: "711928",
          name: "朴子市"
        },
        {
          code: "711929",
          name: "东石乡"
        },
        {
          code: "711930",
          name: "六脚乡"
        },
        {
          code: "711931",
          name: "新港乡"
        },
        {
          code: "711932",
          name: "民雄乡"
        },
        {
          code: "711933",
          name: "大林镇"
        },
        {
          code: "711934",
          name: "溪口乡"
        },
        {
          code: "711935",
          name: "义竹乡"
        },
        {
          code: "711936",
          name: "布袋镇"
        }
      ],
      [
        {
          code: "712121",
          name: "斗南镇"
        },
        {
          code: "712122",
          name: "大埤乡"
        },
        {
          code: "712123",
          name: "虎尾镇"
        },
        {
          code: "712124",
          name: "土库镇"
        },
        {
          code: "712125",
          name: "褒忠乡"
        },
        {
          code: "712126",
          name: "东势乡"
        },
        {
          code: "712127",
          name: "台西乡"
        },
        {
          code: "712128",
          name: "仑背乡"
        },
        {
          code: "712129",
          name: "麦寮乡"
        },
        {
          code: "712130",
          name: "斗六市"
        },
        {
          code: "712131",
          name: "林内乡"
        },
        {
          code: "712132",
          name: "古坑乡"
        },
        {
          code: "712133",
          name: "莿桐乡"
        },
        {
          code: "712134",
          name: "西螺镇"
        },
        {
          code: "712135",
          name: "二仑乡"
        },
        {
          code: "712136",
          name: "北港镇"
        },
        {
          code: "712137",
          name: "水林乡"
        },
        {
          code: "712138",
          name: "口湖乡"
        },
        {
          code: "712139",
          name: "四湖乡"
        },
        {
          code: "712140",
          name: "元长乡"
        }
      ],
      [
        {
          code: "712434",
          name: "屏东市"
        },
        {
          code: "712435",
          name: "三地门乡"
        },
        {
          code: "712436",
          name: "雾台乡"
        },
        {
          code: "712437",
          name: "玛家乡"
        },
        {
          code: "712438",
          name: "九如乡"
        },
        {
          code: "712439",
          name: "里港乡"
        },
        {
          code: "712440",
          name: "高树乡"
        },
        {
          code: "712441",
          name: "盐埔乡"
        },
        {
          code: "712442",
          name: "长治乡"
        },
        {
          code: "712443",
          name: "麟洛乡"
        },
        {
          code: "712444",
          name: "竹田乡"
        },
        {
          code: "712445",
          name: "内埔乡"
        },
        {
          code: "712446",
          name: "万丹乡"
        },
        {
          code: "712447",
          name: "潮州镇"
        },
        {
          code: "712448",
          name: "泰武乡"
        },
        {
          code: "712449",
          name: "来义乡"
        },
        {
          code: "712450",
          name: "万峦乡"
        },
        {
          code: "712451",
          name: "崁顶乡"
        },
        {
          code: "712452",
          name: "新埤乡"
        },
        {
          code: "712453",
          name: "南州乡"
        },
        {
          code: "712454",
          name: "林边乡"
        },
        {
          code: "712455",
          name: "东港镇"
        },
        {
          code: "712456",
          name: "琉球乡"
        },
        {
          code: "712457",
          name: "佳冬乡"
        },
        {
          code: "712458",
          name: "新园乡"
        },
        {
          code: "712459",
          name: "枋寮乡"
        },
        {
          code: "712460",
          name: "枋山乡"
        },
        {
          code: "712461",
          name: "春日乡"
        },
        {
          code: "712462",
          name: "狮子乡"
        },
        {
          code: "712463",
          name: "车城乡"
        },
        {
          code: "712464",
          name: "牡丹乡"
        },
        {
          code: "712465",
          name: "恒春镇"
        },
        {
          code: "712466",
          name: "满州乡"
        }
      ],
      [
        {
          code: "712517",
          name: "台东市"
        },
        {
          code: "712518",
          name: "绿岛乡"
        },
        {
          code: "712519",
          name: "兰屿乡"
        },
        {
          code: "712520",
          name: "延平乡"
        },
        {
          code: "712521",
          name: "卑南乡"
        },
        {
          code: "712522",
          name: "鹿野乡"
        },
        {
          code: "712523",
          name: "关山镇"
        },
        {
          code: "712524",
          name: "海端乡"
        },
        {
          code: "712525",
          name: "池上乡"
        },
        {
          code: "712526",
          name: "东河乡"
        },
        {
          code: "712527",
          name: "成功镇"
        },
        {
          code: "712528",
          name: "长滨乡"
        },
        {
          code: "712529",
          name: "金峰乡"
        },
        {
          code: "712530",
          name: "大武乡"
        },
        {
          code: "712531",
          name: "达仁乡"
        },
        {
          code: "712532",
          name: "太麻里乡"
        }
      ],
      [
        {
          code: "712615",
          name: "花莲市"
        },
        {
          code: "712616",
          name: "新城乡"
        },
        {
          code: "712618",
          name: "秀林乡"
        },
        {
          code: "712619",
          name: "吉安乡"
        },
        {
          code: "712620",
          name: "寿丰乡"
        },
        {
          code: "712621",
          name: "凤林镇"
        },
        {
          code: "712622",
          name: "光复乡"
        },
        {
          code: "712623",
          name: "丰滨乡"
        },
        {
          code: "712624",
          name: "瑞穗乡"
        },
        {
          code: "712625",
          name: "万荣乡"
        },
        {
          code: "712626",
          name: "玉里镇"
        },
        {
          code: "712627",
          name: "卓溪乡"
        },
        {
          code: "712628",
          name: "富里乡"
        }
      ],
      [
        {
          code: "712707",
          name: "马公市"
        },
        {
          code: "712708",
          name: "西屿乡"
        },
        {
          code: "712709",
          name: "望安乡"
        },
        {
          code: "712710",
          name: "七美乡"
        },
        {
          code: "712711",
          name: "白沙乡"
        },
        {
          code: "712712",
          name: "湖西乡"
        }
      ]
    ],
    [
      [
        {
          code: "810101",
          name: "中西区"
        },
        {
          code: "810102",
          name: "东区"
        },
        {
          code: "810103",
          name: "九龙城区"
        },
        {
          code: "810104",
          name: "观塘区"
        },
        {
          code: "810105",
          name: "南区"
        },
        {
          code: "810106",
          name: "深水埗区"
        },
        {
          code: "810107",
          name: "湾仔区"
        },
        {
          code: "810108",
          name: "黄大仙区"
        },
        {
          code: "810109",
          name: "油尖旺区"
        },
        {
          code: "810110",
          name: "离岛区"
        },
        {
          code: "810111",
          name: "葵青区"
        },
        {
          code: "810112",
          name: "北区"
        },
        {
          code: "810113",
          name: "西贡区"
        },
        {
          code: "810114",
          name: "沙田区"
        },
        {
          code: "810115",
          name: "屯门区"
        },
        {
          code: "810116",
          name: "大埔区"
        },
        {
          code: "810117",
          name: "荃湾区"
        },
        {
          code: "810118",
          name: "元朗区"
        }
      ]
    ],
    [
      [
        {
          code: "820101",
          name: "澳门半岛"
        },
        {
          code: "820102",
          name: "凼仔"
        },
        {
          code: "820103",
          name: "路凼城"
        },
        {
          code: "820104",
          name: "路环"
        }
      ]
    ]
  ];
  const _sfc_main$D = {
    name: "u-picker",
    emits: ["update:modelValue", "input", "confirm", "cancel"],
    props: {
      // 通过双向绑定控制组件的弹出与收起
      value: {
        type: Boolean,
        default: false
      },
      modelValue: {
        type: Boolean,
        default: false
      },
      // picker中需要显示的参数
      params: {
        type: Object,
        default() {
          return {
            year: true,
            month: true,
            day: true,
            hour: false,
            minute: false,
            second: false,
            province: true,
            city: true,
            area: true,
            timestamp: true
          };
        }
      },
      // 当mode=selector或者mode=multiSelector时，提供的数组
      range: {
        type: Array,
        default() {
          return [];
        }
      },
      // 当mode=selector或者mode=multiSelector时，提供的默认选中的下标
      defaultSelector: {
        type: Array,
        default() {
          return [0];
        }
      },
      // 当 range 是一个 Array＜Object＞ 时，通过 range-key 来指定 Object 中 key 的值作为选择器显示内容
      rangeKey: {
        type: String,
        default: ""
      },
      // 模式选择，region-地区类型，time-时间类型，selector-单列模式，multiSelector-多列模式
      mode: {
        type: String,
        default: "time"
      },
      // 年份开始时间
      startYear: {
        type: [String, Number],
        default: 1950
      },
      // 年份结束时间
      endYear: {
        type: [String, Number],
        default: 2050
      },
      // "取消"按钮的颜色
      cancelColor: {
        type: String,
        default: "#606266"
      },
      // "确定"按钮的颜色
      confirmColor: {
        type: String,
        default: "#2979ff"
      },
      // 默认显示的时间，2025-07-02 || 2025-07-02 13:01:00 || 2025/07/02
      defaultTime: {
        type: String,
        default: ""
      },
      // 默认显示的地区，可传类似["河北省", "秦皇岛市", "北戴河区"]
      defaultRegion: {
        type: Array,
        default() {
          return [];
        }
      },
      // 时间模式时，是否显示后面的年月日中文提示
      showTimeTag: {
        type: Boolean,
        default: true
      },
      // 默认显示地区的编码，defaultRegion和areaCode同时存在，areaCode优先，可传类似["13", "1303", "130304"]
      areaCode: {
        type: Array,
        default() {
          return [];
        }
      },
      safeAreaInsetBottom: {
        type: Boolean,
        default: false
      },
      // 是否允许通过点击遮罩关闭Picker
      maskCloseAble: {
        type: Boolean,
        default: true
      },
      // 弹出的z-index值
      zIndex: {
        type: [String, Number],
        default: 0
      },
      // 顶部标题
      title: {
        type: String,
        default: ""
      },
      // 取消按钮的文字
      cancelText: {
        type: String,
        default: "取消"
      },
      // 确认按钮的文字
      confirmText: {
        type: String,
        default: "确认"
      },
      // 遮罩的模糊度
      blur: {
        type: [String, Number],
        default: 0
      }
    },
    data() {
      return {
        popupValue: false,
        years: [],
        months: [],
        days: [],
        hours: [],
        minutes: [],
        seconds: [],
        year: 0,
        month: 0,
        day: 0,
        hour: 0,
        minute: 0,
        second: 0,
        reset: false,
        startDate: "",
        endDate: "",
        valueArr: [],
        provinces,
        citys: citys[0],
        areas: areas[0][0],
        province: 0,
        city: 0,
        area: 0,
        moving: false
        // 列是否还在滑动中，微信小程序如果在滑动中就点确定，结果可能不准确
      };
    },
    mounted() {
      this.init();
    },
    computed: {
      valueCom() {
        return this.modelValue;
      },
      propsChange() {
        let { mode, defaultTime, startYear, endYear, defaultRegion, areaCode, defaultSelector } = this;
        return JSON.stringify({ mode, defaultTime, startYear, endYear, defaultRegion, areaCode, defaultSelector });
      },
      regionChange() {
        return `${this.province}-${this.city}`;
      },
      yearAndMonth() {
        return `${this.year}-${this.month}`;
      },
      uZIndex() {
        return this.zIndex ? this.zIndex : this.$u.zIndex.popup;
      },
      // 用来兼容小程序、App、h5
      showColumnCom() {
        return true;
      }
    },
    watch: {
      propsChange() {
        this.reset = true;
        setTimeout(() => this.init(), 10);
      },
      // 如果地区发生变化，为了让picker联动起来，必须重置this.citys和this.areas
      regionChange(val) {
        this.citys = citys[this.province];
        this.areas = areas[this.province][this.city];
      },
      // watch监听月份的变化，实时变更日的天数，因为不同月份，天数不一样
      // 一个月可能有30，31天，甚至闰年2月的29天，平年2月28天
      yearAndMonth(val) {
        if (this.params.year)
          this.setDays();
      },
      // 微信和QQ小程序由于一些奇怪的原因(故同时对所有平台均初始化一遍)，需要重新初始化才能显示正确的值
      valueCom: {
        immediate: true,
        handler(n) {
          if (n) {
            this.reset = true;
            setTimeout(() => this.init(), 10);
          }
          this.popupValue = n;
        }
      }
    },
    methods: {
      // 标识滑动开始，只有微信小程序才有这样的事件
      pickstart() {
      },
      // 标识滑动结束
      pickend() {
      },
      // 对单列和多列形式的判断是否有传入变量的情况
      getItemValue(item, mode) {
        if (this.mode == mode) {
          return typeof item == "object" ? item[this.rangeKey] : item;
        }
      },
      // 小于10前面补0，用于月份，日期，时分秒等
      formatNumber(num) {
        return +num < 10 ? "0" + num : String(num);
      },
      // 生成递进的数组
      generateArray: function(start, end) {
        start = Number(start);
        end = Number(end);
        end = end > start ? end : start;
        return [...Array(end + 1).keys()].slice(start);
      },
      getIndex: function(arr, val) {
        let index = arr.indexOf(val);
        return ~index ? index : 0;
      },
      //日期时间处理
      initTimeValue() {
        let fdate = this.defaultTime.replace(/\-/g, "/");
        fdate = fdate && fdate.indexOf("/") == -1 ? `2020/01/01 ${fdate}` : fdate;
        let arr1 = fdate.split(" ");
        let arr1_1 = arr1[0] || "";
        let arr1_2 = arr1[1] || "";
        let arr2;
        if (arr1_1.indexOf("-") > -1) {
          arr2 = arr1_1.split("-");
        } else {
          arr2 = arr1_1.split("/");
        }
        let arr3 = arr1_2.split(":");
        let dateObj = {
          year: Number(arr2[0]),
          month: Number(arr2[1]) || 1,
          day: Number(arr2[2]) || 1,
          hour: Number(arr3[0]) || 0,
          minute: Number(arr3[1]) || 0,
          second: Number(arr3[2]) || 0
        };
        for (let key in dateObj) {
          if (dateObj[key] >= 0 && dateObj[key] < 10)
            dateObj[key] = `0${dateObj[key]}`;
        }
        fdate = `${dateObj.year}/${dateObj.month}/${dateObj.day} ${dateObj.hour}:${dateObj.minute}:${dateObj.second}`;
        let time = null;
        if (fdate)
          time = new Date(fdate);
        else
          time = /* @__PURE__ */ new Date();
        this.year = time.getFullYear();
        this.month = Number(time.getMonth()) + 1;
        this.day = time.getDate();
        this.hour = time.getHours();
        this.minute = time.getMinutes();
        this.second = time.getSeconds();
      },
      init() {
        this.valueArr = [];
        this.reset = false;
        if (this.mode == "time") {
          this.initTimeValue();
          if (this.params.year) {
            this.valueArr.push(0);
            this.setYears();
          }
          if (this.params.month) {
            this.valueArr.push(0);
            this.setMonths();
          }
          if (this.params.day) {
            this.valueArr.push(0);
            this.setDays();
          }
          if (this.params.hour) {
            this.valueArr.push(0);
            this.setHours();
          }
          if (this.params.minute) {
            this.valueArr.push(0);
            this.setMinutes();
          }
          if (this.params.second) {
            this.valueArr.push(0);
            this.setSeconds();
          }
        } else if (this.mode == "region") {
          if (this.params.province) {
            this.valueArr.push(0);
            this.setProvinces();
          }
          if (this.params.city) {
            this.valueArr.push(0);
            this.setCitys();
          }
          if (this.params.area) {
            this.valueArr.push(0);
            this.setAreas();
          }
        } else if (this.mode == "selector") {
          this.valueArr = this.defaultSelector;
        } else if (this.mode == "multiSelector") {
          this.valueArr = this.defaultSelector;
          this.multiSelectorValue = this.defaultSelector;
        }
        this.$forceUpdate();
      },
      // 设置picker的某一列值
      setYears() {
        this.years = this.generateArray(this.startYear, this.endYear);
        this.valueArr.splice(this.valueArr.length - 1, 1, this.getIndex(this.years, this.year));
      },
      setMonths() {
        this.months = this.generateArray(1, 12);
        this.valueArr.splice(this.valueArr.length - 1, 1, this.getIndex(this.months, this.month));
      },
      setDays() {
        let totalDays = new Date(this.year, this.month, 0).getDate();
        this.days = this.generateArray(1, totalDays);
        let index = 0;
        if (this.params.year && this.params.month)
          index = 2;
        else if (this.params.month)
          index = 1;
        else if (this.params.year)
          index = 1;
        else
          index = 0;
        if (this.day > this.days.length)
          this.day = this.days.length;
        this.valueArr.splice(index, 1, this.getIndex(this.days, this.day));
      },
      setHours() {
        this.hours = this.generateArray(0, 23);
        this.valueArr.splice(this.valueArr.length - 1, 1, this.getIndex(this.hours, this.hour));
      },
      setMinutes() {
        this.minutes = this.generateArray(0, 59);
        this.valueArr.splice(this.valueArr.length - 1, 1, this.getIndex(this.minutes, this.minute));
      },
      setSeconds() {
        this.seconds = this.generateArray(0, 59);
        this.valueArr.splice(this.valueArr.length - 1, 1, this.getIndex(this.seconds, this.second));
      },
      setProvinces() {
        if (!this.params.province)
          return;
        let tmp = "";
        let useCode = false;
        if (this.areaCode.length) {
          tmp = this.areaCode[0];
          useCode = true;
        } else if (this.defaultRegion.length)
          tmp = this.defaultRegion[0];
        else
          tmp = 0;
        provinces.map((v, k) => {
          if (useCode ? v.code == tmp : v.name == tmp) {
            tmp = k;
          }
        });
        this.province = tmp;
        this.provinces = provinces;
        this.valueArr.splice(0, 1, this.province);
      },
      setCitys() {
        if (!this.params.city)
          return;
        let tmp = "";
        let useCode = false;
        if (this.areaCode.length) {
          tmp = this.areaCode[1];
          useCode = true;
        } else if (this.defaultRegion.length)
          tmp = this.defaultRegion[1];
        else
          tmp = 0;
        citys[this.province].map((v, k) => {
          if (useCode ? v.code == tmp : v.name == tmp) {
            tmp = k;
          }
        });
        this.city = tmp;
        this.citys = citys[this.province];
        this.valueArr.splice(1, 1, this.city);
      },
      setAreas() {
        if (!this.params.area)
          return;
        let tmp = "";
        let useCode = false;
        if (this.areaCode.length) {
          tmp = this.areaCode[2];
          useCode = true;
        } else if (this.defaultRegion.length)
          tmp = this.defaultRegion[2];
        else
          tmp = 0;
        areas[this.province][this.city].map((v, k) => {
          if (useCode ? v.code == tmp : v.name == tmp) {
            tmp = k;
          }
        });
        this.area = tmp;
        this.areas = areas[this.province][this.city];
        this.valueArr.splice(2, 1, this.area);
      },
      close() {
        this.$emit("input", false);
        this.$emit("update:modelValue", false);
      },
      // 用户更改picker的列选项
      change(e) {
        this.valueArr = e.detail.value;
        let i = 0;
        if (this.mode == "time") {
          if (this.params.year)
            this.year = this.years[this.valueArr[i++]];
          if (this.params.month)
            this.month = this.months[this.valueArr[i++]];
          if (this.params.day)
            this.day = this.days[this.valueArr[i++]];
          if (this.params.hour)
            this.hour = this.hours[this.valueArr[i++]];
          if (this.params.minute)
            this.minute = this.minutes[this.valueArr[i++]];
          if (this.params.second)
            this.second = this.seconds[this.valueArr[i++]];
        } else if (this.mode == "region") {
          if (this.params.province)
            this.province = this.valueArr[i++];
          if (this.params.city)
            this.city = this.valueArr[i++];
          if (this.params.area)
            this.area = this.valueArr[i++];
        } else if (this.mode == "multiSelector") {
          let index = null;
          this.defaultSelector.map((val, idx) => {
            if (val != e.detail.value[idx])
              index = idx;
          });
          if (index != null) {
            this.$emit("columnchange", {
              column: index,
              index: e.detail.value[index]
            });
          }
        }
      },
      // 用户点击确定按钮
      getResult(event = null) {
        let result = {};
        if (this.mode == "time") {
          if (this.params.year)
            result.year = this.formatNumber(this.year || 0);
          if (this.params.month)
            result.month = this.formatNumber(this.month || 0);
          if (this.params.day)
            result.day = this.formatNumber(this.day || 0);
          if (this.params.hour)
            result.hour = this.formatNumber(this.hour || 0);
          if (this.params.minute)
            result.minute = this.formatNumber(this.minute || 0);
          if (this.params.second)
            result.second = this.formatNumber(this.second || 0);
          if (this.params.timestamp)
            result.timestamp = this.getTimestamp();
        } else if (this.mode == "region") {
          if (this.params.province)
            result.province = provinces[this.province];
          if (this.params.city)
            result.city = citys[this.province][this.city];
          if (this.params.area)
            result.area = areas[this.province][this.city][this.area];
        } else if (this.mode == "selector") {
          result = this.valueArr;
        } else if (this.mode == "multiSelector") {
          result = this.valueArr;
        }
        if (event)
          this.$emit(event, result);
        this.close();
      },
      // 获取时间戳
      getTimestamp() {
        let time = this.year + "/" + this.month + "/" + this.day + " " + this.hour + ":" + this.minute + ":" + this.second;
        return new Date(time).getTime() / 1e3;
      },
      // 获得数据源
      getDateSource() {
        return {
          provinces,
          citys,
          areas
        };
      },
      // 智能识别省市区
      regionDiscern(addressText) {
        let address = "";
        let province = {};
        let city = {};
        let area = {};
        if (!addressText)
          return { code: -1, msg: "地址文本不能为空" };
        addressText.trim();
        let firstTwoKey = addressText.substring(0, 2);
        let provinceIndex = -1;
        for (let i = 0; i < provinces.length; i++) {
          let { code: code2, name } = provinces[i];
          if (name.indexOf(firstTwoKey) == 0) {
            province = { code: code2, name };
            provinceIndex = i;
            break;
          }
        }
        if (provinceIndex == -1)
          return { code: -1, msg: `省份【${firstTwoKey}】没有找到，请输入正确的地址` };
        let citysArr = citys[provinceIndex];
        let cityIndex = -1;
        for (let i = 0; i < citysArr.length; i++) {
          let { name, code: code2 } = citysArr[i];
          let cityName = name.substr(0, name.length - 1);
          if (addressText.indexOf(cityName) > -1) {
            city = { code: code2, name };
            cityIndex = i;
            break;
          }
        }
        if (cityIndex == -1)
          return { code: -1, msg: `地级市没有找到，请输入正确的地址` };
        let areasArr = areas[provinceIndex][cityIndex];
        let areaIndex = -1;
        for (let i = 0; i < areasArr.length; i++) {
          let { code: code2, name } = areasArr[i];
          let reg = name;
          if (name.length > 2)
            reg += `|${name.substr(0, name.length - 1)}`;
          let areaRegExp = new RegExp(reg);
          if (addressText.search(areaRegExp) > -1) {
            area = { code: code2, name };
            address = addressText.replace(new RegExp(reg), "{{~}}").split("{{~}}")[1];
            areaIndex = i;
            break;
          }
        }
        if (areaIndex == -1)
          return { code: -1, msg: "县级市没有找到，请输入正确的地址" };
        let formatted_address = `${province.name}${city.name}${area.name}${address}`;
        let res = {
          code: 0,
          msg: "ok",
          data: {
            province,
            // 省
            city,
            // 市
            area,
            // 区
            address,
            // 街道地址
            formatted_address
            // 完整格式化地址
          }
        };
        return res;
      },
      // 智能识别收货信息
      addressDiscern(text) {
        let name = "";
        let mobile2 = "";
        if (!text)
          return { code: -1, msg: "地址文本不能为空" };
        let textArr = text.split(/[^\u4e00-\u9fa5a-zA-Z0-9+-（）()]+/g).filter((v) => v.length);
        if (textArr.length != 3)
          return { code: -1, msg: "地址格式不正确，请按姓名 手机号 收货地址格式。" };
        let temp;
        let addressText;
        for (let [k, v] of textArr.entries()) {
          if (/^1[3,4,5,6,7,8,9][0-9]{9}$/.test(v)) {
            mobile2 = v;
            continue;
          }
          if (!temp) {
            temp = v;
            continue;
          }
          temp.length > v.length ? (addressText = temp, name = v) : (addressText = v, name = temp);
        }
        let positionRes = this.regionDiscern(addressText);
        if (positionRes.code !== 0)
          return positionRes;
        let res = {
          code: 0,
          msg: "ok",
          data: {
            name,
            // 姓名
            mobile: mobile2,
            // 手机号
            position: positionRes.data
            // 省市区街道信息
          }
        };
        return res;
      },
      stop() {
      }
    }
  };
  function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_popup = resolveEasycom(vue.resolveDynamicComponent("u-popup"), __easycom_5$2);
    return vue.openBlock(), vue.createBlock(_component_u_popup, {
      maskCloseAble: $props.maskCloseAble,
      mode: "bottom",
      popup: false,
      modelValue: $data.popupValue,
      "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => $data.popupValue = $event),
      length: "auto",
      safeAreaInsetBottom: $props.safeAreaInsetBottom,
      onClose: $options.close,
      "z-index": $options.uZIndex,
      blur: $props.blur
    }, {
      default: vue.withCtx(() => [
        vue.createElementVNode("view", { class: "u-datetime-picker" }, [
          vue.createElementVNode(
            "view",
            {
              class: "u-picker-header",
              onTouchmove: _cache[3] || (_cache[3] = vue.withModifiers((...args) => $options.stop && $options.stop(...args), ["stop", "prevent"]))
            },
            [
              vue.createElementVNode(
                "view",
                {
                  class: "u-btn-picker u-btn-picker--tips",
                  style: vue.normalizeStyle({ color: $props.cancelColor }),
                  "hover-class": "u-opacity",
                  "hover-stay-time": 150,
                  onClick: _cache[0] || (_cache[0] = ($event) => $options.getResult("cancel"))
                },
                vue.toDisplayString($props.cancelText),
                5
                /* TEXT, STYLE */
              ),
              vue.createElementVNode(
                "view",
                { class: "u-picker__title" },
                vue.toDisplayString($props.title),
                1
                /* TEXT */
              ),
              vue.createElementVNode(
                "view",
                {
                  class: "u-btn-picker u-btn-picker--primary",
                  style: vue.normalizeStyle({ color: $data.moving ? $props.cancelColor : $props.confirmColor }),
                  "hover-class": "u-opacity",
                  "hover-stay-time": 150,
                  onTouchmove: _cache[1] || (_cache[1] = vue.withModifiers((...args) => $options.stop && $options.stop(...args), ["stop"])),
                  onClick: _cache[2] || (_cache[2] = vue.withModifiers(($event) => $options.getResult("confirm"), ["stop"]))
                },
                vue.toDisplayString($props.confirmText),
                37
                /* TEXT, STYLE, NEED_HYDRATION */
              )
            ],
            32
            /* NEED_HYDRATION */
          ),
          vue.createElementVNode("view", { class: "u-picker-body" }, [
            $props.mode == "region" ? (vue.openBlock(), vue.createElementBlock("picker-view", {
              key: 0,
              value: $data.valueArr,
              onChange: _cache[4] || (_cache[4] = (...args) => $options.change && $options.change(...args)),
              class: "u-picker-view",
              onPickstart: _cache[5] || (_cache[5] = (...args) => $options.pickstart && $options.pickstart(...args)),
              onPickend: _cache[6] || (_cache[6] = (...args) => $options.pickend && $options.pickend(...args))
            }, [
              $options.showColumnCom && $props.params.province ? (vue.openBlock(), vue.createElementBlock("picker-view-column", { key: 0 }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($data.provinces, (item, index) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      class: "u-column-item",
                      key: index
                    }, [
                      vue.createElementVNode(
                        "view",
                        { class: "u-line-1" },
                        vue.toDisplayString(item.name),
                        1
                        /* TEXT */
                      )
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])) : vue.createCommentVNode("v-if", true),
              $options.showColumnCom && $props.params.city ? (vue.openBlock(), vue.createElementBlock("picker-view-column", { key: 1 }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($data.citys, (item, index) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      class: "u-column-item",
                      key: index
                    }, [
                      vue.createElementVNode(
                        "view",
                        { class: "u-line-1" },
                        vue.toDisplayString(item.name),
                        1
                        /* TEXT */
                      )
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])) : vue.createCommentVNode("v-if", true),
              $options.showColumnCom && $props.params.area ? (vue.openBlock(), vue.createElementBlock("picker-view-column", { key: 2 }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($data.areas, (item, index) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      class: "u-column-item",
                      key: index
                    }, [
                      vue.createElementVNode(
                        "view",
                        { class: "u-line-1" },
                        vue.toDisplayString(item.name),
                        1
                        /* TEXT */
                      )
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])) : vue.createCommentVNode("v-if", true)
            ], 40, ["value"])) : $props.mode == "time" ? (vue.openBlock(), vue.createElementBlock("picker-view", {
              key: 1,
              value: $data.valueArr,
              onChange: _cache[7] || (_cache[7] = (...args) => $options.change && $options.change(...args)),
              class: "u-picker-view",
              onPickstart: _cache[8] || (_cache[8] = (...args) => $options.pickstart && $options.pickstart(...args)),
              onPickend: _cache[9] || (_cache[9] = (...args) => $options.pickend && $options.pickend(...args))
            }, [
              $options.showColumnCom && $props.params.year ? (vue.openBlock(), vue.createElementBlock("picker-view-column", { key: 0 }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($data.years, (item, index) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      class: "u-column-item",
                      key: index
                    }, [
                      vue.createTextVNode(
                        vue.toDisplayString(item) + " ",
                        1
                        /* TEXT */
                      ),
                      $props.showTimeTag ? (vue.openBlock(), vue.createElementBlock("text", {
                        key: 0,
                        class: "u-text"
                      }, "年")) : vue.createCommentVNode("v-if", true)
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])) : vue.createCommentVNode("v-if", true),
              $options.showColumnCom && $props.params.month ? (vue.openBlock(), vue.createElementBlock("picker-view-column", { key: 1 }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($data.months, (item, index) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      class: "u-column-item",
                      key: index
                    }, [
                      vue.createTextVNode(
                        vue.toDisplayString($options.formatNumber(item)) + " ",
                        1
                        /* TEXT */
                      ),
                      $props.showTimeTag ? (vue.openBlock(), vue.createElementBlock("text", {
                        key: 0,
                        class: "u-text"
                      }, "月")) : vue.createCommentVNode("v-if", true)
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])) : vue.createCommentVNode("v-if", true),
              $options.showColumnCom && $props.params.day ? (vue.openBlock(), vue.createElementBlock("picker-view-column", { key: 2 }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($data.days, (item, index) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      class: "u-column-item",
                      key: index
                    }, [
                      vue.createTextVNode(
                        vue.toDisplayString($options.formatNumber(item)) + " ",
                        1
                        /* TEXT */
                      ),
                      $props.showTimeTag ? (vue.openBlock(), vue.createElementBlock("text", {
                        key: 0,
                        class: "u-text"
                      }, "日")) : vue.createCommentVNode("v-if", true)
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])) : vue.createCommentVNode("v-if", true),
              $options.showColumnCom && $props.params.hour ? (vue.openBlock(), vue.createElementBlock("picker-view-column", { key: 3 }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($data.hours, (item, index) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      class: "u-column-item",
                      key: index
                    }, [
                      vue.createTextVNode(
                        vue.toDisplayString($options.formatNumber(item)) + " ",
                        1
                        /* TEXT */
                      ),
                      $props.showTimeTag ? (vue.openBlock(), vue.createElementBlock("text", {
                        key: 0,
                        class: "u-text"
                      }, "时")) : vue.createCommentVNode("v-if", true)
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])) : vue.createCommentVNode("v-if", true),
              $options.showColumnCom && $props.params.minute ? (vue.openBlock(), vue.createElementBlock("picker-view-column", { key: 4 }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($data.minutes, (item, index) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      class: "u-column-item",
                      key: index
                    }, [
                      vue.createTextVNode(
                        vue.toDisplayString($options.formatNumber(item)) + " ",
                        1
                        /* TEXT */
                      ),
                      $props.showTimeTag ? (vue.openBlock(), vue.createElementBlock("text", {
                        key: 0,
                        class: "u-text"
                      }, "分")) : vue.createCommentVNode("v-if", true)
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])) : vue.createCommentVNode("v-if", true),
              $options.showColumnCom && $props.params.second ? (vue.openBlock(), vue.createElementBlock("picker-view-column", { key: 5 }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($data.seconds, (item, index) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      class: "u-column-item",
                      key: index
                    }, [
                      vue.createTextVNode(
                        vue.toDisplayString($options.formatNumber(item)) + " ",
                        1
                        /* TEXT */
                      ),
                      $props.showTimeTag ? (vue.openBlock(), vue.createElementBlock("text", {
                        key: 0,
                        class: "u-text"
                      }, "秒")) : vue.createCommentVNode("v-if", true)
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])) : vue.createCommentVNode("v-if", true)
            ], 40, ["value"])) : $props.mode == "selector" ? (vue.openBlock(), vue.createElementBlock("picker-view", {
              key: 2,
              value: $data.valueArr,
              onChange: _cache[10] || (_cache[10] = (...args) => $options.change && $options.change(...args)),
              class: "u-picker-view",
              onPickstart: _cache[11] || (_cache[11] = (...args) => $options.pickstart && $options.pickstart(...args)),
              onPickend: _cache[12] || (_cache[12] = (...args) => $options.pickend && $options.pickend(...args))
            }, [
              $options.showColumnCom ? (vue.openBlock(), vue.createElementBlock("picker-view-column", { key: 0 }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList($props.range, (item, index) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      class: "u-column-item",
                      key: index
                    }, [
                      vue.createElementVNode(
                        "view",
                        { class: "u-line-1" },
                        vue.toDisplayString($options.getItemValue(item, "selector")),
                        1
                        /* TEXT */
                      )
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ])) : vue.createCommentVNode("v-if", true)
            ], 40, ["value"])) : $props.mode == "multiSelector" ? (vue.openBlock(), vue.createElementBlock("picker-view", {
              key: 3,
              value: $data.valueArr,
              onChange: _cache[13] || (_cache[13] = (...args) => $options.change && $options.change(...args)),
              class: "u-picker-view",
              onPickstart: _cache[14] || (_cache[14] = (...args) => $options.pickstart && $options.pickstart(...args)),
              onPickend: _cache[15] || (_cache[15] = (...args) => $options.pickend && $options.pickend(...args))
            }, [
              $options.showColumnCom ? (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                { key: 0 },
                vue.renderList($props.range, (item, index) => {
                  return vue.openBlock(), vue.createElementBlock("picker-view-column", { key: index }, [
                    (vue.openBlock(true), vue.createElementBlock(
                      vue.Fragment,
                      null,
                      vue.renderList(item, (item1, index1) => {
                        return vue.openBlock(), vue.createElementBlock("view", {
                          class: "u-column-item",
                          key: index1
                        }, [
                          vue.createElementVNode(
                            "view",
                            { class: "u-line-1" },
                            vue.toDisplayString($options.getItemValue(item1, "multiSelector")),
                            1
                            /* TEXT */
                          )
                        ]);
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    ))
                  ]);
                }),
                128
                /* KEYED_FRAGMENT */
              )) : vue.createCommentVNode("v-if", true)
            ], 40, ["value"])) : vue.createCommentVNode("v-if", true)
          ])
        ])
      ]),
      _: 1
      /* STABLE */
    }, 8, ["maskCloseAble", "modelValue", "safeAreaInsetBottom", "onClose", "z-index", "blur"]);
  }
  const __easycom_5$1 = /* @__PURE__ */ _export_sfc(_sfc_main$D, [["render", _sfc_render$9], ["__scopeId", "data-v-e8b59df9"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-picker/u-picker.vue"]]);
  const _sfc_main$C = {
    name: "u-line-progress",
    props: {
      // 两端是否显示半圆形
      round: {
        type: Boolean,
        default: true
      },
      // 主题颜色
      type: {
        type: String,
        default: ""
      },
      // 激活部分的颜色
      activeColor: {
        type: String,
        default: "#19be6b"
      },
      inactiveColor: {
        type: String,
        default: "#ececec"
      },
      // 进度百分比，数值
      percent: {
        type: Number,
        default: 0
      },
      // 是否在进度条内部显示百分比的值
      showPercent: {
        type: Boolean,
        default: true
      },
      // 进度条的高度，单位rpx
      height: {
        type: [Number, String],
        default: 28
      },
      // 是否显示条纹
      striped: {
        type: Boolean,
        default: false
      },
      // 条纹是否显示活动状态
      stripedActive: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {};
    },
    computed: {
      progressStyle() {
        let style = {};
        style.width = this.percent + "%";
        if (this.activeColor)
          style.backgroundColor = this.activeColor;
        return style;
      }
    },
    methods: {}
  };
  function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: "u-progress",
        style: vue.normalizeStyle({
          borderRadius: $props.round ? "100rpx" : 0,
          height: $props.height + "rpx",
          backgroundColor: $props.inactiveColor
        })
      },
      [
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass([[
              $props.type ? `u-type-${$props.type}-bg` : "",
              $props.striped ? "u-striped" : "",
              $props.striped && $props.stripedActive ? "u-striped-active" : ""
            ], "u-active"]),
            style: vue.normalizeStyle([$options.progressStyle])
          },
          [
            _ctx.$slots.default || _ctx.$slots.$default ? vue.renderSlot(_ctx.$slots, "default", { key: 0 }, void 0, true) : $props.showPercent ? (vue.openBlock(), vue.createElementBlock(
              vue.Fragment,
              { key: 1 },
              [
                vue.createTextVNode(
                  vue.toDisplayString($props.percent + "%"),
                  1
                  /* TEXT */
                )
              ],
              64
              /* STABLE_FRAGMENT */
            )) : vue.createCommentVNode("v-if", true)
          ],
          6
          /* CLASS, STYLE */
        )
      ],
      4
      /* STYLE */
    );
  }
  const __easycom_1 = /* @__PURE__ */ _export_sfc(_sfc_main$C, [["render", _sfc_render$8], ["__scopeId", "data-v-af2fba7d"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-line-progress/u-line-progress.vue"]]);
  const _sfc_main$B = {
    name: "u-upload",
    emits: ["update:file-list", "on-oversize", "on-list-change", "on-preview", "on-remove", "on-success", "on-change", "on-error", "on-progress", "on-uploaded", "on-choose-complete", "on-choose-fail"],
    props: {
      //是否显示组件自带的图片预览功能
      showUploadList: {
        type: Boolean,
        default: true
      },
      // 后端地址
      action: {
        type: String,
        default: ""
      },
      // 最大上传数量
      maxCount: {
        type: [String, Number],
        default: 52
      },
      //  是否显示进度条
      showProgress: {
        type: Boolean,
        default: true
      },
      // 是否启用
      disabled: {
        type: Boolean,
        default: false
      },
      // 预览上传的图片时的裁剪模式，和image组件mode属性一致
      imageMode: {
        type: String,
        default: "aspectFill"
      },
      // 头部信息
      header: {
        type: Object,
        default() {
          return {};
        }
      },
      // 额外携带的参数
      formData: {
        type: Object,
        default() {
          return {};
        }
      },
      // 上传的文件字段名
      name: {
        type: String,
        default: "file"
      },
      // 所选的图片的尺寸, 可选值为original compressed
      sizeType: {
        type: Array,
        default() {
          return ["original", "compressed"];
        }
      },
      sourceType: {
        type: Array,
        default() {
          return ["album", "camera"];
        }
      },
      // 是否在点击预览图后展示全屏图片预览
      previewFullImage: {
        type: Boolean,
        default: true
      },
      // 是否开启图片多选，部分安卓机型不支持
      multiple: {
        type: Boolean,
        default: true
      },
      // 是否展示删除按钮
      deletable: {
        type: Boolean,
        default: true
      },
      // 文件大小限制，单位为byte
      maxSize: {
        type: [String, Number],
        default: Number.MAX_VALUE
      },
      // 显示已上传的文件列表
      fileList: {
        type: Array,
        default() {
          return [];
        }
      },
      // 上传区域的提示文字
      uploadText: {
        type: String,
        default: "选择图片"
      },
      // 是否自动上传
      autoUpload: {
        type: Boolean,
        default: true
      },
      // 是否显示toast消息提示
      showTips: {
        type: Boolean,
        default: true
      },
      // 是否通过slot自定义传入选择图标的按钮
      customBtn: {
        type: Boolean,
        default: false
      },
      // 内部预览图片区域和选择图片按钮的区域宽度
      width: {
        type: [String, Number],
        default: 200
      },
      // 内部预览图片区域和选择图片按钮的区域高度
      height: {
        type: [String, Number],
        default: 200
      },
      // 右上角关闭按钮的背景颜色
      delBgColor: {
        type: String,
        default: "#fa3534"
      },
      // 右上角关闭按钮的叉号图标的颜色
      delColor: {
        type: String,
        default: "#ffffff"
      },
      // 右上角删除图标名称，只能为uView内置图标
      delIcon: {
        type: String,
        default: "close"
      },
      // 右下角成功图标名称，只能为uView内置图标
      successIcon: {
        type: String,
        default: "checkbox-mark"
      },
      // 右下角成功的叉号图标的颜色
      successColor: {
        type: String,
        default: "#ffffff"
      },
      // 如果上传后的返回值为json字符串，是否自动转json
      toJson: {
        type: Boolean,
        default: true
      },
      // 上传前的钩子，每个文件上传前都会执行
      beforeUpload: {
        type: Function,
        default: null
      },
      // 移除文件前的钩子
      beforeRemove: {
        type: Function,
        default: null
      },
      // 允许上传的图片后缀
      limitType: {
        type: Array,
        default() {
          return ["png", "jpg", "jpeg", "webp", "gif", "image"];
        }
      },
      // 在各个回调事件中的最后一个参数返回，用于区别是哪一个组件的事件
      index: {
        type: [Number, String],
        default: ""
      }
    },
    mounted() {
    },
    data() {
      return {
        lists: [],
        isInCount: true,
        uploading: false
      };
    },
    watch: {
      fileList: {
        immediate: true,
        handler(val) {
          let that = this;
          let lists = JSON.parse(JSON.stringify(that.lists));
          val.map((value) => {
            let tmp = lists.some((val2) => {
              return val2.url == value.url;
            });
            if (!tmp) {
              lists.push({ url: value.url, error: false, progress: 100 });
            }
          });
          that.lists = JSON.parse(JSON.stringify(lists));
        }
      },
      // 监听lists的变化，发出事件
      lists: {
        deep: true,
        handler(n) {
          this.$emit("update:file-list", n);
          this.$emit("on-list-change", n, this.index);
        }
      }
    },
    methods: {
      // 清除列表
      clear() {
        this.lists = [];
      },
      // 重新上传队列中上传失败的所有文件
      reUpload() {
        this.uploadFile();
      },
      // 选择图片
      selectFile() {
        let that = this;
        if (that.disabled)
          return;
        const { name = "", maxCount, multiple, maxSize, sizeType, camera, compressed, maxDuration, sourceType } = that;
        let chooseFile = null;
        let lists = JSON.parse(JSON.stringify(that.lists));
        const newMaxCount = maxCount - lists.length;
        chooseFile = new Promise((resolve, reject) => {
          uni.chooseImage({
            count: multiple ? newMaxCount > 9 ? 9 : newMaxCount : 1,
            sourceType,
            sizeType,
            success: resolve,
            fail: reject
          });
        });
        chooseFile.then((res) => {
          let listOldLength = that.lists.length;
          res.tempFiles.map((val, index) => {
            if (!that.checkFileExt(val))
              return;
            if (!multiple && index >= 1)
              return;
            if (val.size > maxSize) {
              that.$emit("on-oversize", val, that.lists, that.index);
              that.showToast("超出允许的文件大小");
            } else {
              if (maxCount <= lists.length) {
                that.$emit("on-exceed", val, that.lists, that.index);
                that.showToast("超出最大允许的文件个数");
                return;
              }
              lists.push({
                url: val.path,
                progress: 0,
                error: false,
                file: val
              });
            }
          });
          this.deepClone(lists, that.lists);
          that.$emit("on-choose-complete", that.lists, that.index);
          if (that.autoUpload)
            that.uploadFile(listOldLength);
        }).catch((error) => {
          that.$emit("on-choose-fail", error);
        });
      },
      // 提示用户消息
      showToast(message, force = false) {
        if (this.showTips || force) {
          uni.showToast({
            title: message,
            icon: "none"
          });
        }
      },
      // 该方法供用户通过ref调用，手动上传
      upload() {
        this.uploadFile();
      },
      // 对失败的图片重新上传
      retry(index) {
        this.lists[index].progress = 0;
        this.lists[index].error = false;
        this.lists[index].response = null;
        uni.showLoading({
          title: "重新上传"
        });
        this.uploadFile(index);
      },
      // 上传图片
      async uploadFile(index = 0) {
        if (this.disabled)
          return;
        if (this.uploading)
          return;
        if (index >= this.lists.length) {
          this.$emit("on-uploaded", this.lists, this.index);
          return;
        }
        if (this.lists[index].progress == 100) {
          if (this.autoUpload == false)
            this.uploadFile(index + 1);
          return;
        }
        if (this.beforeUpload && typeof this.beforeUpload === "function") {
          let beforeResponse = this.beforeUpload.bind(this.$u.$parent.call(this))(index, this.lists);
          if (!!beforeResponse && typeof beforeResponse.then === "function") {
            await beforeResponse.then((res) => {
            }).catch((err) => {
              return this.uploadFile(index + 1);
            });
          } else if (beforeResponse === false) {
            return this.uploadFile(index + 1);
          } else
            ;
        }
        if (!this.action) {
          this.showToast("请配置上传地址", true);
          return;
        }
        this.lists[index].error = false;
        this.uploading = true;
        const task = uni.uploadFile({
          url: this.action,
          filePath: this.lists[index].url,
          name: this.name,
          formData: this.formData,
          header: this.header,
          success: (res) => {
            let data = this.toJson && this.$u.test.jsonString(res.data) ? JSON.parse(res.data) : res.data;
            if (![200, 201, 204].includes(res.statusCode)) {
              this.uploadError(index, data);
            } else {
              this.lists[index].response = data;
              this.lists[index].progress = 100;
              this.lists[index].error = false;
              this.$emit("on-success", data, index, this.lists, this.index);
            }
          },
          fail: (e) => {
            this.uploadError(index, e);
          },
          complete: (res) => {
            uni.hideLoading();
            this.uploading = false;
            this.uploadFile(index + 1);
            this.$emit("on-change", res, index, this.lists, this.index);
          }
        });
        task.onProgressUpdate((res) => {
          if (res.progress > 0) {
            this.lists[index].progress = res.progress;
            this.$emit("on-progress", res, index, this.lists, this.index);
          }
        });
      },
      // 上传失败
      uploadError(index, err) {
        this.lists[index].progress = 0;
        this.lists[index].error = true;
        this.lists[index].response = null;
        this.$emit("on-error", err, index, this.lists, this.index);
        this.showToast("上传失败，请重试");
      },
      // 删除一个图片
      deleteItem(index) {
        uni.showModal({
          title: "提示",
          content: "您确定要删除此项吗？",
          success: async (res) => {
            if (res.confirm) {
              if (this.beforeRemove && typeof this.beforeRemove === "function") {
                let beforeResponse = this.beforeRemove.bind(this.$u.$parent.call(this))(index, this.lists);
                if (!!beforeResponse && typeof beforeResponse.then === "function") {
                  await beforeResponse.then((res2) => {
                    this.handlerDeleteItem(index);
                  }).catch((err) => {
                    this.showToast("已终止移除");
                  });
                } else if (beforeResponse === false) {
                  this.showToast("已终止移除");
                } else {
                  this.handlerDeleteItem(index);
                }
              } else {
                this.handlerDeleteItem(index);
              }
            }
          }
        });
      },
      // 执行移除图片的动作，上方代码只是判断是否可以移除
      handlerDeleteItem(index) {
        if (this.lists[index].progress < 100 && this.lists[index].progress > 0) {
          typeof this.lists[index].uploadTask != "undefined" && this.lists[index].uploadTask.abort();
        }
        this.lists.splice(index, 1);
        this.$forceUpdate();
        this.$emit("on-remove", index, this.lists, this.index);
      },
      // 用户通过ref手动的形式，移除一张图片
      remove(index) {
        if (index >= 0 && index < this.lists.length) {
          this.lists.splice(index, 1);
          this.$emit("on-list-change", this.lists, this.index);
        }
      },
      // 预览图片
      doPreviewImage(url2, index) {
        if (!this.previewFullImage) {
          this.$emit("on-preview", url2, this.lists, this.index);
          return;
        }
        const images = this.lists.map((item) => item.url || item.path);
        uni.previewImage({
          urls: images,
          current: url2,
          success: () => {
            this.$emit("on-preview", url2, this.lists, this.index);
          },
          fail: () => {
            uni.showToast({
              title: "预览图片失败",
              icon: "none"
            });
          }
        });
      },
      // 判断文件后缀是否允许
      checkFileExt(file) {
        let noArrowExt = false;
        let fileExt = "";
        const reg = /.+\./;
        fileExt = file.path.replace(reg, "").toLowerCase();
        noArrowExt = this.limitType.some((ext) => {
          return ext.toLowerCase() === fileExt;
        });
        if (!noArrowExt)
          this.showToast(`不允许选择${fileExt}格式的文件`);
        return noArrowExt;
      },
      // 深拷贝
      deepClone(obj, newObj) {
        for (let k in obj) {
          const value = obj[k];
          if (Array.isArray(value)) {
            newObj[k] = [];
            this.deepClone(value, newObj[k]);
          } else if (value !== null && typeof value === "object") {
            newObj[k] = {};
            this.deepClone(value, newObj[k]);
          } else {
            newObj[k] = value;
          }
        }
      }
    }
  };
  function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_icon = resolveEasycom(vue.resolveDynamicComponent("u-icon"), __easycom_0$6);
    const _component_u_line_progress = resolveEasycom(vue.resolveDynamicComponent("u-line-progress"), __easycom_1);
    return !$props.disabled ? (vue.openBlock(), vue.createElementBlock("view", {
      key: 0,
      class: "u-upload"
    }, [
      $props.showUploadList ? (vue.openBlock(true), vue.createElementBlock(
        vue.Fragment,
        { key: 0 },
        vue.renderList($data.lists, (item, index) => {
          return vue.openBlock(), vue.createElementBlock(
            "view",
            {
              class: "u-list-item u-preview-wrap",
              key: index,
              style: vue.normalizeStyle({
                width: _ctx.$u.addUnit($props.width),
                height: _ctx.$u.addUnit($props.height)
              })
            },
            [
              $props.deletable ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 0,
                class: "u-delete-icon",
                onClick: vue.withModifiers(($event) => $options.deleteItem(index), ["stop"]),
                style: vue.normalizeStyle({
                  background: $props.delBgColor
                })
              }, [
                vue.createVNode(_component_u_icon, {
                  class: "u-icon",
                  name: $props.delIcon,
                  size: "20",
                  color: $props.delColor
                }, null, 8, ["name", "color"])
              ], 12, ["onClick"])) : vue.createCommentVNode("v-if", true),
              vue.createCommentVNode(' <view\r\n				v-if="item.progress >= 100"\r\n				class="u-success-icon"\r\n			>\r\n				<u-icon class="u-icon" :name="successIcon" size="20" :color="successColor"></u-icon>\r\n			</view> '),
              $props.showProgress && item.progress > 0 && item.progress != 100 && !item.error ? (vue.openBlock(), vue.createBlock(_component_u_line_progress, {
                key: 1,
                "show-percent": false,
                height: "16",
                class: "u-progress",
                percent: item.progress
              }, null, 8, ["percent"])) : vue.createCommentVNode("v-if", true),
              item.error ? (vue.openBlock(), vue.createElementBlock("view", {
                key: 2,
                onClick: vue.withModifiers(($event) => $options.retry(index), ["stop"]),
                class: "u-error-btn"
              }, "点击重试", 8, ["onClick"])) : vue.createCommentVNode("v-if", true),
              !item.isImage ? (vue.openBlock(), vue.createElementBlock("image", {
                key: 3,
                onClick: vue.withModifiers(($event) => $options.doPreviewImage(item.url || item.path, index), ["stop"]),
                class: "u-preview-image",
                src: item.url || item.path,
                mode: $props.imageMode
              }, null, 8, ["onClick", "src", "mode"])) : vue.createCommentVNode("v-if", true)
            ],
            4
            /* STYLE */
          );
        }),
        128
        /* KEYED_FRAGMENT */
      )) : vue.createCommentVNode("v-if", true),
      vue.renderSlot(_ctx.$slots, "file", { file: $data.lists }, void 0, true),
      $props.maxCount > $data.lists.length ? (vue.openBlock(), vue.createElementBlock("view", {
        key: 1,
        style: { "display": "inline-block" },
        onClick: _cache[0] || (_cache[0] = (...args) => $options.selectFile && $options.selectFile(...args))
      }, [
        vue.renderSlot(_ctx.$slots, "addBtn", {}, void 0, true),
        !$props.customBtn ? (vue.openBlock(), vue.createElementBlock(
          "view",
          {
            key: 0,
            class: "u-list-item u-add-wrap",
            "hover-class": "u-add-wrap__hover",
            "hover-stay-time": "150",
            style: vue.normalizeStyle({
              width: _ctx.$u.addUnit($props.width),
              height: _ctx.$u.addUnit($props.height)
            })
          },
          [
            vue.createVNode(_component_u_icon, {
              name: "plus",
              class: "u-add-btn",
              size: "40"
            }),
            vue.createElementVNode(
              "view",
              { class: "u-add-tips" },
              vue.toDisplayString($props.uploadText),
              1
              /* TEXT */
            )
          ],
          4
          /* STYLE */
        )) : vue.createCommentVNode("v-if", true)
      ])) : vue.createCommentVNode("v-if", true)
    ])) : vue.createCommentVNode("v-if", true);
  }
  const __easycom_0 = /* @__PURE__ */ _export_sfc(_sfc_main$B, [["render", _sfc_render$7], ["__scopeId", "data-v-e7606f58"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-upload/u-upload.vue"]]);
  const type = "annexpic";
  const _sfc_main$A = {
    __name: "cityk-upload",
    props: {
      value: {
        type: Array,
        default: () => []
      },
      disabled: {
        type: Boolean,
        default: false
      },
      watermark: {
        type: Boolean,
        default: false
      },
      watermarkContent: {
        type: Array,
        default: () => []
      }
    },
    emits: ["update:value"],
    setup(__props, { emit: __emit }) {
      const props = __props;
      const lists = vue.ref([]);
      const emits = __emit;
      const fileList = vue.ref([]);
      const baseURL2 = vue.inject("define").baseURL;
      const comUploadUrl = vue.inject("define").comUploadUrl;
      const uploadHeaders = {
        Authorization: uni.getStorageSync("token")
      };
      vue.onMounted(() => {
        setTimeout(() => {
          fileList.value = props.value;
          formatAppLog("log", "at components/cityk-upload.vue:46", fileList.value, "update");
          lists.value = fileList.value.map((item) => {
            let temp = { url: baseURL2 + item.url };
            return temp;
          });
        }, 500);
      });
      const syUrl = vue.ref();
      const cvHeight = vue.ref();
      const cvWidth = vue.ref();
      async function handleListChanged(index, list) {
        formatAppLog("log", "at components/cityk-upload.vue:57", list, index);
        if (props.watermark && uni.getStorageSync("watermarkFlag")) {
          let fn = new Promise((resolve) => {
            uni.getImageInfo({
              src: list[index].url,
              success: function(img) {
                const timer1 = setTimeout(() => {
                  cvHeight.value = img.height;
                  cvWidth.value = img.width;
                  const timer2 = setTimeout(() => {
                    imgToCanvas(list[index].url, img.width, img.height, props.watermarkContent);
                    const timer3 = setTimeout(() => {
                      console.log();
                      syUrl.value;
                      list[index].url = syUrl.value;
                      formatAppLog("log", "at components/cityk-upload.vue:95", "====this", list[index].url);
                      resolve();
                      clearTimeout(timer3);
                    }, 100);
                    clearTimeout(timer2);
                  }, 100);
                  clearTimeout(timer1);
                }, 100);
              }
            });
          });
          await fn;
        }
      }
      function imgToCanvas(url2, width, height, textArr) {
        const ctx = uni.createCanvasContext("cid");
        ctx.font = "30px Arial";
        ctx.fillStyle = "#adb5bd";
        ctx.drawImage(url2, 0, 0, width, height);
        const watermarkValue = uni.getStorageSync("watermarkValue");
        watermarkValue.forEach((item) => {
          if (item.name === "项目名称") {
            item.value = uni.getStorageSync("projectName");
          } else if (item.name === "日期") {
            item.value = getCurrentTime();
          } else if (item.name === "经纬度") {
            item.value = uni.getStorageSync("latAndLon");
          } else if (item.name === "人员") {
            item.value = uni.getStorageSync("userInfo").userName;
          }
        });
        uni.setStorageSync("watermarkValue", watermarkValue);
        let tempIdx = 0;
        watermarkValue.forEach((item) => {
          if (item.flag) {
            ctx.fillText(`${item.name}:${item.value}`, 30, height - 50 - tempIdx * 40);
            ++tempIdx;
          }
        });
        ctx.draw();
        const timer4 = setTimeout(() => {
          uni.canvasToTempFilePath({
            canvasId: "cid",
            fileType: "jpg",
            success: (res) => {
              syUrl.value = res.tempFilePath;
              formatAppLog("log", "at components/cityk-upload.vue:144", res);
            }
          }, this);
          clearTimeout(timer4);
        }, 100);
      }
      function onSuccess(data, index, _lists, name) {
        if (data.code == 200) {
          fileList.value.push({
            name: data.data.name,
            fileId: data.data.name,
            url: data.data.url,
            fullName: _lists[index].file.name,
            filePath: data.data.name,
            fileExtenSion: _lists[index].file.type,
            fileSize: _lists[index].file.size
          });
          lists.value.push({
            name: data.data.name,
            fileId: data.data.name,
            url: data.data.url,
            fullName: _lists[index].file.name,
            filePath: data.data.name,
            fileExtenSion: _lists[index].file.type,
            fileSize: _lists[index].file.size
          });
          emits("update:value", fileList.value);
        }
      }
      const uploadRef = vue.ref(null);
      function onRemove(index, lists2) {
        formatAppLog("log", "at components/cityk-upload.vue:212", index);
        fileList.value.splice(index, 1);
        emits("update:value", fileList.value);
      }
      return (_ctx, _cache) => {
        const _component_u_upload = resolveEasycom(vue.resolveDynamicComponent("u-upload"), __easycom_0);
        return vue.openBlock(), vue.createElementBlock("view", { class: "jnpf-upload" }, [
          vue.createVNode(_component_u_upload, {
            ref_key: "uploadRef",
            ref: uploadRef,
            "before-upload": handleListChanged,
            "file-list": lists.value,
            action: vue.unref(comUploadUrl) + type,
            header: uploadHeaders,
            onOnSuccess: onSuccess,
            onOnRemove: onRemove
          }, null, 8, ["file-list", "action"]),
          vue.createElementVNode("view", { style: { "width": "0px", "height": "0px", "overflow": "hidden" } }, [
            vue.createElementVNode(
              "canvas",
              {
                "canvas-id": "cid",
                style: vue.normalizeStyle({ height: `${cvHeight.value}px`, width: `${cvWidth.value}px` })
              },
              null,
              4
              /* STYLE */
            )
          ])
        ]);
      };
    }
  };
  const upload = /* @__PURE__ */ _export_sfc(_sfc_main$A, [["__scopeId", "data-v-9cf2ef2b"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/components/cityk-upload.vue"]]);
  const _sfc_main$z = {
    name: "u-radio",
    emits: ["change"],
    props: {
      // radio的名称
      name: {
        type: [String, Number],
        default: ""
      },
      // 组件的整体大小
      size: {
        type: [String, Number],
        default: 34
      },
      // 形状，square为方形，circle为原型
      shape: {
        type: String,
        default: ""
      },
      // 是否禁用
      disabled: {
        type: [String, Boolean],
        default: ""
      },
      // 是否禁止点击提示语选中复选框
      labelDisabled: {
        type: [String, Boolean],
        default: ""
      },
      // 选中状态下的颜色，如设置此值，将会覆盖parent的activeColor值
      activeColor: {
        type: String,
        default: ""
      },
      // 图标的大小，单位rpx
      iconSize: {
        type: [String, Number],
        default: ""
      },
      // label的字体大小，rpx单位
      labelSize: {
        type: [String, Number],
        default: ""
      }
    },
    data() {
      return {
        // 父组件的默认值，因为头条小程序不支持在computed中使用this.parent.shape的形式
        // 故只能使用如此方法
        parentData: {
          iconSize: null,
          labelDisabled: null,
          disabled: null,
          shape: null,
          activeColor: null,
          size: null,
          width: null,
          height: null,
          value: null,
          wrap: null,
          modelValue: null
        }
      };
    },
    created() {
      this.parent = false;
      this.updateParentData();
      this.parent.children.push(this);
    },
    computed: {
      // 是否禁用，如果父组件u-raios-group禁用的话，将会忽略子组件的配置
      elDisabled() {
        return this.disabled !== "" ? this.disabled : this.parentData.disabled !== null ? this.parentData.disabled : false;
      },
      // 是否禁用label点击
      elLabelDisabled() {
        return this.labelDisabled !== "" ? this.labelDisabled : this.parentData.labelDisabled !== null ? this.parentData.labelDisabled : false;
      },
      // 组件尺寸，对应size的值，默认值为34rpx
      elSize() {
        return this.size ? this.size : this.parentData.size ? this.parentData.size : 34;
      },
      // 组件的勾选图标的尺寸，默认20
      elIconSize() {
        return this.iconSize ? this.iconSize : this.parentData.iconSize ? this.parentData.iconSize : 20;
      },
      // 组件选中激活时的颜色
      elActiveColor() {
        return this.activeColor ? this.activeColor : this.parentData.activeColor ? this.parentData.activeColor : "primary";
      },
      // 组件的形状
      elShape() {
        return this.shape ? this.shape : this.parentData.shape ? this.parentData.shape : "circle";
      },
      // 设置radio的状态，要求radio的name等于parent的value时才为选中状态
      iconStyle() {
        let style = {};
        if (this.elActiveColor && this.parentData.value === this.name && !this.elDisabled) {
          style.borderColor = this.elActiveColor;
          style.backgroundColor = this.elActiveColor;
        }
        style.width = this.$u.addUnit(this.elSize);
        style.height = this.$u.addUnit(this.elSize);
        return style;
      },
      iconColor() {
        return this.name === this.parentData.value ? "#ffffff" : "transparent";
      },
      iconClass() {
        let classes = [];
        classes.push("u-radio__icon-wrap--" + this.elShape);
        if (this.name === this.parentData.value)
          classes.push("u-radio__icon-wrap--checked");
        if (this.elDisabled)
          classes.push("u-radio__icon-wrap--disabled");
        if (this.name === this.parentData.value && this.elDisabled)
          classes.push("u-radio__icon-wrap--disabled--checked");
        return classes.join(" ");
      },
      radioStyle() {
        let style = {};
        if (this.parentData.width) {
          style.width = this.$u.addUnit(this.parentData.width);
          style.flex = `0 0 ${this.$u.addUnit(this.parentData.width)}`;
        }
        if (this.parentData.wrap) {
          style.width = "100%";
          style.flex = "0 0 100%";
        }
        return style;
      }
    },
    methods: {
      updateParentData() {
        this.getParentData("u-radio-group");
      },
      onClickLabel() {
        if (!this.elLabelDisabled && !this.elDisabled) {
          this.setRadioCheckedStatus();
        }
      },
      toggle() {
        if (!this.elDisabled) {
          this.setRadioCheckedStatus();
        }
      },
      emitEvent() {
        if (this.parentData.value != this.name)
          this.$emit("change", this.name);
      },
      // 改变组件选中状态
      // 这里的改变的依据是，更改本组件的parentData.value值为本组件的name值，同时通过父组件遍历所有u-radio实例
      // 将本组件外的其他u-radio的parentData.value都设置为空(由computed计算后，都被取消选中状态)，因而只剩下一个为选中状态
      setRadioCheckedStatus() {
        this.emitEvent();
        if (this.parent) {
          this.parent.setValue(this.name);
          this.parentData.value = this.name;
        }
      }
    }
  };
  function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_icon = resolveEasycom(vue.resolveDynamicComponent("u-icon"), __easycom_0$6);
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: "u-radio",
        style: vue.normalizeStyle([$options.radioStyle])
      },
      [
        vue.createElementVNode(
          "view",
          {
            class: vue.normalizeClass(["u-radio__icon-wrap", [$options.iconClass]]),
            onClick: _cache[0] || (_cache[0] = (...args) => $options.toggle && $options.toggle(...args)),
            style: vue.normalizeStyle([$options.iconStyle])
          },
          [
            vue.createVNode(_component_u_icon, {
              class: "u-radio__icon-wrap__icon",
              name: "checkbox-mark",
              size: $options.elIconSize,
              color: $options.iconColor
            }, null, 8, ["size", "color"])
          ],
          6
          /* CLASS, STYLE */
        ),
        vue.createElementVNode(
          "view",
          {
            class: "u-radio__label",
            onClick: _cache[1] || (_cache[1] = (...args) => $options.onClickLabel && $options.onClickLabel(...args)),
            style: vue.normalizeStyle({ fontSize: _ctx.$u.addUnit($props.labelSize) })
          },
          [
            vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
          ],
          4
          /* STYLE */
        )
      ],
      4
      /* STYLE */
    );
  }
  const __easycom_4 = /* @__PURE__ */ _export_sfc(_sfc_main$z, [["render", _sfc_render$6], ["__scopeId", "data-v-3d838a1d"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-radio/u-radio.vue"]]);
  const _sfc_main$y = {
    name: "u-radio-group",
    emits: ["update:modelValue", "input", "change"],
    mixins: [Emitter],
    props: {
      // 匹配某一个radio组件，如果某个radio的name值等于此值，那么这个radio就被会选中
      value: {
        type: [String, Number],
        default: ""
      },
      modelValue: {
        type: [String, Number],
        default: ""
      },
      // 是否禁用所有单选框
      disabled: {
        type: Boolean,
        default: false
      },
      // 选中状态下的颜色
      activeColor: {
        type: String,
        default: "#2979ff"
      },
      // 组件的整体大小
      size: {
        type: [String, Number],
        default: 34
      },
      // 是否禁止点击提示语选中复选框
      labelDisabled: {
        type: Boolean,
        default: false
      },
      // 形状，square为方形，circle为圆型
      shape: {
        type: String,
        default: "circle"
      },
      // 图标的大小，单位rpx
      iconSize: {
        type: [String, Number],
        default: 20
      },
      // 每个checkbox占u-checkbox-group的宽度
      width: {
        type: [String, Number],
        default: "auto"
      },
      // 是否每个checkbox都换行
      wrap: {
        type: Boolean,
        default: false
      }
    },
    data() {
      return {
        uFromData: {
          inputAlign: "left"
        }
      };
    },
    created() {
      this.children = [];
    },
    mounted() {
      let parent = this.$u.$parent.call(this, "u-form");
      if (parent) {
        Object.keys(this.uFromData).map((key) => {
          this.uFromData[key] = parent[key];
        });
      }
    },
    watch: {
      // 当父组件需要子组件需要共享的参数发生了变化，手动通知子组件
      parentData() {
        if (this.children.length) {
          this.children.map((child) => {
            typeof child.updateParentData == "function" && child.updateParentData();
          });
        }
      }
    },
    computed: {
      valueCom() {
        return this.modelValue;
      },
      // 这里computed的变量，都是子组件u-radio需要用到的，由于头条小程序的兼容性差异，子组件无法实时监听父组件参数的变化
      // 所以需要手动通知子组件，这里返回一个parentData变量，供watch监听，在其中去通知每一个子组件重新从父组件(u-radio-group)
      // 拉取父组件新的变化后的参数
      parentData() {
        return [
          this.value,
          this.disabled,
          this.activeColor,
          this.size,
          this.labelDisabled,
          this.shape,
          this.iconSize,
          this.width,
          this.wrap,
          this.modelValue
        ];
      }
    },
    methods: {
      // 该方法有子组件radio调用，当一个radio被选中的时候，给父组件设置value值(props传递的value)
      setValue(val) {
        this.children.map((child) => {
          if (child.parentData.value != val)
            child.parentData.value = "";
        });
        this.$emit("input", val);
        this.$emit("update:modelValue", val);
        this.$emit("change", val);
        setTimeout(() => {
          this.dispatch("u-form-item", "onFieldChange", val);
        }, 60);
      }
    }
  };
  function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["u-radio-group u-clearfix", $data.uFromData.inputAlign == "right" ? "flex-end" : ""])
      },
      [
        vue.renderSlot(_ctx.$slots, "default", {}, void 0, true)
      ],
      2
      /* CLASS */
    );
  }
  const __easycom_5 = /* @__PURE__ */ _export_sfc(_sfc_main$y, [["render", _sfc_render$5], ["__scopeId", "data-v-1d03092d"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-radio-group/u-radio-group.vue"]]);
  const _sfc_main$x = {
    __name: "editorDetail",
    props: {
      curConfTreeData: {
        type: Object,
        default: {}
      }
    },
    emits: ["emitVisible", "emitConfTreeData"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const emits = __emit;
      const detailVisible = vue.ref(false);
      const curConfIndex = vue.ref(0);
      const props = __props;
      const selectRadio = vue.ref([
        {
          name: "是",
          value: "1",
          disabled: false
        },
        {
          name: "否",
          value: "0",
          disabled: false
        }
      ]);
      function goToBack() {
        emits("emitVisible", true);
        detailVisible.value = false;
      }
      function submit() {
        emits("emitVisible", true);
        let curData = {
          [`${curConfIndex.value}`]: props.curConfTreeData
        };
        emits("emitConfTreeData", curData);
        detailVisible.value = false;
      }
      onLoad(() => {
      });
      __expose({
        detailVisible
      });
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_toast = resolveEasycom(vue.resolveDynamicComponent("u-toast"), __easycom_1$1);
        const _component_u_radio = resolveEasycom(vue.resolveDynamicComponent("u-radio"), __easycom_4);
        const _component_u_radio_group = resolveEasycom(vue.resolveDynamicComponent("u-radio-group"), __easycom_5);
        const _component_u_form_item = resolveEasycom(vue.resolveDynamicComponent("u-form-item"), __easycom_3$1);
        const _component_u_input = resolveEasycom(vue.resolveDynamicComponent("u-input"), __easycom_2$2);
        const _component_u_form = resolveEasycom(vue.resolveDynamicComponent("u-form"), __easycom_4$1);
        return detailVisible.value ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "main-container"
        }, [
          vue.createElementVNode("view", { class: "status_bar" }, [
            vue.createElementVNode("view", { class: "top_view" })
          ]),
          vue.createElementVNode("view", { class: "conf-container" }, [
            vue.createElementVNode("view", {
              class: "nav-bar",
              style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
            }, [
              vue.createVNode(_component_uni_icons, {
                onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                type: "left",
                size: "30",
                style: { "line-height": "44px" }
              }),
              vue.createElementVNode("text", {
                class: "title",
                style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
              }, "准备阶段"),
              vue.createElementVNode("text", {
                onClick: _cache[1] || (_cache[1] = ($event) => submit()),
                type: "primary",
                class: "submit",
                style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
              }, "保存")
            ]),
            vue.createVNode(
              _component_u_toast,
              { ref: "uToast" },
              null,
              512
              /* NEED_PATCH */
            ),
            vue.createElementVNode("view", { class: "content-box" }, [
              vue.createCommentVNode(' <uni-navigator url="{{url}}"></uni-navigator> '),
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList(props.curConfTreeData, (item, index) => {
                  return vue.openBlock(), vue.createElementBlock("view", {
                    class: "item-box",
                    key: index
                  }, [
                    vue.createElementVNode("view", { class: "left-item" }, [
                      vue.createElementVNode("view", {
                        class: "title",
                        onClick: ($event) => _ctx.goToDeatil(item.id)
                      }, vue.toDisplayString(item.checkItemName), 9, ["onClick"]),
                      vue.createVNode(_component_u_form, {
                        model: item,
                        ref_for: true,
                        ref: "form1"
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(
                            _component_u_form_item,
                            {
                              "label-width": "150",
                              label: "是否检查",
                              prop: "name"
                            },
                            {
                              default: vue.withCtx(() => [
                                vue.createVNode(_component_u_radio_group, {
                                  modelValue: item.checkState,
                                  "onUpdate:modelValue": ($event) => item.checkState = $event
                                }, {
                                  default: vue.withCtx(() => [
                                    (vue.openBlock(true), vue.createElementBlock(
                                      vue.Fragment,
                                      null,
                                      vue.renderList(selectRadio.value, (val, index2) => {
                                        return vue.openBlock(), vue.createBlock(_component_u_radio, {
                                          name: val.value,
                                          disabled: val.disabled,
                                          key: index2
                                        }, {
                                          default: vue.withCtx(() => [
                                            vue.createTextVNode(
                                              vue.toDisplayString(val.name),
                                              1
                                              /* TEXT */
                                            )
                                          ]),
                                          _: 2
                                          /* DYNAMIC */
                                        }, 1032, ["name", "disabled"]);
                                      }),
                                      128
                                      /* KEYED_FRAGMENT */
                                    ))
                                  ]),
                                  _: 2
                                  /* DYNAMIC */
                                }, 1032, ["modelValue", "onUpdate:modelValue"])
                              ]),
                              _: 2
                              /* DYNAMIC */
                            },
                            1024
                            /* DYNAMIC_SLOTS */
                          ),
                          vue.createVNode(
                            _component_u_form_item,
                            {
                              "label-width": "150",
                              label: "检查结果",
                              prop: "name"
                            },
                            {
                              default: vue.withCtx(() => [
                                vue.createVNode(_component_u_input, {
                                  type: "textarea",
                                  modelValue: item.checkResult,
                                  "onUpdate:modelValue": ($event) => item.checkResult = $event
                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                              ]),
                              _: 2
                              /* DYNAMIC */
                            },
                            1024
                            /* DYNAMIC_SLOTS */
                          )
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["model"])
                    ])
                  ]);
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ])
          ])
        ])) : vue.createCommentVNode("v-if", true);
      };
    }
  };
  const editorDetail = /* @__PURE__ */ _export_sfc(_sfc_main$x, [["__scopeId", "data-v-880264f2"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/qualityControl/editorDetail.vue"]]);
  const _sfc_main$w = {
    __name: "addOrEditor",
    emits: ["emitVisible"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const emits = __emit;
      const timeParams = vue.reactive({
        year: true,
        month: true,
        day: true,
        hour: true,
        minute: true,
        second: true
      });
      const curTimeKey = vue.ref(null);
      const checkTimeVisible = vue.ref(false);
      function showPickerDate(value) {
        curTimeKey.value = value, checkTimeVisible.value = true;
      }
      function getTime(e) {
        if (curTimeKey.value === "checkTime")
          dataForm.checkTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
        else if (curTimeKey.value === "endTime")
          dataForm.endTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
      }
      let dataForm = vue.reactive({
        holeId: "",
        holeNo: "",
        projectId: "",
        recordNo: "",
        temperature: "",
        weather: "",
        checkType: "",
        files: [],
        detailList: [],
        checkUserId: "",
        checkTime: ""
      });
      const visible = vue.ref(false);
      const qcType = vue.reactive({ name: "内部质控", type: "1" });
      vue.reactive({});
      function clearData(data) {
        for (let key in data) {
          data[key] = null;
        }
        return;
      }
      function parseFiles(data) {
        var _data = JSON.parse(JSON.stringify(data));
        if (_data.files) {
          _data.files = JSON.stringify(_data.files);
        } else {
          _data.files = "[]";
        }
        _data.projectId = uni.getStorageSync("projectId");
        _data.checkType = checkType.value;
        _data.checkUserId = uni.getStorageSync("userInfo").id;
        return _data;
      }
      function addOrUpdateData() {
        dataForm = parseFiles(dataForm);
        if (!dataForm.id) {
          formatAppLog("log", "at pages/sampleDetection/qualityControl/addOrEditor.vue:111", dataForm.detailList);
          addQCCheckBase(dataForm).then((res) => ToastFn("创建成功"));
        } else {
          updateQCCheckBase(dataForm.id, dataForm).then((res) => ToastFn("修改成功"));
        }
        clearData(dataForm);
      }
      function ToastFn(text) {
        goToBack();
        uni.showToast({
          title: text,
          duration: 2e3
        });
      }
      const itemId = vue.ref(null);
      function dataInfo(dataAll) {
        let _dataAll = dataAll;
        if (_dataAll.files) {
          _dataAll.files = JSON.parse(_dataAll.files);
        } else {
          _dataAll.files = [];
        }
        dataForm = _dataAll;
      }
      function initData() {
        const id = itemId.value;
        if (id) {
          getQCCheckBaseDetail(id).then((res) => {
            dataInfo(res.data);
            confTreeData.value = editorTableData(dataForm.detailList);
          });
        } else {
          getQCCheckConfList();
        }
      }
      function goToBack() {
        visible.value = false;
        itemId.value = null;
        clearData(dataForm);
        emits("emitVisible", true);
      }
      vue.ref([
        { id: 0, checkItemName: "准备阶段", children: [], count: 0 },
        { id: 0, checkItemName: "采样过程中的质量控制和质量保证", children: [], count: 0 }
      ]);
      const checkType = vue.ref("1");
      const confTitle = vue.ref([]);
      function handleTableData(data) {
        let result = {};
        let tempArr = [];
        let resItem = {};
        let handelData = data.sort((a, b) => {
          return a.itemSort - b.itemSort;
        });
        handelData.forEach((item, index) => {
          if (item.children) {
            for (let val of item.children) {
              resItem.checkItemId = val.id;
              resItem.checkItemSort = val.itemSort;
              resItem.checkProblem = "";
              resItem.checkResult = "";
              resItem.checkItemName = val.itemName;
              resItem.checkState = "0";
              tempArr.push(resItem);
              resItem = {};
            }
            result[index] = tempArr;
            tempArr = [];
          } else {
            result[index] = [];
          }
          confTitle.value[index] = item.itemName;
        });
        return result;
      }
      function editorTableData(data) {
        let result = {};
        let handelData = data.sort((a, b) => {
          return a.checkItemSort - b.checkItemSort;
        });
        handelData.forEach((item, index) => {
          if (item.children) {
            let childData = item.children.sort((a, b) => {
              return a.checkItemSort - b.checkItemSort;
            });
            result[index] = childData;
            childData = null;
          } else {
            result[index] = [];
          }
          confTitle.value[index] = item.checkItemName;
        });
        return result;
      }
      const confTreeData = vue.ref([]);
      function getQCCheckConfList() {
        let _query = {
          itemName: "",
          sort: "asc",
          sidx: "itemSort",
          checkType
        };
        QcInitListTree(_query).then((res) => {
          if (res.data) {
            var _list = [];
            for (let i = 0; i < res.data.list.length; i++) {
              let _data = res.data.list[i];
              _list.push(_data);
            }
            confTreeData.value = handleTableData(_list);
            for (let key in confTreeData.value) {
              dataForm.detailList = dataForm.detailList.concat(confTreeData.value[key]);
            }
            formatAppLog("log", "at pages/sampleDetection/qualityControl/addOrEditor.vue:231", dataForm.detailList);
          }
        });
      }
      const curConfTreeData = vue.ref(null);
      const detailRef = vue.ref(null);
      function goDetail(index) {
        visible.value = false;
        detailRef.value.detailVisible = true;
        curConfTreeData.value = confTreeData.value[index];
        detailRef.value.curConfIndex = index;
      }
      function updateConfTree(val) {
        for (let key in confTreeData.value) {
          for (let childKey in val) {
            if (key === childKey) {
              confTreeData.value[key] = val[key];
            }
          }
        }
      }
      onLoad(async () => {
      });
      __expose({
        visible,
        qcType,
        itemId,
        initData,
        dataForm,
        checkType
      });
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_toast = resolveEasycom(vue.resolveDynamicComponent("u-toast"), __easycom_1$1);
        const _component_u_input = resolveEasycom(vue.resolveDynamicComponent("u-input"), __easycom_2$2);
        const _component_u_form_item = resolveEasycom(vue.resolveDynamicComponent("u-form-item"), __easycom_3$1);
        const _component_u_form = resolveEasycom(vue.resolveDynamicComponent("u-form"), __easycom_4$1);
        const _component_u_picker = resolveEasycom(vue.resolveDynamicComponent("u-picker"), __easycom_5$1);
        return vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          null,
          [
            visible.value ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "main-container"
            }, [
              vue.createElementVNode("view", { class: "status_bar" }, [
                vue.createElementVNode("view", { class: "top_view" })
              ]),
              vue.createElementVNode("view", { class: "qc-container" }, [
                vue.createElementVNode("view", {
                  class: "nav-bar",
                  style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
                }, [
                  vue.createVNode(_component_uni_icons, {
                    onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                    type: "left",
                    size: "30",
                    style: { "line-height": "44px" }
                  }),
                  vue.createElementVNode("text", {
                    class: "title",
                    style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
                  }, "采样信息"),
                  vue.createElementVNode("text", {
                    onClick: _cache[1] || (_cache[1] = ($event) => addOrUpdateData()),
                    type: "primary",
                    class: "submit",
                    style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
                  }, "保存")
                ]),
                vue.createVNode(
                  _component_u_toast,
                  { ref: "uToast" },
                  null,
                  512
                  /* NEED_PATCH */
                ),
                vue.createVNode(_component_u_form, {
                  model: vue.unref(dataForm),
                  ref: "Form",
                  style: { "margin": "10px" }
                }, {
                  default: vue.withCtx(() => [
                    itemId.value ? (vue.openBlock(), vue.createBlock(_component_u_form_item, {
                      key: 0,
                      "label-width": "100px",
                      label: "记录编号",
                      prop: "startDepth"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_u_input, {
                          modelValue: vue.unref(dataForm).id,
                          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => vue.unref(dataForm).id = $event)
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    })) : vue.createCommentVNode("v-if", true),
                    vue.createVNode(_component_u_form_item, {
                      "label-width": "100px",
                      label: "检查日期",
                      prop: "checkTime"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_u_input, {
                          onClick: _cache[3] || (_cache[3] = ($event) => showPickerDate("checkTime")),
                          modelValue: vue.unref(dataForm).checkTime,
                          "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => vue.unref(dataForm).checkTime = $event)
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createElementVNode("view", { class: "detail-content" }, [
                      vue.createElementVNode("text", { class: "zk-title" }, "质控内容"),
                      (vue.openBlock(true), vue.createElementBlock(
                        vue.Fragment,
                        null,
                        vue.renderList(confTreeData.value, (item, index) => {
                          return vue.openBlock(), vue.createElementBlock("view", {
                            class: "read",
                            key: index,
                            onClick: ($event) => goDetail(index)
                          }, [
                            vue.createElementVNode(
                              "text",
                              { class: "content" },
                              vue.toDisplayString(confTitle.value[index]) + "(" + vue.toDisplayString(item.length) + ")",
                              1
                              /* TEXT */
                            )
                          ], 8, ["onClick"]);
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]),
                    vue.createVNode(_component_u_form_item, {
                      "label-width": "100px",
                      label: "上传图片",
                      prop: "file"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(upload, {
                          "onUpdate:value": _cache[5] || (_cache[5] = (val) => {
                            vue.unref(dataForm).files = val;
                          }),
                          value: vue.unref(dataForm).files
                        }, null, 8, ["value"])
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["model"]),
                vue.createVNode(_component_u_picker, {
                  modelValue: checkTimeVisible.value,
                  "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => checkTimeVisible.value = $event),
                  mode: "time",
                  params: timeParams,
                  onConfirm: getTime,
                  "default-time": vue.unref(getCurrentTime)()
                }, null, 8, ["modelValue", "params", "default-time"])
              ])
            ])) : vue.createCommentVNode("v-if", true),
            vue.createVNode(editorDetail, {
              ref_key: "detailRef",
              ref: detailRef,
              curConfTreeData: curConfTreeData.value,
              onEmitVisible: _cache[7] || (_cache[7] = (val) => {
                visible.value = val;
              }),
              onEmitConfTreeData: updateConfTree
            }, null, 8, ["curConfTreeData"])
          ],
          64
          /* STABLE_FRAGMENT */
        );
      };
    }
  };
  const addOrEditor = /* @__PURE__ */ _export_sfc(_sfc_main$w, [["__scopeId", "data-v-3428d6e3"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/qualityControl/addOrEditor.vue"]]);
  const _sfc_main$v = {
    __name: "index",
    setup(__props) {
      vue.ref(true);
      const tabOptions = vue.ref([
        {
          name: "内部质控"
        },
        {
          name: "现场检查"
        }
      ]);
      const EditorRef = vue.ref(null);
      const mainVisible = vue.ref(true);
      function goAddOrEditorData(id) {
        EditorRef.value.visible = true;
        mainVisible.value = false;
        if (id) {
          formatAppLog("log", "at pages/sampleDetection/qualityControl/index.vue:84", id);
          EditorRef.value.itemId = id;
        } else {
          EditorRef.value.checkType = `${tabCurent.value++}`;
        }
        EditorRef.value.initData();
      }
      function goToBack() {
        uni.navigateBack({
          delta: 1
        });
      }
      const dataList2 = vue.ref([]);
      const query = vue.reactive({
        id: "",
        recorderId: "",
        recordTime: ""
      });
      function getList() {
        let menuId = getMenuId("项目列表");
        const projectId = uni.getStorageSync("projectId");
        let initQuery = {
          currentPage: 1,
          pageSize: 0,
          sort: "desc",
          sidx: "",
          menuId,
          projectId,
          holeId: ""
        };
        Object.assign(initQuery, query);
        getQCCheckBaseList(initQuery).then((res) => {
          let list = null;
          if (tabCurent.value == 0) {
            list = res.data.list.filter((item) => item.checkType == "1");
          } else {
            list = res.data.list.filter((item) => item.checkType == "2");
          }
          dataList2.value = list;
        });
      }
      const tabCurent = vue.ref(0);
      function change(index) {
        getList();
      }
      const swiperOptions = vue.ref([
        {
          text: "删除",
          style: {
            backgroundColor: "#dd524d"
          }
        }
      ]);
      function swipeClick(e, ctx, id) {
        uni.showModal({
          title: "提示",
          content: "您确定要删除此项吗？",
          success: (res) => {
            if (res.confirm) {
              delQCCheckBaseDetail(id).then((res2) => {
                getList();
              });
              uni.showToast({
                title: "移除成功",
                icon: "none"
              });
            }
          }
        });
      }
      onLoad(() => {
        getList();
      });
      onPullDownRefresh(async () => {
        await getMenuList();
        uni.stopPullDownRefresh();
      });
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_tabs = resolveEasycom(vue.resolveDynamicComponent("u-tabs"), __easycom_1$3);
        const _component_u_search = resolveEasycom(vue.resolveDynamicComponent("u-search"), __easycom_1$7);
        const _component_uni_swipe_action_item = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action-item"), __easycom_2$3);
        const _component_uni_swipe_action = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action"), __easycom_3$2);
        const _component_u_empty = resolveEasycom(vue.resolveDynamicComponent("u-empty"), __easycom_4$2);
        return vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          null,
          [
            mainVisible.value ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "main-container"
            }, [
              vue.createElementVNode("view", { class: "status_bar" }, [
                vue.createElementVNode("view", { class: "top_view" })
              ]),
              vue.createElementVNode("view", { class: "qc-container" }, [
                vue.createElementVNode("view", {
                  class: "nav-bar",
                  style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
                }, [
                  vue.createVNode(_component_uni_icons, {
                    onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                    type: "left",
                    size: "30",
                    style: { "line-height": "44px" }
                  }),
                  vue.createElementVNode("text", {
                    class: "title",
                    style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
                  }, "采样信息"),
                  vue.createVNode(_component_uni_icons, {
                    onClick: _cache[1] || (_cache[1] = ($event) => goAddOrEditorData()),
                    class: "add",
                    type: "plus-filled",
                    size: "30",
                    style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
                  })
                ]),
                vue.createElementVNode("view", { class: "tab-box" }, [
                  vue.createVNode(_component_u_tabs, {
                    list: tabOptions.value,
                    "is-scroll": true,
                    modelValue: tabCurent.value,
                    "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => tabCurent.value = $event),
                    onChange: change
                  }, null, 8, ["list", "modelValue"])
                ]),
                vue.createElementVNode("view", { class: "search-box" }, [
                  vue.createVNode(_component_u_search, {
                    placeholder: "搜索.",
                    modelValue: _ctx.keyword,
                    "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => _ctx.keyword = $event)
                  }, null, 8, ["modelValue"])
                ]),
                vue.createElementVNode("view", { class: "content-box" }, [
                  dataList2.value.length ? (vue.openBlock(), vue.createBlock(
                    _component_uni_swipe_action,
                    {
                      key: 0,
                      ref: "swipeAction"
                    },
                    {
                      default: vue.withCtx(() => [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList(dataList2.value, (item) => {
                            return vue.openBlock(), vue.createBlock(_component_uni_swipe_action_item, {
                              class: "swipe-item items-box",
                              key: item.id,
                              "right-options": swiperOptions.value,
                              onChange: _cache[4] || (_cache[4] = ($event) => _ctx.swipeChange($event)),
                              onClick: ($event) => swipeClick($event, _ctx.content, item.id)
                            }, {
                              default: vue.withCtx(() => [
                                vue.createElementVNode("view", {
                                  class: "item-box",
                                  onClick: ($event) => goAddOrEditorData(item.id)
                                }, [
                                  vue.createElementVNode("view", { class: "left-item" }, [
                                    vue.createElementVNode(
                                      "view",
                                      { class: "title" },
                                      "记录编号：" + vue.toDisplayString(item.id),
                                      1
                                      /* TEXT */
                                    ),
                                    vue.createElementVNode("view", { class: "center-zone" }, [
                                      vue.createElementVNode(
                                        "text",
                                        { class: "area" },
                                        "检查人：" + vue.toDisplayString(item.checkUserName),
                                        1
                                        /* TEXT */
                                      ),
                                      vue.createElementVNode(
                                        "text",
                                        { class: "project" },
                                        vue.toDisplayString(item.typetext),
                                        1
                                        /* TEXT */
                                      )
                                    ]),
                                    vue.createElementVNode(
                                      "text",
                                      { class: "time" },
                                      vue.toDisplayString(item.registertime),
                                      1
                                      /* TEXT */
                                    )
                                  ])
                                ], 8, ["onClick"])
                              ]),
                              _: 2
                              /* DYNAMIC */
                            }, 1032, ["right-options", "onClick"]);
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ]),
                      _: 1
                      /* STABLE */
                    },
                    512
                    /* NEED_PATCH */
                  )) : (vue.openBlock(), vue.createBlock(_component_u_empty, {
                    key: 1,
                    style: { "margin-top": "40px" },
                    text: "暂无数据",
                    mode: "list"
                  }))
                ])
              ])
            ])) : vue.createCommentVNode("v-if", true),
            vue.createVNode(
              addOrEditor,
              {
                ref_key: "EditorRef",
                ref: EditorRef,
                onEmitVisible: _cache[5] || (_cache[5] = (val) => mainVisible.value = val)
              },
              null,
              512
              /* NEED_PATCH */
            )
          ],
          64
          /* STABLE_FRAGMENT */
        );
      };
    }
  };
  const PagesSampleDetectionQualityControlIndex = /* @__PURE__ */ _export_sfc(_sfc_main$v, [["__scopeId", "data-v-e373d9fe"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/qualityControl/index.vue"]]);
  function getSendSampleList(data) {
    return request({
      url: `/api/sample/Transport/getList`,
      method: "post",
      data
    });
  }
  function getSendsampleDetail(id) {
    return request({
      url: `/api/sample/Transport/${id}`,
      method: "get"
    });
  }
  function updateSendsample(id, data) {
    return request({
      url: `/api/sample/Transport/${id}`,
      method: "put",
      data
    });
  }
  function delSendsampleDetail(id) {
    return request({
      url: `/api/project/Transport/${id}`,
      method: "delete"
    });
  }
  function initSendList(data) {
    return request({
      url: `/api/sample/Transport/initDetailList`,
      method: "post",
      data
    });
  }
  function receiveSample(id, data) {
    return request({
      url: `/api/sample/Transport/receive/${id}`,
      method: "post",
      data
    });
  }
  const _sfc_main$u = {
    __name: "sendDetail",
    props: {
      sendId: { type: String, default: null }
    },
    emits: ["emitVisible"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const emits = __emit;
      const sendDetailVisible = vue.ref(false);
      const sendDetailId = vue.ref(null);
      vue.ref([]);
      const unSendDetailList = vue.ref([]);
      const sendData = vue.ref();
      function submitSend() {
        const data = dataList.value;
        const id = sendId.value;
        updateSendsample(id, data).then((res) => {
          formatAppLog("log", "at pages/sampleDetection/sendSample/sendDetail.vue:85", "succeed");
        });
      }
      function goToBack() {
        sendDetailVisible.value = false;
        emits("emitVisible", true);
      }
      let mobilePhone = vue.ref(uni.getStorageSync("userInfo").mobilePhone);
      let userName = vue.ref(uni.getStorageSync("userInfo").userName);
      onLoad(() => {
        formatAppLog("log", "at pages/sampleDetection/sendSample/sendDetail.vue:95", uni.getStorageSync("userInfo"));
      });
      __expose({
        sendDetailVisible,
        sendDetailId,
        unSendDetailList,
        sendData
      });
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_button = resolveEasycom(vue.resolveDynamicComponent("u-button"), __easycom_6$1);
        return sendDetailVisible.value ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "send-container"
        }, [
          vue.createElementVNode("view", { class: "status_bar" }, [
            vue.createElementVNode("view", { class: "top_view" })
          ]),
          vue.createElementVNode("view", { class: "content-box" }, [
            vue.createElementVNode("view", {
              class: "nav-bar",
              style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
            }, [
              vue.createVNode(_component_uni_icons, {
                onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                type: "left",
                size: "30",
                style: { "line-height": "44px" }
              }),
              vue.createElementVNode("text", {
                class: "title",
                style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
              }, "采样信息")
            ]),
            vue.createElementVNode("view", { class: "send-info-box" }, [
              vue.createElementVNode("view", { class: "left-box" }, [
                vue.createElementVNode(
                  "text",
                  null,
                  "送样人：" + vue.toDisplayString(vue.unref(userName)),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode(
                  "text",
                  null,
                  "联系电话：" + vue.toDisplayString(vue.unref(mobilePhone)),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode(
                  "text",
                  null,
                  "送样时间：" + vue.toDisplayString(sendData.value.transTime),
                  1
                  /* TEXT */
                )
              ])
            ]),
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList(sendData.value.detailList, (item) => {
                return vue.openBlock(), vue.createElementBlock("view", {
                  class: "send-box-item",
                  key: item.id
                }, [
                  vue.createElementVNode("view", { class: "item-box" }, [
                    vue.createElementVNode("view", { class: "left-item" }, [
                      vue.createElementVNode("view", {
                        class: "title",
                        onClick: ($event) => _ctx.goToDeatil(item.id)
                      }, vue.toDisplayString(item.sampleNo), 9, ["onClick"]),
                      vue.createElementVNode("view", { class: "center-zone" }, [
                        vue.createElementVNode(
                          "text",
                          { class: "area" },
                          vue.toDisplayString(item.sampleTime),
                          1
                          /* TEXT */
                        ),
                        vue.createElementVNode(
                          "text",
                          { class: "project" },
                          vue.toDisplayString(item.analysisFactorNames),
                          1
                          /* TEXT */
                        )
                      ]),
                      vue.createElementVNode(
                        "text",
                        { class: "time" },
                        vue.toDisplayString(item.registertime),
                        1
                        /* TEXT */
                      )
                    ])
                  ])
                ]);
              }),
              128
              /* KEYED_FRAGMENT */
            )),
            vue.createElementVNode("view", { class: "select-footer" }, [
              vue.createElementVNode("view", { class: "right-box" }, [
                vue.createCommentVNode(' <text class="count">共计： {{unSendList.length}}个</text> '),
                vue.createVNode(_component_u_button, {
                  type: "primary",
                  onClick: submitSend
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("选择送样")
                  ]),
                  _: 1
                  /* STABLE */
                })
              ])
            ])
          ])
        ])) : vue.createCommentVNode("v-if", true);
      };
    }
  };
  const sendDetail = /* @__PURE__ */ _export_sfc(_sfc_main$u, [["__scopeId", "data-v-73492dc9"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sendSample/sendDetail.vue"]]);
  const _sfc_main$t = {
    __name: "selectSend",
    emits: ["emitVisible"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const emits = __emit;
      const selectVisible = vue.ref(false);
      const timeParams = vue.reactive({
        year: true,
        month: true,
        day: true,
        hour: true,
        minute: true,
        second: true
      });
      const curTimeKey = vue.ref(null);
      const selectTimeVisible = vue.ref(false);
      function showPickerDate(value) {
        curTimeKey.value = value, selectTimeVisible.value = true;
      }
      function getTime(e) {
        if (curTimeKey.value === "transTime")
          dataForm.transTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
        else if (curTimeKey.value === "endTime")
          dataForm.endTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
      }
      const dataForm = vue.reactive({
        id: "",
        domain: "sample",
        location: "",
        organizeId: "",
        projectId: "",
        projection: "",
        receiveCount: 0,
        receiveTime: "",
        receiveUserId: "",
        remark: "",
        transCount: 0,
        transNo: "",
        transState: "",
        transTime: "",
        transUserId: "",
        projectEnCode: "",
        detailList: []
      });
      const unSendList = vue.ref([]);
      function getUnsendList() {
        const id = {
          projectId: uni.getStorageSync("projectId")
        };
        initSendList(id).then((res) => {
          unSendList.value = res.data.list;
          formatAppLog("log", "at pages/sampleDetection/sendSample/selectSend.vue:147", unSendList.value);
        });
      }
      function getProjectEncode() {
        const id = uni.getStorageSync("projectId");
        getProjectDetail(id).then((res) => {
          dataForm.projectEnCode = res.data.encode;
          formatAppLog("log", "at pages/sampleDetection/sendSample/selectSend.vue:184", res.data);
        });
      }
      const addFlag = vue.ref(false);
      const sendDetailRef = vue.ref(null);
      const sendId2 = vue.ref(null);
      function goSendDetail() {
        dataForm.projectId = uni.getStorageSync("projectId");
        dataForm.transUserId = uni.getStorageSync("userInfo").id;
        dataForm.organizeId = uni.getStorageSync("userInfo").organizeId;
        const detailList = unSendList.value.filter((item) => item.send).map((item) => ({
          analysisFactorIds: item.analysisFactorIds,
          analysisFactorNames: item.analysisFactorNames,
          classify: item.classify,
          dropped: item.dropped,
          files: item.files,
          received: item.received,
          remark: item.remark,
          sampleAmount: item.sampleAmount,
          sampleId: item.sampleId,
          sampleName: item.sampleName,
          sampleNo: item.sampleNo,
          sampleTime: item.sampleTime,
          sampleType: item.sampleType,
          sampleUnit: item.sampleUnit,
          transId: item.transId,
          useLocId: item.useLocId,
          useLocType: item.useLocType,
          useLocation: item.useLocation
        }));
        dataForm.transCount = detailList.length;
        dataForm.detailList = detailList;
        selectVisible.value = false;
        sendDetailRef.value.sendDetailVisible = true;
        sendDetailRef.value.sendData = dataForm;
        formatAppLog("log", "at pages/sampleDetection/sendSample/selectSend.vue:230", dataForm);
      }
      function goToBack() {
        selectVisible.value = false;
        emits("emitVisible", true);
      }
      function checkboxChange(e) {
        formatAppLog("log", "at pages/sampleDetection/sendSample/selectSend.vue:240", unSendList.value);
        formatAppLog("log", "at pages/sampleDetection/sendSample/selectSend.vue:241", e);
      }
      const selectValue = vue.ref({ name: "全选", disabled: false });
      function selectAll(e) {
        formatAppLog("log", "at pages/sampleDetection/sendSample/selectSend.vue:245", e);
        if (e.value) {
          unSendList.value.forEach((item) => {
            item.send = true;
          });
        } else {
          unSendList.value.forEach((item) => {
            item.send = false;
          });
        }
      }
      onLoad(() => {
        getUnsendList();
        getProjectEncode();
      });
      __expose({
        selectVisible,
        addFlag,
        sendId: sendId2
        // getSendDetail,
        // sendId
      });
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_input = resolveEasycom(vue.resolveDynamicComponent("u-input"), __easycom_2$2);
        const _component_u_form_item = resolveEasycom(vue.resolveDynamicComponent("u-form-item"), __easycom_3$1);
        const _component_u_form = resolveEasycom(vue.resolveDynamicComponent("u-form"), __easycom_4$1);
        const _component_u_picker = resolveEasycom(vue.resolveDynamicComponent("u-picker"), __easycom_5$1);
        const _component_u_checkbox = resolveEasycom(vue.resolveDynamicComponent("u-checkbox"), __easycom_5$3);
        const _component_u_checkbox_group = resolveEasycom(vue.resolveDynamicComponent("u-checkbox-group"), __easycom_6);
        const _component_u_button = resolveEasycom(vue.resolveDynamicComponent("u-button"), __easycom_6$1);
        return vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          null,
          [
            selectVisible.value ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "send-container"
            }, [
              vue.createElementVNode("view", { class: "status_bar" }, [
                vue.createElementVNode("view", { class: "top_view" })
              ]),
              vue.createElementVNode("view", { class: "content-box" }, [
                vue.createElementVNode("view", {
                  class: "nav-bar",
                  style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
                }, [
                  vue.createVNode(_component_uni_icons, {
                    onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                    type: "left",
                    size: "30",
                    style: { "line-height": "44px" }
                  }),
                  vue.createElementVNode("text", {
                    class: "title",
                    style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
                  }, "采样信息"),
                  vue.createElementVNode("text", {
                    onClick: _cache[1] || (_cache[1] = ($event) => _ctx.addOrUpdateData()),
                    type: "primary",
                    class: "submit",
                    style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
                  }, "保存")
                ]),
                vue.createElementVNode("view", { class: "form-box" }, [
                  vue.createVNode(_component_u_form, {
                    model: dataForm,
                    ref: "Form",
                    style: { "margin": "10px" }
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_form_item, {
                        "label-width": "100px",
                        label: "批次编号",
                        prop: "transNo"
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(_component_u_input, {
                            modelValue: dataForm.transNo,
                            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => dataForm.transNo = $event)
                          }, null, 8, ["modelValue"])
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      vue.createVNode(_component_u_form_item, {
                        "label-width": "100px",
                        label: "开始时间",
                        prop: "transTime"
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(_component_u_input, {
                            onClick: _cache[3] || (_cache[3] = ($event) => showPickerDate("transTime")),
                            modelValue: dataForm.transTime,
                            "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => dataForm.transTime = $event)
                          }, null, 8, ["modelValue"])
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["model"]),
                  vue.createVNode(_component_u_picker, {
                    modelValue: selectTimeVisible.value,
                    "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => selectTimeVisible.value = $event),
                    mode: "time",
                    params: timeParams,
                    onConfirm: getTime,
                    "default-time": vue.unref(getCurrentTime)()
                  }, null, 8, ["modelValue", "params", "default-time"])
                ]),
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList(unSendList.value, (item) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      class: "send-box-item",
                      key: item.id
                    }, [
                      vue.createElementVNode("view", { class: "item-box" }, [
                        vue.createVNode(_component_u_checkbox, {
                          onChange: checkboxChange,
                          modelValue: item.send,
                          "onUpdate:modelValue": ($event) => item.send = $event,
                          shape: "circle",
                          name: item.id
                        }, null, 8, ["modelValue", "onUpdate:modelValue", "name"]),
                        vue.createElementVNode("view", { class: "left-item" }, [
                          vue.createElementVNode("view", {
                            class: "title",
                            onClick: ($event) => _ctx.goToDeatil(item.id)
                          }, vue.toDisplayString(item.sampleNo), 9, ["onClick"]),
                          vue.createElementVNode("view", { class: "center-zone" }, [
                            vue.createElementVNode(
                              "text",
                              { class: "area" },
                              vue.toDisplayString(item.createTime),
                              1
                              /* TEXT */
                            ),
                            vue.createElementVNode(
                              "text",
                              { class: "project" },
                              vue.toDisplayString(item.typetext),
                              1
                              /* TEXT */
                            )
                          ]),
                          vue.createElementVNode(
                            "text",
                            { class: "time" },
                            vue.toDisplayString(item.registertime),
                            1
                            /* TEXT */
                          )
                        ])
                      ])
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                )),
                vue.createElementVNode("view", { class: "clear-bfc" }),
                vue.createElementVNode("view", { class: "select-footer" }, [
                  vue.createElementVNode("view", { class: "footer-radio" }, [
                    vue.createVNode(_component_u_checkbox_group, null, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_u_checkbox, {
                          shape: "circle",
                          onChange: selectAll,
                          modelValue: selectValue.value.checked,
                          "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => selectValue.value.checked = $event),
                          name: selectValue.value.name
                        }, {
                          default: vue.withCtx(() => [
                            vue.createTextVNode(
                              vue.toDisplayString(selectValue.value.name),
                              1
                              /* TEXT */
                            )
                          ]),
                          _: 1
                          /* STABLE */
                        }, 8, ["modelValue", "name"])
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  vue.createElementVNode("view", { class: "right-box" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "count" },
                      "共计： " + vue.toDisplayString(unSendList.value.length) + "个",
                      1
                      /* TEXT */
                    ),
                    vue.createVNode(_component_u_button, {
                      type: "primary",
                      onClick: goSendDetail
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode("选择送样")
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ])
                ])
              ])
            ])) : vue.createCommentVNode("v-if", true),
            vue.createVNode(sendDetail, {
              ref_key: "sendDetailRef",
              ref: sendDetailRef,
              onEmitVisible: _cache[7] || (_cache[7] = (val) => selectVisible.value = val),
              sendId: sendId2.value
            }, null, 8, ["sendId"])
          ],
          64
          /* STABLE_FRAGMENT */
        );
      };
    }
  };
  const selectSend = /* @__PURE__ */ _export_sfc(_sfc_main$t, [["__scopeId", "data-v-64473575"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sendSample/selectSend.vue"]]);
  const _sfc_main$s = {
    __name: "index",
    setup(__props) {
      const dataList2 = vue.ref([]);
      const searchKeyWord = vue.ref();
      function getList() {
        const menuId = getMenuId("项目列表");
        const projectId = uni.getStorageSync("projectId");
        let query = {
          currentPage: 1,
          pageSize: 0,
          sort: "desc",
          sidx: "",
          menuId,
          projectId,
          transNo: searchKeyWord.value
        };
        return getSendSampleList(query).then((res) => {
          dataList2.value = res.data.list.filter((item) => item.transState == "0");
          dataList2.value.receivedCount = res.data.list.reduce((count, item) => {
            return count + item.detailList.filter((val) => val.received === 1).length;
          }, 0);
          dataList2.value.forEach((item) => {
            item.sendCount = item.detailList.filter((val) => val.received == 0).length;
            item.receivedCount = item.detailList.filter((val) => val.received == 1).length;
          });
        });
      }
      const selectSendRef = vue.ref(null);
      const mainVisible = vue.ref(true);
      function goSelectSend(id) {
        selectSendRef.value.selectVisible = true;
        mainVisible.value = false;
        selectSendRef.value.sendId = id;
      }
      function goToBack() {
        uni.navigateBack({ delta: 1 });
      }
      const swiperOptions = vue.ref([
        {
          text: "删除",
          style: {
            backgroundColor: "#dd524d"
          }
        }
      ]);
      function swipeClick(e, ctx, id) {
        uni.showModal({
          title: "提示",
          content: "您确定要删除此项吗？",
          success: (res) => {
            if (res.confirm) {
              delSendsampleDetail(id).then((res2) => {
                getList();
              });
              uni.showToast({
                title: "移除成功",
                icon: "none"
              });
            }
          }
        });
      }
      onLoad(() => {
        getList();
      });
      onPullDownRefresh(async () => {
        await getList();
        uni.stopPullDownRefresh();
      });
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_search = resolveEasycom(vue.resolveDynamicComponent("u-search"), __easycom_1$7);
        const _component_uni_swipe_action_item = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action-item"), __easycom_2$3);
        const _component_uni_swipe_action = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action"), __easycom_3$2);
        const _component_u_empty = resolveEasycom(vue.resolveDynamicComponent("u-empty"), __easycom_4$2);
        return vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          null,
          [
            mainVisible.value ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "sd-container"
            }, [
              vue.createElementVNode("view", { class: "status_bar" }, [
                vue.createElementVNode("view", { class: "top_view" })
              ]),
              vue.createElementVNode("view", { class: "content-box" }, [
                vue.createElementVNode("view", {
                  class: "nav-bar",
                  style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
                }, [
                  vue.createVNode(_component_uni_icons, {
                    onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                    type: "left",
                    size: "30",
                    style: { "line-height": "44px" }
                  }),
                  vue.createElementVNode("text", {
                    class: "title",
                    style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
                  }, "采样信息"),
                  vue.createElementVNode("text", {
                    onClick: _cache[1] || (_cache[1] = ($event) => goSelectSend()),
                    type: "primary",
                    class: "submit",
                    style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
                  }, "保存")
                ]),
                vue.createElementVNode("view", { class: "search-box" }, [
                  vue.createVNode(_component_u_search, {
                    placeholder: "搜索批次号",
                    modelValue: searchKeyWord.value,
                    "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => searchKeyWord.value = $event),
                    onSearch: _cache[3] || (_cache[3] = ($event) => getList())
                  }, null, 8, ["modelValue"])
                ]),
                vue.createElementVNode("view", { class: "content-box" }, [
                  dataList2.value.length ? (vue.openBlock(), vue.createBlock(
                    _component_uni_swipe_action,
                    {
                      key: 0,
                      ref: "swipeAction"
                    },
                    {
                      default: vue.withCtx(() => [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList(dataList2.value, (item) => {
                            return vue.openBlock(), vue.createBlock(_component_uni_swipe_action_item, {
                              class: "swipe-item items-box",
                              key: item.id,
                              "right-options": swiperOptions.value,
                              onChange: _cache[4] || (_cache[4] = ($event) => _ctx.swipeChange($event)),
                              onClick: ($event) => swipeClick($event, _ctx.content, item.id)
                            }, {
                              default: vue.withCtx(() => [
                                vue.createElementVNode("view", {
                                  class: "item-box",
                                  onClick: ($event) => goSelectSend(item.id)
                                }, [
                                  vue.createElementVNode("view", { class: "left-item" }, [
                                    vue.createElementVNode(
                                      "view",
                                      { class: "title" },
                                      "批次号：" + vue.toDisplayString(item.transNo),
                                      1
                                      /* TEXT */
                                    ),
                                    vue.createElementVNode("view", { class: "center-zone" }, [
                                      vue.createElementVNode(
                                        "text",
                                        { class: "area" },
                                        "项目号：" + vue.toDisplayString(item.projectName),
                                        1
                                        /* TEXT */
                                      ),
                                      vue.createElementVNode(
                                        "text",
                                        { class: "project" },
                                        vue.toDisplayString(item.typetext),
                                        1
                                        /* TEXT */
                                      )
                                    ]),
                                    vue.createElementVNode(
                                      "text",
                                      { class: "time" },
                                      vue.toDisplayString(item.registertime),
                                      1
                                      /* TEXT */
                                    )
                                  ])
                                ], 8, ["onClick"])
                              ]),
                              _: 2
                              /* DYNAMIC */
                            }, 1032, ["right-options", "onClick"]);
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ]),
                      _: 1
                      /* STABLE */
                    },
                    512
                    /* NEED_PATCH */
                  )) : (vue.openBlock(), vue.createBlock(_component_u_empty, {
                    key: 1,
                    style: { "margin-top": "40px" },
                    text: "暂无数据",
                    mode: "list"
                  }))
                ])
              ])
            ])) : vue.createCommentVNode("v-if", true),
            vue.createVNode(
              selectSend,
              {
                ref_key: "selectSendRef",
                ref: selectSendRef,
                onEmitVisible: _cache[5] || (_cache[5] = (val) => mainVisible.value = val)
              },
              null,
              512
              /* NEED_PATCH */
            )
          ],
          64
          /* STABLE_FRAGMENT */
        );
      };
    }
  };
  const PagesSampleDetectionSendSampleIndex = /* @__PURE__ */ _export_sfc(_sfc_main$s, [["__scopeId", "data-v-0cd7f4ec"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sendSample/index.vue"]]);
  const _sfc_main$r = {
    __name: "selectReceive",
    emits: ["emitVisible"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const emits = __emit;
      const selectVisible = vue.ref(false);
      const timeParams = vue.reactive({
        year: true,
        month: true,
        day: true,
        hour: true,
        minute: true,
        second: true
      });
      const curTimeKey = vue.ref(null);
      const selectTimeVisible = vue.ref(false);
      function showPickerDate(value) {
        curTimeKey.value = value, selectTimeVisible.value = true;
      }
      function getTime(e) {
        if (curTimeKey.value === "receiveTime")
          dataForm.receiveTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
        else if (curTimeKey.value === "endTime")
          dataForm.endTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
      }
      const dataForm = vue.ref();
      function initData(id) {
        getSendsampleDetail(id).then((res) => {
          dataForm.value = res.data;
          formatAppLog("log", "at pages/sampleDetection/receiveSample/selectReceive.vue:113", res.data, "=-=--");
        });
      }
      const addFlag = vue.ref(false);
      vue.ref(null);
      const receiveId = vue.ref(null);
      function submitData() {
        dataForm.value.projectId = uni.getStorageSync("projectId");
        dataForm.value.transUserId = uni.getStorageSync("userInfo").userId;
        dataForm.value.receiveUserName = uni.getStorageSync("userInfo").userName;
        dataForm.value.transState = "1";
        dataForm.value.detailList.forEach((item) => {
          if (item.send) {
            item.received = 1;
            dataForm.value.receiveCount = 1;
          } else {
            item.received = -1;
          }
          delete item.send;
        });
        formatAppLog("log", "at pages/sampleDetection/receiveSample/selectReceive.vue:142", uni.getStorageSync("userInfo"));
        if (dataForm.value.detailList.length > 0) {
          receiveSample(receiveId.value, dataForm.value).then((res) => {
            formatAppLog("log", "at pages/sampleDetection/receiveSample/selectReceive.vue:145", "success!");
          });
        }
      }
      function goToBack() {
        selectVisible.value = false;
        emits("emitVisible", true);
      }
      function checkboxChange(e) {
        formatAppLog("log", "at pages/sampleDetection/receiveSample/selectReceive.vue:157", e);
      }
      const selectValue = vue.ref({ name: "全选", disabled: false });
      function selectAll(e) {
        formatAppLog("log", "at pages/sampleDetection/receiveSample/selectReceive.vue:161", e);
        if (e.value) {
          dataForm.value.detailList.forEach((item) => {
            item.send = true;
          });
        } else {
          dataForm.value.detailList.forEach((item) => {
            item.send = false;
          });
        }
      }
      onLoad(() => {
      });
      __expose({
        addFlag,
        initData,
        selectVisible,
        receiveId
        // getSendDetail,
        // sendId
      });
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_input = resolveEasycom(vue.resolveDynamicComponent("u-input"), __easycom_2$2);
        const _component_u_form_item = resolveEasycom(vue.resolveDynamicComponent("u-form-item"), __easycom_3$1);
        const _component_u_form = resolveEasycom(vue.resolveDynamicComponent("u-form"), __easycom_4$1);
        const _component_u_picker = resolveEasycom(vue.resolveDynamicComponent("u-picker"), __easycom_5$1);
        const _component_u_checkbox = resolveEasycom(vue.resolveDynamicComponent("u-checkbox"), __easycom_5$3);
        const _component_u_checkbox_group = resolveEasycom(vue.resolveDynamicComponent("u-checkbox-group"), __easycom_6);
        const _component_u_button = resolveEasycom(vue.resolveDynamicComponent("u-button"), __easycom_6$1);
        return vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          null,
          [
            selectVisible.value ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "send-container"
            }, [
              vue.createElementVNode("view", { class: "status_bar" }, [
                vue.createElementVNode("view", { class: "top_view" })
              ]),
              vue.createElementVNode("view", { class: "content-box" }, [
                vue.createElementVNode("view", {
                  class: "nav-bar",
                  style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
                }, [
                  vue.createVNode(_component_uni_icons, {
                    onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                    type: "left",
                    size: "30",
                    style: { "line-height": "44px" }
                  }),
                  vue.createElementVNode("text", {
                    class: "title",
                    style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
                  }, "采样信息"),
                  vue.createElementVNode("text", {
                    onClick: _cache[1] || (_cache[1] = ($event) => _ctx.addOrUpdateData()),
                    type: "primary",
                    class: "submit",
                    style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
                  }, "保存")
                ]),
                vue.createElementVNode("view", { class: "form-box" }, [
                  vue.createVNode(_component_u_form, {
                    model: dataForm.value,
                    ref: "Form",
                    style: { "margin": "10px" }
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_form_item, {
                        "label-width": "100px",
                        label: "批次编号",
                        prop: "transNo"
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(_component_u_input, {
                            modelValue: dataForm.value.transNo,
                            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => dataForm.value.transNo = $event)
                          }, null, 8, ["modelValue"])
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      vue.createVNode(_component_u_form_item, {
                        "label-width": "100px",
                        label: "收样时间",
                        prop: "receiveTime"
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(_component_u_input, {
                            onClick: _cache[3] || (_cache[3] = ($event) => showPickerDate("receiveTime")),
                            modelValue: dataForm.value.receiveTime,
                            "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => dataForm.value.receiveTime = $event)
                          }, null, 8, ["modelValue"])
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["model"]),
                  vue.createVNode(_component_u_picker, {
                    modelValue: selectTimeVisible.value,
                    "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => selectTimeVisible.value = $event),
                    mode: "time",
                    params: timeParams,
                    onConfirm: getTime,
                    "default-time": vue.unref(getCurrentTime)()
                  }, null, 8, ["modelValue", "params", "default-time"])
                ]),
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList(dataForm.value.detailList, (item) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      class: "send-box-item",
                      key: item.id
                    }, [
                      vue.createElementVNode("view", { class: "item-box" }, [
                        vue.createVNode(_component_u_checkbox, {
                          onChange: checkboxChange,
                          modelValue: item.send,
                          "onUpdate:modelValue": ($event) => item.send = $event,
                          shape: "circle",
                          name: item.id
                        }, null, 8, ["modelValue", "onUpdate:modelValue", "name"]),
                        vue.createElementVNode("view", { class: "left-item" }, [
                          vue.createElementVNode("view", {
                            class: "title",
                            onClick: ($event) => _ctx.goToDeatil(item.id)
                          }, vue.toDisplayString(item.sampleNo), 9, ["onClick"]),
                          vue.createElementVNode("view", { class: "center-zone" }, [
                            vue.createElementVNode(
                              "text",
                              { class: "area" },
                              vue.toDisplayString(item.createTime),
                              1
                              /* TEXT */
                            ),
                            vue.createElementVNode(
                              "text",
                              { class: "project" },
                              vue.toDisplayString(item.typetext),
                              1
                              /* TEXT */
                            )
                          ]),
                          vue.createElementVNode(
                            "text",
                            { class: "time" },
                            vue.toDisplayString(item.registertime),
                            1
                            /* TEXT */
                          )
                        ])
                      ])
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                )),
                vue.createElementVNode("view", { class: "clear-bfc" }),
                vue.createElementVNode("view", { class: "select-footer" }, [
                  vue.createElementVNode("view", { class: "footer-radio" }, [
                    vue.createVNode(_component_u_checkbox_group, null, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_u_checkbox, {
                          shape: "circle",
                          onChange: selectAll,
                          modelValue: selectValue.value.checked,
                          "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => selectValue.value.checked = $event),
                          name: selectValue.value.name
                        }, {
                          default: vue.withCtx(() => [
                            vue.createTextVNode(
                              vue.toDisplayString(selectValue.value.name),
                              1
                              /* TEXT */
                            )
                          ]),
                          _: 1
                          /* STABLE */
                        }, 8, ["modelValue", "name"])
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  vue.createElementVNode("view", { class: "right-box" }, [
                    vue.createElementVNode(
                      "text",
                      { class: "count" },
                      "共计： " + vue.toDisplayString(dataForm.value.detailList.length) + "个",
                      1
                      /* TEXT */
                    ),
                    vue.createVNode(_component_u_button, {
                      type: "primary",
                      onClick: submitData
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode("确认采样")
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ])
                ])
              ])
            ])) : vue.createCommentVNode("v-if", true),
            vue.createCommentVNode(' <sendDetail ref="sendDetailRef" @emitVisible="(val)=>selectVisible = val" :sendId="sendId"></sendDetail> ')
          ],
          2112
          /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */
        );
      };
    }
  };
  const selectReceive = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["__scopeId", "data-v-5ccd1908"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/receiveSample/selectReceive.vue"]]);
  const _sfc_main$q = {
    __name: "index",
    setup(__props) {
      const dataList2 = vue.ref([]);
      const searchKeyWord = vue.ref();
      function getList() {
        const menuId = getMenuId("项目列表");
        const projectId = uni.getStorageSync("projectId");
        let query = {
          currentPage: 1,
          pageSize: 0,
          sort: "desc",
          sidx: "",
          menuId,
          projectId,
          transNo: searchKeyWord.value
        };
        return getSendSampleList(query).then((res) => {
          dataList2.value = res.data.list.filter((item) => item.transState == "0");
          dataList2.value.receivedCount = res.data.list.reduce((count, item) => {
            return count + item.detailList.filter((val) => val.received === 1).length;
          }, 0);
          dataList2.value.forEach((item) => {
            item.sendCount = item.detailList.filter((val) => val.received == 0).length;
            item.receivedCount = item.detailList.filter((val) => val.received == 1).length;
          });
        });
      }
      const selectSendRef = vue.ref(null);
      const mainVisible = vue.ref(true);
      function goSelectSend(id) {
        selectSendRef.value.selectVisible = true;
        mainVisible.value = false;
        selectSendRef.value.receiveId = id;
        selectSendRef.value.initData(id);
      }
      function goToBack() {
        uni.navigateBack({ delta: 1 });
      }
      const swiperOptions = vue.ref([
        {
          text: "删除",
          style: {
            backgroundColor: "#dd524d"
          }
        }
      ]);
      function swipeClick(e, ctx, id) {
        uni.showModal({
          title: "提示",
          content: "您确定要删除此项吗？",
          success: (res) => {
            if (res.confirm) {
              delSendsampleDetail(id).then((res2) => {
                getList();
              });
              uni.showToast({
                title: "移除成功",
                icon: "none"
              });
            }
          }
        });
      }
      onLoad(() => {
        getList();
      });
      onPullDownRefresh(async () => {
        await getList();
        uni.stopPullDownRefresh();
      });
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_search = resolveEasycom(vue.resolveDynamicComponent("u-search"), __easycom_1$7);
        const _component_uni_swipe_action_item = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action-item"), __easycom_2$3);
        const _component_uni_swipe_action = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action"), __easycom_3$2);
        const _component_u_empty = resolveEasycom(vue.resolveDynamicComponent("u-empty"), __easycom_4$2);
        return vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          null,
          [
            mainVisible.value ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "sd-container"
            }, [
              vue.createElementVNode("view", { class: "status_bar" }, [
                vue.createElementVNode("view", { class: "top_view" })
              ]),
              vue.createElementVNode("view", { class: "content-box" }, [
                vue.createElementVNode("view", {
                  class: "nav-bar",
                  style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
                }, [
                  vue.createVNode(_component_uni_icons, {
                    onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                    type: "left",
                    size: "30",
                    style: { "line-height": "44px" }
                  }),
                  vue.createElementVNode("text", {
                    class: "title",
                    style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
                  }, "收样信息")
                ]),
                vue.createElementVNode("view", { class: "search-box" }, [
                  vue.createVNode(_component_u_search, {
                    placeholder: "搜索批次号",
                    modelValue: searchKeyWord.value,
                    "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => searchKeyWord.value = $event),
                    onSearch: _cache[2] || (_cache[2] = ($event) => getList())
                  }, null, 8, ["modelValue"])
                ]),
                vue.createElementVNode("view", { class: "content-box" }, [
                  dataList2.value.length ? (vue.openBlock(), vue.createBlock(
                    _component_uni_swipe_action,
                    {
                      key: 0,
                      ref: "swipeAction"
                    },
                    {
                      default: vue.withCtx(() => [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList(dataList2.value, (item) => {
                            return vue.openBlock(), vue.createBlock(_component_uni_swipe_action_item, {
                              class: "swipe-item items-box",
                              key: item.id,
                              "right-options": swiperOptions.value,
                              onChange: _cache[3] || (_cache[3] = ($event) => _ctx.swipeChange($event)),
                              onClick: ($event) => swipeClick($event, _ctx.content, item.id)
                            }, {
                              default: vue.withCtx(() => [
                                vue.createElementVNode("view", {
                                  class: "item-box",
                                  onClick: ($event) => goSelectSend(item.id)
                                }, [
                                  vue.createElementVNode("view", { class: "left-item" }, [
                                    vue.createElementVNode(
                                      "view",
                                      { class: "title" },
                                      "批次号：" + vue.toDisplayString(item.transNo),
                                      1
                                      /* TEXT */
                                    ),
                                    vue.createElementVNode("view", { class: "center-zone" }, [
                                      vue.createElementVNode(
                                        "text",
                                        { class: "area" },
                                        "项目号：" + vue.toDisplayString(item.projectName),
                                        1
                                        /* TEXT */
                                      ),
                                      vue.createElementVNode(
                                        "text",
                                        { class: "project" },
                                        vue.toDisplayString(item.typetext),
                                        1
                                        /* TEXT */
                                      )
                                    ]),
                                    vue.createElementVNode(
                                      "text",
                                      { class: "time" },
                                      vue.toDisplayString(item.registertime),
                                      1
                                      /* TEXT */
                                    )
                                  ])
                                ], 8, ["onClick"])
                              ]),
                              _: 2
                              /* DYNAMIC */
                            }, 1032, ["right-options", "onClick"]);
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ]),
                      _: 1
                      /* STABLE */
                    },
                    512
                    /* NEED_PATCH */
                  )) : (vue.openBlock(), vue.createBlock(_component_u_empty, {
                    key: 1,
                    style: { "margin-top": "40px" },
                    text: "暂无数据",
                    mode: "list"
                  }))
                ])
              ])
            ])) : vue.createCommentVNode("v-if", true),
            vue.createVNode(
              selectReceive,
              {
                ref_key: "selectSendRef",
                ref: selectSendRef,
                onEmitVisible: _cache[4] || (_cache[4] = (val) => mainVisible.value = val)
              },
              null,
              512
              /* NEED_PATCH */
            )
          ],
          64
          /* STABLE_FRAGMENT */
        );
      };
    }
  };
  const PagesSampleDetectionReceiveSampleIndex = /* @__PURE__ */ _export_sfc(_sfc_main$q, [["__scopeId", "data-v-43f4092f"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/receiveSample/index.vue"]]);
  const _sfc_main$p = {
    name: "u-numberbox",
    emits: ["update:modelValue", "input", "change", "blur", "plus", "minus"],
    props: {
      // 预显示的数字
      value: {
        type: Number,
        default: 1
      },
      modelValue: {
        type: Number,
        default: 1
      },
      // 背景颜色
      bgColor: {
        type: String,
        default: "#F2F3F5"
      },
      // 最小值
      min: {
        type: Number,
        default: 0
      },
      // 最大值
      max: {
        type: Number,
        default: 99999
      },
      // 步进值，每次加或减的值
      step: {
        type: Number,
        default: 1
      },
      // 步进值，首次增加或最后减的值
      stepFirst: {
        type: Number,
        default: 0
      },
      // 是否只能输入 step 的倍数
      stepStrictly: {
        type: Boolean,
        default: false
      },
      // 是否禁用加减操作
      disabled: {
        type: Boolean,
        default: false
      },
      // input的字体大小，单位rpx
      size: {
        type: [Number, String],
        default: 26
      },
      // 加减图标的颜色
      color: {
        type: String,
        default: "#323233"
      },
      // input宽度，单位rpx
      inputWidth: {
        type: [Number, String],
        default: 80
      },
      // input高度，单位rpx
      inputHeight: {
        type: [Number, String],
        default: 50
      },
      // index索引，用于列表中使用，让用户知道是哪个numberbox发生了变化，一般使用for循环出来的index值即可
      index: {
        type: [Number, String],
        default: ""
      },
      // 是否禁用输入框，与disabled作用于输入框时，为OR的关系，即想要禁用输入框，又可以加减的话
      // 设置disabled为false，disabledInput为true即可
      disabledInput: {
        type: Boolean,
        default: false
      },
      // 输入框于键盘之间的距离
      cursorSpacing: {
        type: [Number, String],
        default: 100
      },
      // 是否开启长按连续递增或递减
      longPress: {
        type: Boolean,
        default: true
      },
      // 开启长按触发后，每触发一次需要多久
      pressTime: {
        type: [Number, String],
        default: 250
      },
      // 是否只能输入大于或等于0的整数(正整数)
      positiveInteger: {
        type: Boolean,
        default: true
      }
    },
    watch: {
      valueCom(v1, v2) {
        if (!this.changeFromInner) {
          this.inputVal = v1;
          this.$nextTick(function() {
            this.changeFromInner = false;
          });
        }
      },
      inputVal(v1, v2) {
        if (v1 == "")
          return;
        let value = 0;
        let tmp = this.isNumber(v1);
        if (tmp && v1 >= this.min && v1 <= this.max)
          value = v1;
        else
          value = v2;
        if (this.positiveInteger) {
          if (v1 < 0 || String(v1).indexOf(".") !== -1) {
            value = v2;
            this.$nextTick(() => {
              this.inputVal = v2;
            });
          }
        }
        this.handleChange(value, "change");
      },
      min(v1) {
        if (v1 !== void 0 && v1 != "" && this.valueCom < v1) {
          this.$emit("input", v1);
        }
      },
      max(v1) {
        if (v1 !== void 0 && v1 != "" && this.valueCom > v1) {
          this.$emit("input", v1);
        }
      }
    },
    data() {
      return {
        inputVal: 1,
        // 输入框中的值，不能直接使用props中的value，因为应该改变props的状态
        timer: null,
        // 用作长按的定时器
        changeFromInner: false,
        // 值发生变化，是来自内部还是外部
        innerChangeTimer: null
        // 内部定时器
      };
    },
    created() {
      this.inputVal = Number(this.valueCom);
    },
    mounted() {
    },
    computed: {
      getCursorSpacing() {
        return Number(uni.upx2px(this.cursorSpacing));
      },
      valueCom() {
        return this.modelValue;
      }
    },
    methods: {
      // 点击退格键
      btnTouchStart(callback) {
        this[callback]();
        if (!this.longPress)
          return;
        clearInterval(this.timer);
        this.timer = null;
        this.timer = setInterval(() => {
          this[callback]();
        }, this.pressTime);
      },
      clearTimer() {
        this.$nextTick(() => {
          clearInterval(this.timer);
          this.timer = null;
        });
      },
      minus() {
        this.computeVal("minus");
      },
      plus() {
        this.computeVal("plus");
      },
      // 为了保证小数相加减出现精度溢出的问题
      calcPlus(num1, num2) {
        let baseNum, baseNum1, baseNum2;
        try {
          baseNum1 = num1.toString().split(".")[1].length;
        } catch (e) {
          baseNum1 = 0;
        }
        try {
          baseNum2 = num2.toString().split(".")[1].length;
        } catch (e) {
          baseNum2 = 0;
        }
        baseNum = Math.pow(10, Math.max(baseNum1, baseNum2));
        let precision = baseNum1 >= baseNum2 ? baseNum1 : baseNum2;
        return ((num1 * baseNum + num2 * baseNum) / baseNum).toFixed(precision);
      },
      // 为了保证小数相加减出现精度溢出的问题
      calcMinus(num1, num2) {
        let baseNum, baseNum1, baseNum2;
        try {
          baseNum1 = num1.toString().split(".")[1].length;
        } catch (e) {
          baseNum1 = 0;
        }
        try {
          baseNum2 = num2.toString().split(".")[1].length;
        } catch (e) {
          baseNum2 = 0;
        }
        baseNum = Math.pow(10, Math.max(baseNum1, baseNum2));
        let precision = baseNum1 >= baseNum2 ? baseNum1 : baseNum2;
        return ((num1 * baseNum - num2 * baseNum) / baseNum).toFixed(precision);
      },
      computeVal(type2) {
        uni.hideKeyboard();
        if (this.disabled)
          return;
        let value = 0;
        if (type2 === "minus") {
          if (this.stepFirst > 0 && this.inputVal == this.stepFirst) {
            value = this.min;
          } else {
            value = this.calcMinus(this.inputVal, this.step);
          }
        } else if (type2 === "plus") {
          if (this.stepFirst > 0 && this.inputVal < this.stepFirst) {
            value = this.stepFirst;
          } else {
            value = this.calcPlus(this.inputVal, this.step);
          }
        }
        if (this.stepStrictly) {
          let strictly = value % this.step;
          if (strictly > 0) {
            value -= strictly;
          }
          if (this.stepFirst > 0 && value > 0 && value < this.stepFirst) {
            if (type2 === "minus") {
              value = 0;
            } else if (type2 === "plus") {
              value = this.stepFirst + (this.step - this.stepFirst % this.step);
            }
          }
        }
        if (value > this.max) {
          value = this.max;
        } else if (value < this.min) {
          value = this.min;
        }
        this.inputVal = value;
        this.handleChange(value, type2);
      },
      // 处理用户手动输入的情况
      onBlur(event) {
        let val = 0;
        let value = event.detail.value;
        if (!/(^\d+$)/.test(value) || value[0] == 0)
          val = this.min;
        val = +value;
        if (this.stepFirst > 0 && this.inputVal < this.stepFirst && this.inputVal > 0) {
          val = this.stepFirst;
        }
        if (this.stepStrictly) {
          let strictly = val % this.step;
          if (strictly > 0) {
            val -= strictly;
          }
          if (this.stepFirst > 0 && val > 0 && val < this.stepFirst) {
            val = this.stepFirst + (this.step - this.stepFirst % this.step);
          }
        }
        if (val > this.max) {
          val = this.max;
        } else if (val < this.min) {
          val = this.min;
        }
        this.$nextTick(() => {
          this.inputVal = val;
        });
        this.handleChange(val, "blur");
      },
      handleChange(value, type2) {
        if (this.disabled)
          return;
        if (this.innerChangeTimer) {
          clearTimeout(this.innerChangeTimer);
          this.innerChangeTimer = null;
        }
        this.changeFromInner = true;
        this.innerChangeTimer = setTimeout(() => {
          this.changeFromInner = false;
        }, 150);
        this.$emit("input", Number(value));
        this.$emit("update:modelValue", Number(value));
        this.$emit(type2, {
          // 转为Number类型
          value: Number(value),
          index: this.index
        });
      },
      /**
       * 验证十进制数字
       */
      isNumber(value) {
        return /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
      }
    }
  };
  function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", { class: "u-numberbox" }, [
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["u-icon-minus", { "u-icon-disabled": $props.disabled || $data.inputVal <= $props.min }]),
          onTouchstart: _cache[0] || (_cache[0] = vue.withModifiers(($event) => $options.btnTouchStart("minus"), ["prevent"])),
          onTouchend: _cache[1] || (_cache[1] = vue.withModifiers((...args) => $options.clearTimer && $options.clearTimer(...args), ["stop", "prevent"])),
          style: vue.normalizeStyle({
            background: $props.bgColor,
            height: $props.inputHeight + "rpx",
            color: $props.color,
            fontSize: $props.size + "rpx",
            minHeight: "1.4em"
          })
        },
        [
          vue.createElementVNode(
            "view",
            {
              style: vue.normalizeStyle("font-size:" + (Number($props.size) + 10) + "rpx"),
              class: "num-btn"
            },
            "－",
            4
            /* STYLE */
          )
        ],
        38
        /* CLASS, STYLE, NEED_HYDRATION */
      ),
      vue.withDirectives(vue.createElementVNode("input", {
        disabled: $props.disabledInput || $props.disabled,
        "cursor-spacing": $options.getCursorSpacing,
        class: vue.normalizeClass([{ "u-input-disabled": $props.disabled }, "u-number-input"]),
        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.inputVal = $event),
        onBlur: _cache[3] || (_cache[3] = (...args) => $options.onBlur && $options.onBlur(...args)),
        type: "number",
        style: vue.normalizeStyle({
          color: $props.color,
          fontSize: $props.size + "rpx",
          background: $props.bgColor,
          height: $props.inputHeight + "rpx",
          width: $props.inputWidth + "rpx"
        })
      }, null, 46, ["disabled", "cursor-spacing"]), [
        [vue.vModelText, $data.inputVal]
      ]),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["u-icon-plus", { "u-icon-disabled": $props.disabled || $data.inputVal >= $props.max }]),
          onTouchstart: _cache[4] || (_cache[4] = vue.withModifiers(($event) => $options.btnTouchStart("plus"), ["prevent"])),
          onTouchend: _cache[5] || (_cache[5] = vue.withModifiers((...args) => $options.clearTimer && $options.clearTimer(...args), ["stop", "prevent"])),
          style: vue.normalizeStyle({
            background: $props.bgColor,
            height: $props.inputHeight + "rpx",
            color: $props.color,
            fontSize: $props.size + "rpx",
            minHeight: "1.4em"
          })
        },
        [
          vue.createElementVNode(
            "view",
            {
              style: vue.normalizeStyle("font-size:" + (Number($props.size) + 10) + "rpx"),
              class: "num-btn"
            },
            "＋",
            4
            /* STYLE */
          )
        ],
        38
        /* CLASS, STYLE, NEED_HYDRATION */
      )
    ]);
  }
  const __easycom_7$1 = /* @__PURE__ */ _export_sfc(_sfc_main$p, [["render", _sfc_render$4], ["__scopeId", "data-v-2bb8fbb0"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-number-box/u-number-box.vue"]]);
  const _sfc_main$o = {
    emits: ["update:modelValue", "input", "confirm"],
    props: {
      // 通过双向绑定控制组件的弹出与收起
      value: {
        type: Boolean,
        default: false
      },
      modelValue: {
        type: Boolean,
        default: false
      },
      // 列数据
      list: {
        type: Array,
        default() {
          return [];
        }
      },
      // 是否显示边框
      border: {
        type: Boolean,
        default: true
      },
      // "取消"按钮的颜色
      cancelColor: {
        type: String,
        default: "#606266"
      },
      // "确定"按钮的颜色
      confirmColor: {
        type: String,
        default: "#2979ff"
      },
      // 弹出的z-index值
      zIndex: {
        type: [String, Number],
        default: 0
      },
      safeAreaInsetBottom: {
        type: Boolean,
        default: false
      },
      // 是否允许通过点击遮罩关闭Picker
      maskCloseAble: {
        type: Boolean,
        default: true
      },
      // 提供的默认选中的下标
      defaultValue: {
        type: Array,
        default() {
          return [0];
        }
      },
      // 模式选择，single-column-单列，mutil-column-多列，mutil-column-auto-多列联动
      mode: {
        type: String,
        default: "single-column"
      },
      // 自定义value属性名
      valueName: {
        type: String,
        default: "value"
      },
      // 自定义label属性名
      labelName: {
        type: String,
        default: "label"
      },
      // 自定义多列联动模式的children属性名
      childName: {
        type: String,
        default: "children"
      },
      // 顶部标题
      title: {
        type: String,
        default: ""
      },
      // 取消按钮的文字
      cancelText: {
        type: String,
        default: "取消"
      },
      // 确认按钮的文字
      confirmText: {
        type: String,
        default: "确认"
      },
      // 遮罩的模糊度
      blur: {
        type: [Number, String],
        default: 0
      }
    },
    data() {
      return {
        popupValue: false,
        // 用于列改变时，保存当前的索引，下一次变化时比较得出是哪一列发生了变化
        defaultSelector: [0],
        // picker-view的数据
        columnData: [],
        // 每次队列发生变化时，保存选择的结果
        selectValue: [],
        // 上一次列变化时的index
        lastSelectIndex: [],
        // 列数
        columnNum: 0,
        // 列是否还在滑动中，微信小程序如果在滑动中就点确定，结果可能不准确
        moving: false,
        reset: false
      };
    },
    watch: {
      // 在select弹起的时候，重新初始化所有数据
      valueCom: {
        immediate: true,
        handler(val) {
          if (val) {
            this.reset = true;
            setTimeout(() => this.init(), 10);
          }
          this.popupValue = val;
        }
      }
    },
    computed: {
      uZIndex() {
        return this.zIndex ? this.zIndex : this.$u.zIndex.popup;
      },
      valueCom() {
        return this.modelValue;
      },
      // 用来兼容小程序、App、h5
      showColumnCom() {
        return true;
      }
    },
    methods: {
      // 标识滑动开始，只有微信小程序才有这样的事件
      pickstart() {
      },
      // 标识滑动结束
      pickend() {
      },
      init() {
        this.reset = false;
        this.setColumnNum();
        this.setDefaultSelector();
        this.setColumnData();
        this.setSelectValue();
      },
      // 获取默认选中列下标
      setDefaultSelector() {
        this.defaultSelector = this.defaultValue.length == this.columnNum ? this.defaultValue : Array(this.columnNum).fill(0);
        this.lastSelectIndex = this.$u.deepClone(this.defaultSelector);
      },
      // 计算列数
      setColumnNum() {
        if (this.mode == "single-column")
          this.columnNum = 1;
        else if (this.mode == "mutil-column")
          this.columnNum = this.list.length;
        else if (this.mode == "mutil-column-auto") {
          let num = 1;
          let column = this.list;
          while (column[0][this.childName]) {
            column = column[0] ? column[0][this.childName] : {};
            num++;
          }
          this.columnNum = num;
        }
      },
      // 获取需要展示在picker中的列数据
      setColumnData() {
        let data = [];
        this.selectValue = [];
        if (this.mode == "mutil-column-auto") {
          let column = this.list[this.defaultSelector.length ? this.defaultSelector[0] : 0];
          for (let i = 0; i < this.columnNum; i++) {
            if (i == 0) {
              data[i] = this.list;
              column = column[this.childName];
            } else {
              data[i] = column;
              column = column[this.defaultSelector[i]][this.childName];
            }
          }
        } else if (this.mode == "single-column") {
          data[0] = this.list;
        } else {
          data = this.list;
        }
        this.columnData = data;
      },
      // 获取默认选中的值，如果没有设置defaultValue，就默认选中每列的第一个
      setSelectValue() {
        let tmp = null;
        for (let i = 0; i < this.columnNum; i++) {
          tmp = this.columnData[i][this.defaultSelector[i]];
          let data = {
            index: this.defaultSelector[i],
            value: tmp ? tmp[this.valueName] : null,
            label: tmp ? tmp[this.labelName] : null
          };
          if (tmp && tmp.extra !== void 0)
            data.extra = tmp.extra;
          this.selectValue.push(data);
        }
      },
      // 列选项
      columnChange(e) {
        let index = null;
        let columnIndex = e.detail.value;
        this.selectValue = [];
        if (this.mode == "mutil-column-auto") {
          this.lastSelectIndex.map((val, idx) => {
            if (val != columnIndex[idx])
              index = idx;
          });
          this.defaultSelector = columnIndex;
          for (let i = index + 1; i < this.columnNum; i++) {
            this.columnData[i] = this.columnData[i - 1][i - 1 == index ? columnIndex[index] : 0][this.childName];
            this.defaultSelector[i] = 0;
          }
          columnIndex.map((item, index2) => {
            let data = this.columnData[index2][columnIndex[index2]];
            let tmp = {
              index: columnIndex[index2],
              value: data ? data[this.valueName] : null,
              label: data ? data[this.labelName] : null
            };
            if (data && data.extra !== void 0)
              tmp.extra = data.extra;
            this.selectValue.push(tmp);
          });
          this.lastSelectIndex = columnIndex;
        } else if (this.mode == "single-column") {
          let data = this.columnData[0][columnIndex[0]];
          let tmp = {
            index: columnIndex[0],
            value: data ? data[this.valueName] : null,
            label: data ? data[this.labelName] : null
          };
          if (data && data.extra !== void 0)
            tmp.extra = data.extra;
          this.selectValue.push(tmp);
          this.lastSelectIndex = columnIndex;
        } else if (this.mode == "mutil-column") {
          columnIndex.map((item, index2) => {
            let data = this.columnData[index2][columnIndex[index2]];
            let tmp = {
              index: columnIndex[index2],
              value: data ? data[this.valueName] : null,
              label: data ? data[this.labelName] : null
            };
            if (data && data.extra !== void 0)
              tmp.extra = data.extra;
            this.selectValue.push(tmp);
          });
          this.lastSelectIndex = columnIndex;
        }
      },
      close() {
        this.$emit("input", false);
        this.$emit("update:modelValue", false);
      },
      // 点击确定或者取消
      getResult(event = null) {
        if (event)
          this.$emit(event, this.selectValue);
        this.close();
      },
      selectHandler() {
        this.$emit("click");
      }
    }
  };
  function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
    const _component_u_popup = resolveEasycom(vue.resolveDynamicComponent("u-popup"), __easycom_5$2);
    return vue.openBlock(), vue.createElementBlock("view", { class: "u-select" }, [
      vue.createCommentVNode(` <view class="u-select__action" :class="{\r
			'u-select--border': border\r
		}" @tap.stop="selectHandler">\r
			<view class="u-select__action__icon" :class="{\r
				'u-select__action__icon--reverse': value == true\r
			}">\r
				<u-icon name="arrow-down-fill" size="26" color="#c0c4cc"></u-icon>\r
			</view>\r
		</view> `),
      vue.createVNode(_component_u_popup, {
        blur: $props.blur,
        maskCloseAble: $props.maskCloseAble,
        mode: "bottom",
        popup: false,
        modelValue: $data.popupValue,
        "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.popupValue = $event),
        length: "auto",
        safeAreaInsetBottom: $props.safeAreaInsetBottom,
        onClose: $options.close,
        "z-index": $options.uZIndex
      }, {
        default: vue.withCtx(() => [
          vue.createElementVNode("view", { class: "u-select" }, [
            vue.createElementVNode(
              "view",
              {
                class: "u-select__header",
                onTouchmove: _cache[3] || (_cache[3] = vue.withModifiers(() => {
                }, ["stop", "prevent"]))
              },
              [
                vue.createElementVNode(
                  "view",
                  {
                    class: "u-select__header__cancel u-select__header__btn",
                    style: vue.normalizeStyle({ color: $props.cancelColor }),
                    "hover-class": "u-hover-class",
                    "hover-stay-time": 150,
                    onClick: _cache[0] || (_cache[0] = ($event) => $options.getResult("cancel"))
                  },
                  vue.toDisplayString($props.cancelText),
                  5
                  /* TEXT, STYLE */
                ),
                vue.createElementVNode(
                  "view",
                  { class: "u-select__header__title" },
                  vue.toDisplayString($props.title),
                  1
                  /* TEXT */
                ),
                vue.createElementVNode(
                  "view",
                  {
                    class: "u-select__header__confirm u-select__header__btn",
                    style: vue.normalizeStyle({ color: $data.moving ? $props.cancelColor : $props.confirmColor }),
                    "hover-class": "u-hover-class",
                    "hover-stay-time": 150,
                    onTouchmove: _cache[1] || (_cache[1] = vue.withModifiers(() => {
                    }, ["stop"])),
                    onClick: _cache[2] || (_cache[2] = vue.withModifiers(($event) => $options.getResult("confirm"), ["stop"]))
                  },
                  vue.toDisplayString($props.confirmText),
                  37
                  /* TEXT, STYLE, NEED_HYDRATION */
                )
              ],
              32
              /* NEED_HYDRATION */
            ),
            vue.createElementVNode("view", { class: "u-select__body" }, [
              vue.createElementVNode("picker-view", {
                onChange: _cache[4] || (_cache[4] = (...args) => $options.columnChange && $options.columnChange(...args)),
                class: "u-select__body__picker-view",
                value: $data.defaultSelector,
                onPickstart: _cache[5] || (_cache[5] = (...args) => $options.pickstart && $options.pickstart(...args)),
                onPickend: _cache[6] || (_cache[6] = (...args) => $options.pickend && $options.pickend(...args))
              }, [
                $options.showColumnCom ? (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  { key: 0 },
                  vue.renderList($data.columnData, (item, index) => {
                    return vue.openBlock(), vue.createElementBlock("picker-view-column", { key: index }, [
                      (vue.openBlock(true), vue.createElementBlock(
                        vue.Fragment,
                        null,
                        vue.renderList(item, (item1, index1) => {
                          return vue.openBlock(), vue.createElementBlock("view", {
                            class: "u-select__body__picker-view__item",
                            key: index1
                          }, [
                            vue.createElementVNode(
                              "view",
                              { class: "u-line-1" },
                              vue.toDisplayString(item1[$props.labelName]),
                              1
                              /* TEXT */
                            )
                          ]);
                        }),
                        128
                        /* KEYED_FRAGMENT */
                      ))
                    ]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                )) : vue.createCommentVNode("v-if", true)
              ], 40, ["value"])
            ])
          ])
        ]),
        _: 1
        /* STABLE */
      }, 8, ["blur", "maskCloseAble", "modelValue", "safeAreaInsetBottom", "onClose", "z-index"])
    ]);
  }
  const __easycom_8$1 = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["render", _sfc_render$3], ["__scopeId", "data-v-2ab5fcb0"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-select/u-select.vue"]]);
  const _sfc_main$n = {
    __name: "tMap",
    emits: ["emitLocation", "emitVisible"],
    setup(__props, { emit: __emit }) {
      const emits = __emit;
      onReady(() => {
      });
      function onMessage(res) {
        formatAppLog("log", "at pages/sampleDetection/sampling/monitorPoint/tMap.vue:54", "app接收网页消息:", res.detail.data[0]);
        emits("emitLocation", res.detail.data[0]);
        emits("emitVisible", true);
        getPositon(res.detail.data[0]);
      }
      function getPositon(res, self) {
        uni.$emit("onAddressChange", res);
      }
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("view", { class: "main-container" }, [
          vue.createElementVNode("view", { class: "status_bar" }, [
            vue.createElementVNode("view", { class: "top_view" })
          ]),
          vue.createElementVNode("view", { class: "mo-container" }, [
            vue.createElementVNode("view", { class: "map-box" }, [
              vue.createElementVNode(
                "web-view",
                {
                  src: "/static/map.html",
                  onMessage
                },
                null,
                32
                /* NEED_HYDRATION */
              )
            ])
          ])
        ]);
      };
    }
  };
  const tMap = /* @__PURE__ */ _export_sfc(_sfc_main$n, [["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sampling/monitorPoint/tMap.vue"]]);
  const _sfc_main$m = {
    __name: "addOrEditor",
    setup(__props) {
      const mainVisible = vue.ref(true);
      const location = vue.ref();
      function emitLocation(val) {
        location.value = val;
        dataForm.longitude = val.latlng.lng;
        dataForm.latitude = val.latlng.lat;
      }
      const holeTypeOptions = vue.reactive({
        show: false,
        current: {},
        list: []
      });
      function getHoleTypeOptions() {
        getDictionaryDataSelector("485002738363531269").then((res) => {
          holeTypeOptions.list = res.data.list;
        });
      }
      function onHoleTypeOptions(arr) {
        let current = arr[0];
        holeTypeOptions.current = current;
        dataForm.holeType = current.label;
      }
      const timeParams = vue.reactive({
        year: true,
        month: true,
        day: true,
        hour: true,
        minute: true,
        second: true
      });
      const curTimeKey = vue.ref(null);
      const selectTimeVisible = vue.ref(false);
      function getTime(e) {
        if (curTimeKey.value === "startTime")
          dataForm.startTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
        else if (curTimeKey.value === "endTime")
          dataForm.endTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
      }
      let dataForm = vue.reactive({
        projectId: "",
        holeNo: "",
        holeType: "",
        startTime: "",
        endTime: "",
        longitude: "",
        latitude: "",
        diameter: 0,
        sWaterLevel: 0,
        elevation: 0,
        reevlResouce: "",
        remark: "",
        files: []
      });
      function showPickerDate(value) {
        curTimeKey.value = value, selectTimeVisible.value = true;
      }
      function parseData(data) {
        var _data = JSON.parse(JSON.stringify(data));
        if (_data.files) {
          _data.files = JSON.stringify(_data.files);
        } else {
          _data.files = "[]";
        }
        _data.projectId = uni.getStorageSync("projectId");
        _data.id = uni.getStorageSync("holeId");
        return _data;
      }
      function addOrUpdateData() {
        dataForm = parseData(dataForm);
        if (!dataForm.id) {
          getHoleBaseDetail(dataForm).then((res) => formatAppLog("log", "at pages/sampleDetection/sampling/monitorPoint/addOrEditor.vue:161", "success!"));
        } else {
          updateHoleRecord(dataForm.id, dataForm);
        }
      }
      function initData() {
        const id = uni.getStorageSync("holeId");
        if (id) {
          getHoleBaseDetail(id).then((res) => {
            dataInfo(res.data);
          });
        }
      }
      onLoad(async () => {
        initData();
        getHoleTypeOptions();
      });
      function goToBack() {
        uni.setStorageSync("holeId", null);
        uni.navigateBack({
          delta: 1
        });
      }
      function dataInfo(dataAll) {
        let _dataAll = dataAll;
        if (_dataAll.files) {
          _dataAll.files = JSON.parse(_dataAll.files);
        } else {
          _dataAll.files = [];
        }
        Object.assign(dataForm, _dataAll);
      }
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_toast = resolveEasycom(vue.resolveDynamicComponent("u-toast"), __easycom_1$1);
        const _component_u_input = resolveEasycom(vue.resolveDynamicComponent("u-input"), __easycom_2$2);
        const _component_u_form_item = resolveEasycom(vue.resolveDynamicComponent("u-form-item"), __easycom_3$1);
        const _component_u_number_box = resolveEasycom(vue.resolveDynamicComponent("u-number-box"), __easycom_7$1);
        const _component_u_form = resolveEasycom(vue.resolveDynamicComponent("u-form"), __easycom_4$1);
        const _component_u_picker = resolveEasycom(vue.resolveDynamicComponent("u-picker"), __easycom_5$1);
        const _component_u_select = resolveEasycom(vue.resolveDynamicComponent("u-select"), __easycom_8$1);
        return mainVisible.value ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "main-container"
        }, [
          vue.createElementVNode("view", { class: "status_bar" }, [
            vue.createElementVNode("view", { class: "top_view" })
          ]),
          vue.createElementVNode("view", { class: "mo-container" }, [
            vue.createElementVNode("view", {
              class: "nav-bar",
              style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
            }, [
              vue.createVNode(_component_uni_icons, {
                onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                type: "left",
                size: "30",
                style: { "line-height": "44px" }
              }),
              vue.createElementVNode("text", {
                class: "title",
                style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
              }, "建井信息"),
              vue.createElementVNode("text", {
                onClick: _cache[1] || (_cache[1] = ($event) => addOrUpdateData()),
                type: "primary",
                class: "submit",
                style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
              }, "保存")
            ]),
            vue.createVNode(
              _component_u_toast,
              { ref: "uToast" },
              null,
              512
              /* NEED_PATCH */
            ),
            vue.createVNode(_component_u_form, {
              model: vue.unref(dataForm),
              ref: "Form",
              style: { "margin": "10px" }
            }, {
              default: vue.withCtx(() => [
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "钻孔编号",
                  prop: "holeNo"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_input, {
                      modelValue: vue.unref(dataForm).holeNo,
                      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => vue.unref(dataForm).holeNo = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "采样类型",
                  prop: "holeType"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_input, {
                      modelValue: holeTypeOptions.current.label,
                      "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => holeTypeOptions.current.label = $event),
                      type: "select",
                      onClick: _cache[4] || (_cache[4] = ($event) => holeTypeOptions.show = true)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "经纬度",
                  prop: "startTime"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_input, {
                      modelValue: vue.unref(dataForm).longitude,
                      "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => vue.unref(dataForm).longitude = $event)
                    }, null, 8, ["modelValue"]),
                    vue.createVNode(_component_u_input, {
                      modelValue: vue.unref(dataForm).latitude,
                      "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => vue.unref(dataForm).latitude = $event)
                    }, null, 8, ["modelValue"]),
                    vue.createVNode(_component_uni_icons, {
                      onClick: _cache[7] || (_cache[7] = ($event) => mainVisible.value = false),
                      type: "location-filled",
                      size: "30",
                      style: { "color": "green" }
                    })
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "开始时间",
                  prop: "startTime"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_input, {
                      onClick: _cache[8] || (_cache[8] = ($event) => showPickerDate("startTime")),
                      modelValue: vue.unref(dataForm).startTime,
                      "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => vue.unref(dataForm).startTime = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "结束时间",
                  prop: "endTime"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_input, {
                      onClick: _cache[10] || (_cache[10] = ($event) => showPickerDate("endTime")),
                      modelValue: vue.unref(dataForm).endTime,
                      "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => vue.unref(dataForm).endTime = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "钻孔直径",
                  prop: "diameter"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_number_box, {
                      "positive-integer": false,
                      modelValue: vue.unref(dataForm).diameter,
                      "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => vue.unref(dataForm).diameter = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "初见水位埋深",
                  prop: "sWaterLevel"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_number_box, {
                      "positive-integer": false,
                      modelValue: vue.unref(dataForm).sWaterLevel,
                      "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => vue.unref(dataForm).sWaterLevel = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "地面高程",
                  prop: "elevation"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_number_box, {
                      "positive-integer": false,
                      modelValue: vue.unref(dataForm).elevation,
                      "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => vue.unref(dataForm).elevation = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "参考高程来源",
                  prop: "reevlResouce"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_input, {
                      modelValue: vue.unref(dataForm).reevlResouce,
                      "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => vue.unref(dataForm).reevlResouce = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "备注",
                  prop: "remark"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_input, {
                      modelValue: vue.unref(dataForm).remark,
                      "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => vue.unref(dataForm).remark = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "上传图片",
                  prop: "file"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(upload, {
                      "onUpdate:value": _cache[17] || (_cache[17] = (val) => {
                        vue.unref(dataForm).files = val;
                      }),
                      value: vue.unref(dataForm).files
                    }, null, 8, ["value"])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }, 8, ["model"]),
            vue.createVNode(_component_u_picker, {
              modelValue: selectTimeVisible.value,
              "onUpdate:modelValue": _cache[18] || (_cache[18] = ($event) => selectTimeVisible.value = $event),
              mode: "time",
              params: timeParams,
              onConfirm: getTime,
              "default-time": vue.unref(getCurrentTime)()
            }, null, 8, ["modelValue", "params", "default-time"]),
            vue.createVNode(_component_u_select, {
              modelValue: holeTypeOptions.show,
              "onUpdate:modelValue": _cache[19] || (_cache[19] = ($event) => holeTypeOptions.show = $event),
              "value-name": "enCode",
              "label-name": "fullName",
              list: holeTypeOptions.list,
              onConfirm: onHoleTypeOptions
            }, null, 8, ["modelValue", "list"])
          ])
        ])) : (vue.openBlock(), vue.createBlock(tMap, {
          key: 1,
          onEmitVisible: _cache[20] || (_cache[20] = (val) => mainVisible.value = val),
          onEmitLocation: emitLocation
        }));
      };
    }
  };
  const PagesSampleDetectionSamplingMonitorPointAddOrEditor = /* @__PURE__ */ _export_sfc(_sfc_main$m, [["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sampling/monitorPoint/addOrEditor.vue"]]);
  const _sfc_main$l = {
    emits: ["select-change"],
    name: "ba-tree-picker",
    props: {
      valueKey: {
        type: String,
        default: "id"
      },
      textKey: {
        type: String,
        default: "name"
      },
      childrenKey: {
        type: String,
        default: "children"
      },
      localdata: {
        type: Array,
        default: function() {
          return [];
        }
      },
      localTreeList: {
        //在已经格式化好的数据
        type: Array,
        default: function() {
          return [];
        }
      },
      selectedData: {
        type: Array,
        default: function() {
          return [];
        }
      },
      title: {
        type: String,
        default: ""
      },
      multiple: {
        // 是否可以多选
        type: Boolean,
        default: true
      },
      selectParent: {
        //是否可以选父级
        type: Boolean,
        default: true
      },
      confirmColor: {
        // 确定按钮颜色
        type: String,
        default: ""
        // #0055ff
      },
      cancelColor: {
        // 取消按钮颜色
        type: String,
        default: ""
        // #757575
      },
      titleColor: {
        // 标题颜色
        type: String,
        default: ""
        //
      },
      switchColor: {
        // 节点切换图标颜色
        type: String,
        default: ""
        // #666
      },
      border: {
        // 是否有分割线
        type: Boolean,
        default: false
      },
      propsInitId: {
        type: Array,
        default: () => []
      }
    },
    data() {
      return {
        showDialog: false,
        treeList: []
      };
    },
    computed: {},
    methods: {
      _show() {
        this.showDialog = true;
      },
      _hide() {
        this.showDialog = false;
      },
      _cancel() {
        this._hide();
        this.$emit("cancel", "");
      },
      _confirm() {
        let selectedList = [];
        let selectedNames;
        this.treeList.forEach((item, index) => {
          if (item.checkStatus === 2 && item.isLastLevel) {
            selectedList.push(item.id);
            selectedNames = selectedNames ? selectedNames + " / " + item.name : item.name;
          }
        });
        this._hide();
        this.$emit("select-change", selectedList, selectedNames);
      },
      //格式化原数据（原数据为tree结构）
      _formatTreeData(list = [], level = 0, parentItem, isShowChild = true) {
        let nextIndex = 0;
        let parentId = -1;
        let initCheckStatus = 0;
        if (parentItem) {
          nextIndex = this.treeList.findIndex((item) => item.id === parentItem.id) + 1;
          parentId = parentItem.id;
          if (!this.multiple) {
            initCheckStatus = 0;
          } else
            initCheckStatus = parentItem.checkStatus == 2 ? 2 : 0;
        }
        list.forEach((item) => {
          let isLastLevel = true;
          if (item && item[this.childrenKey]) {
            let children = item[this.childrenKey];
            if (Array.isArray(children) && children.length > 0) {
              isLastLevel = false;
            }
          }
          let itemT = {
            id: item[this.valueKey],
            name: item[this.textKey],
            level,
            isLastLevel,
            isShow: isShowChild,
            isShowChild: false,
            checkStatus: initCheckStatus,
            orCheckStatus: 0,
            parentId,
            children: item[this.childrenKey],
            childCount: item[this.childrenKey] ? item[this.childrenKey].length : 0,
            childCheckCount: 0,
            childCheckPCount: 0
          };
          if (this.selectedData.indexOf(itemT.id) >= 0) {
            itemT.checkStatus = 2;
            itemT.orCheckStatus = 2;
            itemT.childCheckCount = itemT.children ? itemT.children.length : 0;
            this._onItemParentSelect(itemT, nextIndex);
          }
          this.treeList.splice(nextIndex, 0, itemT);
          nextIndex++;
        });
      },
      // 节点打开、关闭切换
      _onItemSwitch(item, index) {
        if (item.isLastLevel === true) {
          return;
        }
        item.isShowChild = !item.isShowChild;
        if (item.children) {
          this._formatTreeData(item.children, item.level + 1, item);
          item.children = void 0;
        } else {
          this._onItemChildSwitch(item, index);
        }
      },
      _onItemChildSwitch(item, index) {
        const firstChildIndex = index + 1;
        if (firstChildIndex > 0)
          for (var i = firstChildIndex; i < this.treeList.length; i++) {
            let itemChild = this.treeList[i];
            if (itemChild.level > item.level) {
              if (item.isShowChild) {
                if (itemChild.parentId === item.id) {
                  itemChild.isShow = item.isShowChild;
                  if (!itemChild.isShow) {
                    itemChild.isShowChild = false;
                  }
                }
              } else {
                itemChild.isShow = item.isShowChild;
                itemChild.isShowChild = false;
              }
            } else {
              return;
            }
          }
      },
      // 节点选中、取消选中
      _onItemSelect(item, index) {
        if (!this.multiple) {
          item.checkStatus = item.checkStatus == 0 ? 2 : 0;
          this.treeList.forEach((v, i) => {
            if (i != index) {
              this.treeList[i].checkStatus = 0;
            } else {
              this.treeList[i].checkStatus = 2;
            }
          });
          let selectedList = [];
          let selectedNames;
          selectedList.push(item.id);
          selectedNames = item.name;
          this._hide();
          this.$emit("select-change", selectedList, selectedNames);
          return;
        }
        let oldCheckStatus = item.checkStatus;
        switch (oldCheckStatus) {
          case 0:
            item.checkStatus = 2;
            item.childCheckCount = item.childCount;
            item.childCheckPCount = 0;
            break;
          case 1:
          case 2:
            item.checkStatus = 0;
            item.childCheckCount = 0;
            item.childCheckPCount = 0;
            break;
        }
        this._onItemChildSelect(item, index);
        this._onItemParentSelect(item, index, oldCheckStatus);
      },
      _onItemChildSelect(item, index) {
        if (item.childCount && item.childCount > 0) {
          index++;
          while (index < this.treeList.length && this.treeList[index].level > item.level) {
            let itemChild = this.treeList[index];
            itemChild.checkStatus = item.checkStatus;
            if (itemChild.checkStatus == 2) {
              itemChild.childCheckCount = itemChild.childCount;
              itemChild.childCheckPCount = 0;
            } else if (itemChild.checkStatus == 0) {
              itemChild.childCheckCount = 0;
              itemChild.childCheckPCount = 0;
            }
            index++;
          }
        }
      },
      _onItemParentSelect(item, index, oldCheckStatus) {
        const parentIndex = this.treeList.findIndex((itemP) => itemP.id == item.parentId);
        if (parentIndex >= 0) {
          let itemParent = this.treeList[parentIndex];
          itemParent.childCheckCount;
          let oldCheckStatusParent = itemParent.checkStatus;
          if (oldCheckStatus == 1) {
            itemParent.childCheckPCount -= 1;
          } else if (oldCheckStatus == 2) {
            itemParent.childCheckCount -= 1;
          }
          if (item.checkStatus == 1) {
            itemParent.childCheckPCount += 1;
          } else if (item.checkStatus == 2) {
            itemParent.childCheckCount += 1;
          }
          if (itemParent.childCheckCount <= 0 && itemParent.childCheckPCount <= 0) {
            itemParent.childCheckCount = 0;
            itemParent.childCheckPCount = 0;
            itemParent.checkStatus = 0;
          } else if (itemParent.childCheckCount >= itemParent.childCount) {
            itemParent.childCheckCount = itemParent.childCount;
            itemParent.childCheckPCount = 0;
            itemParent.checkStatus = 2;
          } else {
            itemParent.checkStatus = 1;
          }
          this._onItemParentSelect(itemParent, parentIndex, oldCheckStatusParent);
        }
      },
      // 重置数据
      _reTreeList() {
        this.treeList.forEach((v, i) => {
          this.treeList[i].checkStatus = v.orCheckStatus;
        });
      },
      initData() {
        this.treeList.forEach((item, index) => {
          this.findSelected(item);
        });
      },
      findSelected(node) {
        if (this.propsInitId.length > 0 && this.propsInitId) {
          this.propsInitId.forEach((id) => {
            if (id === node.id) {
              node.checkStatus;
              node.checkStatus = 2;
              node.childCheckCount = node.childCount;
              node.childCheckPCount = 0;
            }
          });
        }
        if (!node.children || node.children.length === 0)
          return;
        else {
          node.children.forEach((child) => {
            this.findSelected(child);
          });
        }
      },
      _initTree() {
        this.treeList = [];
        this._formatTreeData(this.localdata);
      }
    },
    watch: {
      localdata() {
        this._initTree();
      },
      localTreeList() {
        this.treeList = this.localTreeList;
        this.initData();
      },
      treeList: {
        handler(val) {
          this.$nextTick(() => {
            this.initData();
          });
        },
        deep: true
      }
    },
    mounted() {
      this._initTree();
    }
  };
  function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock("view", null, [
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["tree-cover", { "show": $data.showDialog }]),
          onClick: _cache[0] || (_cache[0] = (...args) => $options._cancel && $options._cancel(...args))
        },
        null,
        2
        /* CLASS */
      ),
      vue.createElementVNode(
        "view",
        {
          class: vue.normalizeClass(["tree-dialog", { "show": $data.showDialog }])
        },
        [
          vue.createElementVNode("view", { class: "tree-bar" }, [
            vue.createElementVNode(
              "view",
              {
                class: "tree-bar-cancel",
                style: vue.normalizeStyle({ "color": $props.cancelColor }),
                "hover-class": "hover-c",
                onClick: _cache[1] || (_cache[1] = (...args) => $options._cancel && $options._cancel(...args))
              },
              "取消 ",
              4
              /* STYLE */
            ),
            vue.createElementVNode(
              "view",
              {
                class: "tree-bar-title",
                style: vue.normalizeStyle({ "color": $props.titleColor })
              },
              vue.toDisplayString($props.title),
              5
              /* TEXT, STYLE */
            ),
            vue.createElementVNode(
              "view",
              {
                class: "tree-bar-confirm",
                style: vue.normalizeStyle({ "color": $props.confirmColor }),
                "hover-class": "hover-c",
                onClick: _cache[2] || (_cache[2] = (...args) => $options._confirm && $options._confirm(...args))
              },
              vue.toDisplayString($props.multiple ? "确定" : ""),
              5
              /* TEXT, STYLE */
            )
          ]),
          vue.createElementVNode("view", { class: "tree-view" }, [
            vue.createElementVNode("scroll-view", {
              class: "tree-list",
              "scroll-y": true
            }, [
              (vue.openBlock(true), vue.createElementBlock(
                vue.Fragment,
                null,
                vue.renderList($data.treeList, (item, index) => {
                  return vue.openBlock(), vue.createElementBlock(
                    "view",
                    {
                      key: index,
                      class: vue.normalizeClass(["tree-item", {
                        itemBorder: $props.border === true,
                        show: item.isShow
                      }]),
                      style: vue.normalizeStyle([{
                        paddingLeft: item.level * 30 + "rpx"
                      }])
                    },
                    [
                      vue.createElementVNode("view", { class: "item-label" }, [
                        vue.createElementVNode("view", {
                          class: "item-icon uni-inline-item",
                          onClick: vue.withModifiers(($event) => $options._onItemSwitch(item, index), ["stop"])
                        }, [
                          !item.isLastLevel && item.isShowChild ? (vue.openBlock(), vue.createElementBlock(
                            "view",
                            {
                              key: 0,
                              class: "switch-on",
                              style: vue.normalizeStyle({ "border-left-color": $props.switchColor })
                            },
                            null,
                            4
                            /* STYLE */
                          )) : !item.isLastLevel && !item.isShowChild ? (vue.openBlock(), vue.createElementBlock(
                            "view",
                            {
                              key: 1,
                              class: "switch-off",
                              style: vue.normalizeStyle({ "border-top-color": $props.switchColor })
                            },
                            null,
                            4
                            /* STYLE */
                          )) : (vue.openBlock(), vue.createElementBlock(
                            "view",
                            {
                              key: 2,
                              class: "item-last-dot",
                              style: vue.normalizeStyle({ "border-top-color": $props.switchColor })
                            },
                            null,
                            4
                            /* STYLE */
                          ))
                        ], 8, ["onClick"]),
                        vue.createElementVNode("view", {
                          class: "uni-flex-item uni-inline-item",
                          onClick: vue.withModifiers(($event) => $options._onItemSelect(item, index), ["stop"])
                        }, [
                          vue.createElementVNode(
                            "view",
                            { class: "item-name" },
                            vue.toDisplayString(item.name + (item.childCount ? "(" + item.childCount + ")" : "")),
                            1
                            /* TEXT */
                          ),
                          ($props.selectParent ? true : item.isLastLevel) ? (vue.openBlock(), vue.createElementBlock("view", {
                            key: 0,
                            class: "item-check"
                          }, [
                            item.checkStatus == 1 ? (vue.openBlock(), vue.createElementBlock(
                              "view",
                              {
                                key: 0,
                                class: vue.normalizeClass(["item-check-yes", { "radio": !$props.multiple }]),
                                style: vue.normalizeStyle({ "border-color": $props.confirmColor })
                              },
                              [
                                vue.createElementVNode(
                                  "view",
                                  {
                                    class: "item-check-yes-part",
                                    style: vue.normalizeStyle({ "background-color": $props.confirmColor })
                                  },
                                  null,
                                  4
                                  /* STYLE */
                                )
                              ],
                              6
                              /* CLASS, STYLE */
                            )) : item.checkStatus == 2 ? (vue.openBlock(), vue.createElementBlock(
                              "view",
                              {
                                key: 1,
                                class: vue.normalizeClass(["item-check-yes", { "radio": !$props.multiple }]),
                                style: vue.normalizeStyle({ "border-color": $props.confirmColor })
                              },
                              [
                                vue.createElementVNode(
                                  "view",
                                  {
                                    class: "item-check-yes-all",
                                    style: vue.normalizeStyle({ "background-color": $props.confirmColor })
                                  },
                                  null,
                                  4
                                  /* STYLE */
                                )
                              ],
                              6
                              /* CLASS, STYLE */
                            )) : (vue.openBlock(), vue.createElementBlock(
                              "view",
                              {
                                key: 2,
                                class: vue.normalizeClass(["item-check-no", { "radio": !$props.multiple }]),
                                style: vue.normalizeStyle({ "border-color": $props.confirmColor })
                              },
                              null,
                              6
                              /* CLASS, STYLE */
                            ))
                          ])) : vue.createCommentVNode("v-if", true)
                        ], 8, ["onClick"])
                      ])
                    ],
                    6
                    /* CLASS, STYLE */
                  );
                }),
                128
                /* KEYED_FRAGMENT */
              ))
            ])
          ])
        ],
        2
        /* CLASS */
      )
    ]);
  }
  const __easycom_8 = /* @__PURE__ */ _export_sfc(_sfc_main$l, [["render", _sfc_render$2], ["__scopeId", "data-v-c951339f"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/components/ba-tree-picker/ba-tree-picker.vue"]]);
  const _sfc_main$k = {
    __name: "addOrEditor",
    setup(__props) {
      const factorTreeList = vue.ref([]);
      const treePicker = vue.ref();
      const selectName = vue.ref([]);
      function getfactorTypeOptions() {
        const _query = {};
        const id = "505417419548805189";
        getFactorTreeList(id, _query).then((res) => {
          factorTreeList.value = res.data.list;
        });
      }
      function showPicker() {
        treePicker.value._show();
      }
      function selectChange(ids, names) {
        dataForm.analysisFactorIds = ids;
        selectName.value = names;
      }
      onLoad(() => {
        getfactorTypeOptions();
      });
      const sampleNoOptions = vue.reactive({
        show: false,
        current: {},
        list: []
      });
      function getSampleNoOptions() {
        const _query = {
          projectId: uni.getStorageSync("projectId"),
          sampleType: "3"
        };
        getProjectBaseList(_query).then((res) => {
          sampleNoOptions.list = res.data.list;
        });
      }
      function onSampleNoOptions(arr) {
        let current = arr[0];
        wellTypeOptions.current = current;
        dataForm.holeType = current.label;
      }
      const sampleTypeOptions = vue.reactive({
        show: false,
        current: {},
        list: []
      });
      function getSampleTypeOptions() {
        getDictionaryDataSelector("497423156592517701").then((res) => {
          sampleTypeOptions.list = res.data.list;
        });
      }
      function onSampleTypeOptions(arr) {
        let current = arr[0];
        wellTypeOptions.current = current;
        dataForm.holeType = current.label;
      }
      const timeParams = vue.reactive({
        year: true,
        month: true,
        day: true,
        hour: true,
        minute: true,
        second: true
      });
      const curTimeKey = vue.ref(null);
      const selectTimeVisible = vue.ref(false);
      function showPickerDate(value) {
        curTimeKey.value = value, selectTimeVisible.value = true;
      }
      function getTime(e) {
        if (curTimeKey.value === "startTime")
          dataForm.startTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
        else if (curTimeKey.value === "endTime")
          dataForm.endTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
      }
      let dataForm = vue.reactive({
        projectId: "",
        sampleId: "",
        sampleNo: "",
        sampleName: "",
        sampleType: "",
        weather: "",
        temperature: "",
        startTime: "",
        endTime: "",
        remark: "",
        files: [],
        analysisFactorIds: []
      });
      function parseData(data) {
        var _data = JSON.parse(JSON.stringify(data));
        if (_data.files) {
          _data.files = JSON.stringify(_data.files);
        } else {
          _data.files = "[]";
        }
        _data.projectId = uni.getStorageSync("projectId");
        _data.id = uni.getStorageSync("QCSampleId");
        return _data;
      }
      function addOrUpdateData() {
        dataForm = parseData(dataForm);
        if (!dataForm.id) {
          addHoleRecord(dataForm).then((res) => formatAppLog("log", "at pages/sampleDetection/sampling/qualitySample/addOrEditor.vue:191", "success!"));
        } else {
          updateHoleRecord(dataForm.id, dataForm);
        }
      }
      function initData() {
        const id = uni.getStorageSync("QCSampleId");
        if (id) {
          getHoleRecordDetail(id).then((res) => {
            dataInfo(res.data);
          });
        }
      }
      onLoad(() => {
        initData();
        getSampleTypeOptions();
        getSampleNoOptions();
      });
      function goToBack() {
        uni.setStorageSync("QCSampleId", null);
        uni.navigateBack({
          delta: 1
        });
      }
      function dataInfo(dataAll) {
        let _dataAll = dataAll;
        if (_dataAll.files) {
          _dataAll.files = JSON.parse(_dataAll.files);
        } else {
          _dataAll.files = [];
        }
        dataForm = _dataAll;
      }
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_toast = resolveEasycom(vue.resolveDynamicComponent("u-toast"), __easycom_1$1);
        const _component_u_input = resolveEasycom(vue.resolveDynamicComponent("u-input"), __easycom_2$2);
        const _component_u_form_item = resolveEasycom(vue.resolveDynamicComponent("u-form-item"), __easycom_3$1);
        const _component_u_form = resolveEasycom(vue.resolveDynamicComponent("u-form"), __easycom_4$1);
        const _component_ba_tree_picker = resolveEasycom(vue.resolveDynamicComponent("ba-tree-picker"), __easycom_8);
        const _component_u_picker = resolveEasycom(vue.resolveDynamicComponent("u-picker"), __easycom_5$1);
        const _component_u_select = resolveEasycom(vue.resolveDynamicComponent("u-select"), __easycom_8$1);
        return vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          null,
          [
            vue.createElementVNode("view", { class: "status_bar" }, [
              vue.createElementVNode("view", { class: "top_view" })
            ]),
            vue.createElementVNode("view", { class: "mo-container" }, [
              vue.createElementVNode("view", {
                class: "nav-bar",
                style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
              }, [
                vue.createVNode(_component_uni_icons, {
                  onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                  type: "left",
                  size: "30",
                  style: { "line-height": "44px" }
                }),
                vue.createElementVNode("text", {
                  class: "title",
                  style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
                }, "建井信息"),
                vue.createElementVNode("text", {
                  onClick: _cache[1] || (_cache[1] = ($event) => addOrUpdateData()),
                  type: "primary",
                  class: "submit",
                  style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
                }, "保存")
              ]),
              vue.createVNode(
                _component_u_toast,
                { ref: "uToast" },
                null,
                512
                /* NEED_PATCH */
              ),
              vue.createVNode(_component_u_form, {
                model: vue.unref(dataForm),
                ref: "Form",
                style: { "margin": "10px" }
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "样品编号",
                    prop: "sampleNo"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: sampleNoOptions.current.label,
                        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => sampleNoOptions.current.label = $event),
                        type: "select",
                        onClick: _cache[3] || (_cache[3] = ($event) => sampleNoOptions.show = true)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "样品名称",
                    prop: "sampleName"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: vue.unref(dataForm).sampleName,
                        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => vue.unref(dataForm).sampleName = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "质控样品类型",
                    prop: "sampleType"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: sampleTypeOptions.current.label,
                        "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => sampleTypeOptions.current.label = $event),
                        type: "select",
                        onClick: _cache[6] || (_cache[6] = ($event) => sampleTypeOptions.show = true)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "分析指标"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: selectName.value,
                        "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => selectName.value = $event),
                        onClick: showPicker
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "开始时间",
                    prop: "startTime"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        onClick: _cache[8] || (_cache[8] = ($event) => showPickerDate("startTime")),
                        modelValue: vue.unref(dataForm).startTime,
                        "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => vue.unref(dataForm).startTime = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "结束时间",
                    prop: "endTime"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        onClick: _cache[10] || (_cache[10] = ($event) => showPickerDate("endTime")),
                        modelValue: vue.unref(dataForm).endTime,
                        "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => vue.unref(dataForm).endTime = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "备注",
                    prop: "remark"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: vue.unref(dataForm).remark,
                        "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => vue.unref(dataForm).remark = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "上传图片",
                    prop: "file"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(upload, {
                        watermark: true,
                        "onUpdate:value": _cache[13] || (_cache[13] = (val) => {
                          vue.unref(dataForm).files = val;
                        }),
                        value: vue.unref(dataForm).files
                      }, null, 8, ["value"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }, 8, ["model"]),
              vue.createVNode(_component_ba_tree_picker, {
                ref_key: "treePicker",
                ref: treePicker,
                multiple: true,
                onSelectChange: selectChange,
                title: "选择分析指标",
                localdata: factorTreeList.value,
                valueKey: "id",
                textKey: "factorName",
                childrenKey: "children"
              }, null, 8, ["localdata"]),
              vue.createVNode(_component_u_picker, {
                modelValue: selectTimeVisible.value,
                "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => selectTimeVisible.value = $event),
                mode: "time",
                params: timeParams,
                onConfirm: getTime,
                "default-time": vue.unref(getCurrentTime)()
              }, null, 8, ["modelValue", "params", "default-time"]),
              vue.createVNode(_component_u_select, {
                modelValue: sampleNoOptions.show,
                "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => sampleNoOptions.show = $event),
                "value-name": "sampleNo",
                "label-name": "sampleNo",
                list: sampleNoOptions.list,
                onConfirm: onSampleNoOptions
              }, null, 8, ["modelValue", "list"]),
              vue.createVNode(_component_u_select, {
                modelValue: sampleTypeOptions.show,
                "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => sampleTypeOptions.show = $event),
                "value-name": "enCode",
                "label-name": "fullName",
                list: sampleTypeOptions.list,
                onConfirm: onSampleTypeOptions
              }, null, 8, ["modelValue", "list"])
            ])
          ],
          64
          /* STABLE_FRAGMENT */
        );
      };
    }
  };
  const PagesSampleDetectionSamplingQualitySampleAddOrEditor = /* @__PURE__ */ _export_sfc(_sfc_main$k, [["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sampling/qualitySample/addOrEditor.vue"]]);
  const _sfc_main$j = {
    __name: "index",
    setup(__props) {
      const dataList2 = vue.ref([]);
      function getList() {
        let menuId = getMenuId("项目列表");
        const projectId = uni.getStorageSync("projectId");
        const holeId = uni.getStorageSync("holeId");
        let query = {
          currentPage: 1,
          pageSize: 0,
          sort: "desc",
          sidx: "",
          menuId,
          projectId,
          holeId
        };
        getHoleRecordList(query).then((res) => {
          dataList2.value = res.data.list;
        });
      }
      function goAddOrEditor(id) {
        uni.setStorageSync("holeRecordId", id);
        uni.navigateTo({
          url: "/pages/sampleDetection/sampling/pageMonitoringPoint/holeRecord/addOrEditor"
        });
      }
      const swiperOptions = vue.ref([
        {
          text: "删除",
          style: {
            backgroundColor: "#dd524d"
          }
        }
      ]);
      function swipeClick(e, ctx, id) {
        uni.showModal({
          title: "提示",
          content: "您确定要删除此项吗？",
          success: (res) => {
            if (res.confirm) {
              delHoleRecordDetail(id).then((res2) => {
                getList();
              });
              uni.showToast({
                title: "移除成功",
                icon: "none"
              });
            }
          }
        });
      }
      onLoad(() => {
        getList();
      });
      onPullDownRefresh(async () => {
        await getList();
        uni.stopPullDownRefresh();
      });
      return (_ctx, _cache) => {
        const _component_uni_swipe_action_item = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action-item"), __easycom_2$3);
        const _component_uni_swipe_action = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action"), __easycom_3$2);
        const _component_u_empty = resolveEasycom(vue.resolveDynamicComponent("u-empty"), __easycom_4$2);
        return vue.openBlock(), vue.createElementBlock("view", { class: "mo-container" }, [
          vue.createElementVNode("view", { class: "content-box" }, [
            vue.createCommentVNode(' <uni-navigator url="{{url}}"></uni-navigator> '),
            dataList2.value.length ? (vue.openBlock(), vue.createBlock(
              _component_uni_swipe_action,
              {
                key: 0,
                ref: "swipeAction"
              },
              {
                default: vue.withCtx(() => [
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList(dataList2.value, (item) => {
                      return vue.openBlock(), vue.createBlock(_component_uni_swipe_action_item, {
                        class: "swipe-item items-box",
                        key: item.id,
                        "right-options": swiperOptions.value,
                        onClick: ($event) => swipeClick($event, _ctx.content, item.id)
                      }, {
                        default: vue.withCtx(() => [
                          vue.createElementVNode("view", {
                            class: "item-box",
                            onClick: ($event) => goAddOrEditor(item.id)
                          }, [
                            vue.createElementVNode("view", { class: "left-item" }, [
                              vue.createElementVNode(
                                "view",
                                { class: "title" },
                                "土层类型：" + vue.toDisplayString(item.solumType),
                                1
                                /* TEXT */
                              ),
                              vue.createElementVNode("view", { class: "center-zone" }, [
                                vue.createElementVNode(
                                  "text",
                                  { class: "area" },
                                  "采样类型：" + vue.toDisplayString(item.holeType),
                                  1
                                  /* TEXT */
                                ),
                                vue.createElementVNode(
                                  "text",
                                  { class: "project" },
                                  vue.toDisplayString(item.typetext),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              vue.createElementVNode(
                                "text",
                                { class: "time" },
                                vue.toDisplayString(item.registertime),
                                1
                                /* TEXT */
                              )
                            ])
                          ], 8, ["onClick"])
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["right-options", "onClick"]);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  ))
                ]),
                _: 1
                /* STABLE */
              },
              512
              /* NEED_PATCH */
            )) : (vue.openBlock(), vue.createBlock(_component_u_empty, {
              key: 1,
              style: { "margin-top": "40px" },
              text: "暂无数据",
              mode: "list"
            }))
          ])
        ]);
      };
    }
  };
  const holeRecord = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["__scopeId", "data-v-c1f483e5"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sampling/pageMonitoringPoint/holeRecord/index.vue"]]);
  const _sfc_main$i = {
    __name: "index",
    setup(__props) {
      const dataList2 = vue.ref([]);
      function getList() {
        let menuId = getMenuId("项目列表");
        const projectId = uni.getStorageSync("projectId");
        const holeId = uni.getStorageSync("holeId");
        let query = {
          currentPage: 1,
          pageSize: 0,
          sort: "desc",
          sidx: "",
          menuId,
          projectId,
          holeId
        };
        getSoilRecordList(query).then((res) => {
          dataList2.value = res.data.list;
        });
      }
      function goAddOrEditor(id) {
        uni.setStorageSync("soilSampleId", id);
        uni.navigateTo({
          url: "/pages/sampleDetection/sampling/pageMonitoringPoint/soilSample/addOrEditor"
        });
      }
      const swiperOptions = vue.ref([
        {
          text: "删除",
          style: {
            backgroundColor: "#dd524d"
          }
        }
      ]);
      function swipeClick(e, ctx, id) {
        uni.showModal({
          title: "提示",
          content: "您确定要删除此项吗？",
          success: (res) => {
            if (res.confirm) {
              delSoilRecordDetail(id).then((res2) => {
                getList();
              });
              uni.showToast({
                title: "移除成功",
                icon: "none"
              });
            }
          }
        });
      }
      onShow(() => {
        getList();
      });
      onPullDownRefresh(async () => {
        await getList();
        uni.stopPullDownRefresh();
      });
      return (_ctx, _cache) => {
        const _component_uni_swipe_action_item = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action-item"), __easycom_2$3);
        const _component_uni_swipe_action = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action"), __easycom_3$2);
        const _component_u_empty = resolveEasycom(vue.resolveDynamicComponent("u-empty"), __easycom_4$2);
        return vue.openBlock(), vue.createElementBlock("view", { class: "mo-container" }, [
          vue.createElementVNode("view", { class: "content-box" }, [
            dataList2.value.length ? (vue.openBlock(), vue.createBlock(
              _component_uni_swipe_action,
              {
                key: 0,
                ref: "swipeAction"
              },
              {
                default: vue.withCtx(() => [
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList(dataList2.value, (item) => {
                      return vue.openBlock(), vue.createBlock(_component_uni_swipe_action_item, {
                        class: "swipe-item items-box",
                        key: item.id,
                        "right-options": swiperOptions.value,
                        onClick: ($event) => swipeClick($event, _ctx.content, item.id)
                      }, {
                        default: vue.withCtx(() => [
                          vue.createElementVNode("view", {
                            class: "item-box",
                            onClick: ($event) => goAddOrEditor(item.id)
                          }, [
                            vue.createElementVNode("view", { class: "left-item" }, [
                              vue.createElementVNode(
                                "view",
                                { class: "title" },
                                "监测点位编号：" + vue.toDisplayString(item.holeNo),
                                1
                                /* TEXT */
                              ),
                              vue.createElementVNode("view", { class: "center-zone" }, [
                                vue.createElementVNode(
                                  "text",
                                  { class: "area" },
                                  "采样类型：" + vue.toDisplayString(item.holeType),
                                  1
                                  /* TEXT */
                                ),
                                vue.createElementVNode(
                                  "text",
                                  { class: "project" },
                                  vue.toDisplayString(item.typetext),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              vue.createElementVNode(
                                "text",
                                { class: "time" },
                                vue.toDisplayString(item.registertime),
                                1
                                /* TEXT */
                              )
                            ])
                          ], 8, ["onClick"])
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["right-options", "onClick"]);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  ))
                ]),
                _: 1
                /* STABLE */
              },
              512
              /* NEED_PATCH */
            )) : (vue.openBlock(), vue.createBlock(_component_u_empty, {
              key: 1,
              style: { "margin-top": "40px" },
              text: "暂无数据",
              mode: "list"
            }))
          ])
        ]);
      };
    }
  };
  const soilSample = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["__scopeId", "data-v-ce33b5fb"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sampling/pageMonitoringPoint/soilSample/index.vue"]]);
  const _sfc_main$h = {
    __name: "index",
    setup(__props) {
      const dataList2 = vue.ref([]);
      function getList() {
        let menuId = getMenuId("项目列表");
        const projectId = uni.getStorageSync("projectId");
        const holeId = uni.getStorageSync("holeId");
        let query = {
          currentPage: 1,
          pageSize: 0,
          sort: "desc",
          sidx: "",
          menuId,
          projectId,
          holeId
        };
        getWaterSampleList(query).then((res) => {
          dataList2.value = res.data.list;
        });
      }
      function goAddOrEditor(id) {
        uni.setStorageSync("waterSampleId", id);
        uni.navigateTo({
          url: "/pages/sampleDetection/sampling/pageMonitoringPoint/waterSample/addOrEditor"
        });
      }
      const swiperOptions = vue.ref([
        {
          text: "删除",
          style: {
            backgroundColor: "#dd524d"
          }
        }
      ]);
      function swipeClick(e, ctx, id) {
        uni.showModal({
          title: "提示",
          content: "您确定要删除此项吗？",
          success: (res) => {
            if (res.confirm) {
              delHoleBaseDetail(id).then((res2) => {
                getList();
              });
              uni.showToast({
                title: "移除成功",
                icon: "none"
              });
            }
          }
        });
      }
      onLoad(() => {
        getList();
      });
      onPullDownRefresh(async () => {
        await getList();
        uni.stopPullDownRefresh();
      });
      return (_ctx, _cache) => {
        const _component_uni_swipe_action_item = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action-item"), __easycom_2$3);
        const _component_uni_swipe_action = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action"), __easycom_3$2);
        const _component_u_empty = resolveEasycom(vue.resolveDynamicComponent("u-empty"), __easycom_4$2);
        return vue.openBlock(), vue.createElementBlock("view", { class: "mo-container" }, [
          vue.createElementVNode("view", { class: "content-box" }, [
            dataList2.value.length ? (vue.openBlock(), vue.createBlock(
              _component_uni_swipe_action,
              {
                key: 0,
                ref: "swipeAction"
              },
              {
                default: vue.withCtx(() => [
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList(dataList2.value, (item) => {
                      return vue.openBlock(), vue.createBlock(_component_uni_swipe_action_item, {
                        class: "swipe-item items-box",
                        key: item.id,
                        "right-options": swiperOptions.value,
                        onClick: ($event) => swipeClick($event, _ctx.content, item.id)
                      }, {
                        default: vue.withCtx(() => [
                          vue.createElementVNode("view", {
                            class: "item-box",
                            onClick: ($event) => goAddOrEditor(item.id)
                          }, [
                            vue.createElementVNode("view", { class: "left-item" }, [
                              vue.createElementVNode(
                                "view",
                                { class: "title" },
                                "监测点位编号：" + vue.toDisplayString(item.holeNo),
                                1
                                /* TEXT */
                              ),
                              vue.createElementVNode("view", { class: "center-zone" }, [
                                vue.createElementVNode(
                                  "text",
                                  { class: "area" },
                                  "采样类型：" + vue.toDisplayString(item.holeType),
                                  1
                                  /* TEXT */
                                ),
                                vue.createElementVNode(
                                  "text",
                                  { class: "project" },
                                  vue.toDisplayString(item.typetext),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              vue.createElementVNode(
                                "text",
                                { class: "time" },
                                vue.toDisplayString(item.registertime),
                                1
                                /* TEXT */
                              )
                            ])
                          ], 8, ["onClick"])
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["right-options", "onClick"]);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  ))
                ]),
                _: 1
                /* STABLE */
              },
              512
              /* NEED_PATCH */
            )) : (vue.openBlock(), vue.createBlock(_component_u_empty, {
              key: 1,
              style: { "margin-top": "40px" },
              text: "暂无数据",
              mode: "list"
            }))
          ])
        ]);
      };
    }
  };
  const waterSample = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["__scopeId", "data-v-441656ae"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sampling/pageMonitoringPoint/waterSample/index.vue"]]);
  const _sfc_main$g = {
    __name: "index",
    setup(__props) {
      const dataList2 = vue.ref([]);
      function getList() {
        let menuId = getMenuId("项目列表");
        const projectId = uni.getStorageSync("projectId");
        const holeId = uni.getStorageSync("holeId");
        let query = {
          currentPage: 1,
          pageSize: 0,
          sort: "desc",
          sidx: "",
          menuId,
          projectId,
          holeId
        };
        getWellBaseList(query).then((res) => {
          dataList2.value = res.data.list;
        });
      }
      function goAddOrEditor(id) {
        uni.setStorageSync("wellBaseId", id);
        uni.navigateTo({
          url: "/pages/sampleDetection/sampling/pageMonitoringPoint/wellBase/addOrEditor"
        });
      }
      const swiperOptions = vue.ref([
        {
          text: "删除",
          style: {
            backgroundColor: "#dd524d"
          }
        }
      ]);
      function swipeClick(e, ctx, id) {
        uni.showModal({
          title: "提示",
          content: "您确定要删除此项吗？",
          success: (res) => {
            if (res.confirm) {
              delHoleBaseDetail(id).then((res2) => {
                getList();
              });
              uni.showToast({
                title: "移除成功",
                icon: "none"
              });
            }
          }
        });
      }
      onLoad(() => {
        getList();
      });
      onPullDownRefresh(async () => {
        await getList();
        uni.stopPullDownRefresh();
      });
      return (_ctx, _cache) => {
        const _component_uni_swipe_action_item = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action-item"), __easycom_2$3);
        const _component_uni_swipe_action = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action"), __easycom_3$2);
        const _component_u_empty = resolveEasycom(vue.resolveDynamicComponent("u-empty"), __easycom_4$2);
        return vue.openBlock(), vue.createElementBlock("view", { class: "mo-container" }, [
          vue.createElementVNode("view", { class: "content-box" }, [
            dataList2.value.length ? (vue.openBlock(), vue.createBlock(
              _component_uni_swipe_action,
              {
                key: 0,
                ref: "swipeAction"
              },
              {
                default: vue.withCtx(() => [
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList(dataList2.value, (item) => {
                      return vue.openBlock(), vue.createBlock(_component_uni_swipe_action_item, {
                        class: "swipe-item items-box",
                        key: item.id,
                        "right-options": swiperOptions.value,
                        onClick: ($event) => swipeClick($event, _ctx.content, item.id)
                      }, {
                        default: vue.withCtx(() => [
                          vue.createElementVNode("view", {
                            class: "item-box",
                            onClick: ($event) => goAddOrEditor(item.id)
                          }, [
                            vue.createElementVNode("view", { class: "left-item" }, [
                              vue.createElementVNode(
                                "view",
                                { class: "title" },
                                "监测点位编号：" + vue.toDisplayString(item.holeNo),
                                1
                                /* TEXT */
                              ),
                              vue.createElementVNode("view", { class: "center-zone" }, [
                                vue.createElementVNode(
                                  "text",
                                  { class: "area" },
                                  "采样类型：" + vue.toDisplayString(item.holeType),
                                  1
                                  /* TEXT */
                                ),
                                vue.createElementVNode(
                                  "text",
                                  { class: "project" },
                                  vue.toDisplayString(item.typetext),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              vue.createElementVNode(
                                "text",
                                { class: "time" },
                                vue.toDisplayString(item.registertime),
                                1
                                /* TEXT */
                              )
                            ])
                          ], 8, ["onClick"])
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["right-options", "onClick"]);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  ))
                ]),
                _: 1
                /* STABLE */
              },
              512
              /* NEED_PATCH */
            )) : (vue.openBlock(), vue.createBlock(_component_u_empty, {
              key: 1,
              style: { "margin-top": "40px" },
              text: "暂无数据",
              mode: "list"
            }))
          ])
        ]);
      };
    }
  };
  const wellBase = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["__scopeId", "data-v-c378f9fd"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sampling/pageMonitoringPoint/wellBase/index.vue"]]);
  const _sfc_main$f = {
    __name: "index",
    setup(__props) {
      const dataList2 = vue.ref([]);
      function getList() {
        let menuId = getMenuId("项目列表");
        const projectId = uni.getStorageSync("projectId");
        const holeId = uni.getStorageSync("holeId");
        let query = {
          currentPage: 1,
          pageSize: 0,
          sort: "desc",
          sidx: "",
          menuId,
          projectId,
          holeId
        };
        getWellWashRecordList(query).then((res) => {
          dataList2.value = res.data.list;
        });
      }
      function goAddOrEditor(id) {
        uni.setStorageSync("wellWashRecordId", id);
        uni.navigateTo({
          url: "/pages/sampleDetection/sampling/pageMonitoringPoint/wellWashRecord/addOrEditor"
        });
      }
      const swiperOptions = vue.ref([
        {
          text: "删除",
          style: {
            backgroundColor: "#dd524d"
          }
        }
      ]);
      function swipeClick(e, ctx, id) {
        uni.showModal({
          title: "提示",
          content: "您确定要删除此项吗？",
          success: (res) => {
            if (res.confirm) {
              delWellWashRecordDetail(id).then((res2) => {
                getList();
              });
              uni.showToast({
                title: "移除成功",
                icon: "none"
              });
            }
          }
        });
      }
      onLoad(() => {
        getList();
      });
      onPullDownRefresh(async () => {
        await getList();
        uni.stopPullDownRefresh();
      });
      return (_ctx, _cache) => {
        const _component_uni_swipe_action_item = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action-item"), __easycom_2$3);
        const _component_uni_swipe_action = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action"), __easycom_3$2);
        const _component_u_empty = resolveEasycom(vue.resolveDynamicComponent("u-empty"), __easycom_4$2);
        return vue.openBlock(), vue.createElementBlock("view", { class: "mo-container" }, [
          vue.createElementVNode("view", { class: "content-box" }, [
            dataList2.value.length ? (vue.openBlock(), vue.createBlock(
              _component_uni_swipe_action,
              {
                key: 0,
                ref: "swipeAction"
              },
              {
                default: vue.withCtx(() => [
                  (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    null,
                    vue.renderList(dataList2.value, (item) => {
                      return vue.openBlock(), vue.createBlock(_component_uni_swipe_action_item, {
                        class: "swipe-item items-box",
                        key: item.id,
                        "right-options": swiperOptions.value,
                        onClick: ($event) => swipeClick($event, _ctx.content, item.id)
                      }, {
                        default: vue.withCtx(() => [
                          vue.createElementVNode("view", {
                            class: "item-box",
                            onClick: ($event) => goAddOrEditor(item.id)
                          }, [
                            vue.createElementVNode("view", { class: "left-item" }, [
                              vue.createElementVNode(
                                "view",
                                { class: "title" },
                                "洗井记录：" + vue.toDisplayString(item.wellId),
                                1
                                /* TEXT */
                              ),
                              vue.createElementVNode("view", { class: "center-zone" }, [
                                vue.createElementVNode(
                                  "text",
                                  { class: "area" },
                                  "洗井类型：" + vue.toDisplayString(item.washMode),
                                  1
                                  /* TEXT */
                                ),
                                vue.createElementVNode(
                                  "text",
                                  { class: "project" },
                                  vue.toDisplayString(item.typetext),
                                  1
                                  /* TEXT */
                                )
                              ]),
                              vue.createElementVNode(
                                "text",
                                { class: "time" },
                                vue.toDisplayString(item.registertime),
                                1
                                /* TEXT */
                              )
                            ])
                          ], 8, ["onClick"])
                        ]),
                        _: 2
                        /* DYNAMIC */
                      }, 1032, ["right-options", "onClick"]);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  ))
                ]),
                _: 1
                /* STABLE */
              },
              512
              /* NEED_PATCH */
            )) : (vue.openBlock(), vue.createBlock(_component_u_empty, {
              key: 1,
              style: { "margin-top": "40px" },
              text: "暂无数据",
              mode: "list"
            }))
          ])
        ]);
      };
    }
  };
  const wellWashRecord = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["__scopeId", "data-v-7411be3c"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sampling/pageMonitoringPoint/wellWashRecord/index.vue"]]);
  const _sfc_main$e = {
    __name: "index",
    setup(__props) {
      const linkOptions = vue.ref([
        {
          id: 0,
          iconName: "监测点位",
          iconUrl: "/static/project-icons/jcdianwei.svg",
          routerUrl: "/pages/sampleDetection/sampling/monitorPoint/addOrEditor"
        },
        {
          id: 1,
          iconName: "钻孔记录",
          iconUrl: "/static/project-icons/zkjl.svg",
          routerUrl: "/pages/sampleDetection/sampling/pageMonitoringPoint/holeRecord/addOrEditor"
        },
        {
          id: 2,
          iconName: "土样记录",
          iconUrl: "/static/project-icons/syjilu.svg",
          routerUrl: "/pages/sampleDetection/sampling/pageMonitoringPoint/soilSample/addOrEditor"
        },
        {
          id: 3,
          iconName: "监测井",
          iconUrl: "/static/project-icons/jiancejing.svg",
          routerUrl: "/pages/sampleDetection/sampling/pageMonitoringPoint/wellBase/addOrEditor"
        },
        {
          id: 4,
          iconName: "洗井记录",
          iconUrl: "/static/project-icons/xjjilu.svg",
          routerUrl: "/pages/sampleDetection/sampling/pageMonitoringPoint/wellWashRecord/addOrEditor"
        },
        {
          id: 5,
          iconName: "水样记录",
          iconUrl: "/static/project-icons/zhikong.svg",
          routerUrl: "/pages/sampleDetection/sampling/pageMonitoringPoint/waterSample/addOrEditor"
        }
      ]);
      const tabOptions = vue.reactive([
        {
          name: "钻孔记录"
        },
        {
          name: "土样记录"
        },
        {
          name: "建井信息"
        },
        {
          name: "洗井信息"
        },
        {
          name: "水样记录"
        }
      ]);
      const tabCurent = vue.ref(0);
      function change(index) {
        tabCurent.value = index;
        formatAppLog("log", "at pages/sampleDetection/sampling/pageMonitoringPoint/index.vue:124", "index", index);
        formatAppLog("log", "at pages/sampleDetection/sampling/pageMonitoringPoint/index.vue:125", typeof index);
      }
      vue.reactive(null);
      function goToSampling(router) {
        uni.navigateTo({
          url: router
        });
      }
      function goToBack() {
        uni.setStorageSync("holeId", null);
        uni.navigateBack({
          delta: 1
        });
      }
      function scanQRcode() {
        uni.scanCode({
          success: function(res) {
            formatAppLog("log", "at pages/sampleDetection/sampling/pageMonitoringPoint/index.vue:145", "条码类型：" + res.scanType);
            formatAppLog("log", "at pages/sampleDetection/sampling/pageMonitoringPoint/index.vue:146", "条码内容：" + res.result);
            const result = JSON.parse(res.result);
            formatAppLog("log", "at pages/sampleDetection/sampling/pageMonitoringPoint/index.vue:148", result.type);
            if (result.type === "soilSample") {
              uni.setStorageSync("soilSampleId", result.id);
              uni.navigateTo({
                url: "/pages/sampleDetection/sampling/pageMonitoringPoint/soilSample/addOrEditor"
              });
            } else if (result.type === "waterSample") {
              uni.setStorageSync("waterSampleId", result.id);
              uni.navigateTo({
                url: "/pages/sampleDetection/sampling/pageMonitoringPoint/waterSample/addOrEditor"
              });
            } else {
              uni.showToast({
                title: "无效二维码",
                duration: 2e3
              });
            }
          }
        });
      }
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_tabs = resolveEasycom(vue.resolveDynamicComponent("u-tabs"), __easycom_1$3);
        return vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          null,
          [
            vue.createElementVNode("view", { class: "status_bar" }, [
              vue.createElementVNode("view", { class: "top_view" })
            ]),
            vue.createElementVNode("view", { class: "detail-container" }, [
              vue.createElementVNode("view", {
                class: "nav-bar",
                style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
              }, [
                vue.createVNode(_component_uni_icons, {
                  onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                  type: "left",
                  size: "30",
                  style: { "line-height": "44px" }
                }),
                vue.createElementVNode("text", {
                  class: "title",
                  style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
                }, "采样信息"),
                vue.createElementVNode("text", {
                  onClick: scanQRcode,
                  type: "primary",
                  class: "submit",
                  style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
                }, [
                  vue.createVNode(_component_uni_icons, {
                    type: "scan",
                    size: "30"
                  })
                ])
              ]),
              vue.createElementVNode("view", { class: "link-container" }, [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList(linkOptions.value, (item) => {
                    return vue.openBlock(), vue.createElementBlock("view", {
                      onClick: ($event) => goToSampling(item.routerUrl),
                      class: "link-box",
                      key: item.id
                    }, [
                      vue.createElementVNode("image", {
                        src: item.iconUrl,
                        style: { "width": "45rpx", "margin-bottom": "5px", "height": "45rpx" }
                      }, null, 8, ["src"]),
                      vue.createElementVNode(
                        "text",
                        null,
                        vue.toDisplayString(item.iconName),
                        1
                        /* TEXT */
                      )
                    ], 8, ["onClick"]);
                  }),
                  128
                  /* KEYED_FRAGMENT */
                ))
              ]),
              vue.createElementVNode("view", { class: "tab-box" }, [
                vue.createVNode(_component_u_tabs, {
                  "font-size": 20,
                  "inactive-color": "#adb5bd",
                  list: tabOptions,
                  "is-scroll": true,
                  modelValue: tabCurent.value,
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => tabCurent.value = $event),
                  onChange: change
                }, null, 8, ["list", "modelValue"])
              ]),
              vue.createVNode(driver),
              vue.createElementVNode("view", { class: "content" }, [
                tabCurent.value === 0 ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 0,
                  class: "holeRecord-container"
                }, [
                  vue.createVNode(holeRecord)
                ])) : tabCurent.value === 1 ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 1,
                  class: "waterSample-container"
                }, [
                  vue.createVNode(soilSample)
                ])) : tabCurent.value === 2 ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 2,
                  class: "wellBase-container"
                }, [
                  vue.createVNode(wellBase)
                ])) : tabCurent.value === 3 ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 3,
                  class: "wellWashRecord-container"
                }, [
                  vue.createVNode(wellWashRecord)
                ])) : tabCurent.value === 4 ? (vue.openBlock(), vue.createElementBlock("view", {
                  key: 4,
                  class: "soilSample-container"
                }, [
                  vue.createVNode(waterSample)
                ])) : vue.createCommentVNode("v-if", true)
              ])
            ])
          ],
          64
          /* STABLE_FRAGMENT */
        );
      };
    }
  };
  const PagesSampleDetectionSamplingPageMonitoringPointIndex = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["__scopeId", "data-v-232f9d69"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sampling/pageMonitoringPoint/index.vue"]]);
  const _sfc_main$d = {
    __name: "addOrEditor",
    setup(__props) {
      let dataForm = vue.reactive({
        projectId: "",
        holeId: "",
        startDepth: "",
        endDepth: "",
        solumType: "",
        solumColor: "",
        solumSmell: "",
        solumHumidity: "",
        solumCompactness: "",
        solumPlasticity: "",
        pollutionDesc: "",
        files: []
      });
      let holeTypeOptions = vue.reactive({ show: false, current: {}, list: [] });
      function getHoleTypeOptions() {
        getDictionaryDataSelectorCascade("497318342525198917").then((res) => {
          res.data.list.forEach((item) => {
            changeHoleType(item);
          });
        });
      }
      function onHoleTypeOptions(arr) {
        let current = arr[0];
        holeTypeOptions.current = current;
        dataForm.holeType = current.value;
      }
      function changeHoleType(node) {
        if (!node.hasChildren) {
          holeTypeOptions.list.push(node);
        } else {
          node.children.forEach((child) => changeHoleType(child));
        }
      }
      function onSolumHumidityOptions(arr) {
        let current = arr[0];
        solumHumidityOptions.current = current;
        dataForm.solumHumidity = current.label;
      }
      function onSolumCompactnessOptions(arr) {
        let current = arr[0];
        solumCompactnessOptions.current = current;
        dataForm.solumCompactness = current.label;
      }
      function onSolumPlasticityOptions(arr) {
        let current = arr[0];
        solumPlasticityOptions.current = current;
        dataForm.solumPlasticity = current.label;
      }
      const solumHumidityOptions = vue.reactive({ show: false, current: {}, list: [] });
      function getsolumHumidityOptions() {
        getDictionaryDataSelector("497319923836527173").then((res) => {
          solumHumidityOptions.list = res.data.list;
        });
      }
      const solumCompactnessOptions = vue.reactive({ show: false, current: {}, list: [] });
      function getsolumCompactnessOptions() {
        getDictionaryDataSelector("497320163494863429").then((res) => {
          solumCompactnessOptions.list = res.data.list;
        });
      }
      const solumPlasticityOptions = vue.reactive({ show: false, current: {}, list: [] });
      function getsolumPlasticityOptions() {
        getDictionaryDataSelector("497320786047017541").then((res) => {
          solumPlasticityOptions.list = res.data.list;
        });
      }
      function parseFiles(data) {
        var _data = JSON.parse(JSON.stringify(data));
        if (_data.files) {
          _data.files = JSON.stringify(_data.files);
        } else {
          _data.files = "[]";
        }
        _data.projectId = uni.getStorageSync("projectId");
        _data.holeId = uni.getStorageSync("holeId");
        _data.id = uni.getStorageSync("holeRecordId");
        return _data;
      }
      function addOrUpdateData() {
        const data = parseFiles(dataForm);
        if (!data.id) {
          addHoleRecord(data).then((res) => {
            ToastFn("创建成功");
          });
        } else {
          updateHoleRecord(data.id, data).then((res) => {
            ToastFn("修改成功");
          });
        }
      }
      function ToastFn(text) {
        goToBack();
        uni.showToast({
          title: text,
          duration: 2e3
        });
      }
      function dataInfo(dataAll) {
        let _dataAll = dataAll;
        if (_dataAll.files) {
          _dataAll.files = JSON.parse(_dataAll.files);
        } else {
          _dataAll.files = [];
        }
        dataForm = _dataAll;
      }
      function initData() {
        const id = uni.getStorageSync("holeRecordId");
        if (id) {
          getHoleRecordDetail(id).then((res) => {
            dataInfo(res.data);
          });
        }
      }
      onLoad(() => {
        initData();
        getsolumHumidityOptions();
        getsolumCompactnessOptions();
        getsolumPlasticityOptions();
        getHoleTypeOptions();
      });
      function goToBack() {
        uni.setStorageSync("holeRecordId", null);
        uni.navigateBack({ delta: 1 });
      }
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_toast = resolveEasycom(vue.resolveDynamicComponent("u-toast"), __easycom_1$1);
        const _component_u_number_box = resolveEasycom(vue.resolveDynamicComponent("u-number-box"), __easycom_7$1);
        const _component_u_form_item = resolveEasycom(vue.resolveDynamicComponent("u-form-item"), __easycom_3$1);
        const _component_u_input = resolveEasycom(vue.resolveDynamicComponent("u-input"), __easycom_2$2);
        const _component_u_form = resolveEasycom(vue.resolveDynamicComponent("u-form"), __easycom_4$1);
        const _component_u_select = resolveEasycom(vue.resolveDynamicComponent("u-select"), __easycom_8$1);
        return vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          null,
          [
            vue.createElementVNode("view", { class: "status_bar" }, [
              vue.createElementVNode("view", { class: "top_view" })
            ]),
            vue.createElementVNode("view", { class: "mo-container" }, [
              vue.createElementVNode("view", {
                class: "nav-bar",
                style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
              }, [
                vue.createVNode(_component_uni_icons, {
                  onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                  type: "left",
                  size: "30",
                  style: { "line-height": "44px" }
                }),
                vue.createElementVNode("text", {
                  class: "title",
                  style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
                }, "钻孔记录"),
                vue.createElementVNode("text", {
                  onClick: _cache[1] || (_cache[1] = ($event) => addOrUpdateData()),
                  type: "primary",
                  class: "submit",
                  style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
                }, "保存")
              ]),
              vue.createVNode(
                _component_u_toast,
                { ref: "uToast" },
                null,
                512
                /* NEED_PATCH */
              ),
              vue.createVNode(_component_u_form, {
                model: vue.unref(dataForm),
                ref: "Form",
                style: { "margin": "10px" }
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "起始深度",
                    prop: "startDepth"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        modelValue: vue.unref(dataForm).startDepth,
                        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => vue.unref(dataForm).startDepth = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "结束深度",
                    prop: "endDepth"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        modelValue: vue.unref(dataForm).endDepth,
                        "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => vue.unref(dataForm).endDepth = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "土层类型",
                    prop: "holeType"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: vue.unref(holeTypeOptions).current.label,
                        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => vue.unref(holeTypeOptions).current.label = $event),
                        type: "select",
                        onClick: _cache[5] || (_cache[5] = ($event) => vue.unref(holeTypeOptions).show = true)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "颜色",
                    prop: "solumColor"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: vue.unref(dataForm).solumColor,
                        "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => vue.unref(dataForm).solumColor = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "气味",
                    prop: "solumSmell"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: vue.unref(dataForm).solumSmell,
                        "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => vue.unref(dataForm).solumSmell = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "湿度",
                    prop: "solumHumidity"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: vue.unref(dataForm).solumHumidity,
                        "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => vue.unref(dataForm).solumHumidity = $event),
                        type: "select",
                        onClick: _cache[9] || (_cache[9] = ($event) => solumHumidityOptions.show = true)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "可塑性",
                    prop: "solumPlasticity"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: vue.unref(dataForm).solumPlasticity,
                        "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => vue.unref(dataForm).solumPlasticity = $event),
                        type: "select",
                        onClick: _cache[11] || (_cache[11] = ($event) => solumPlasticityOptions.show = true)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "密实度",
                    prop: "solumCompactness"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: vue.unref(dataForm).solumCompactness,
                        "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => vue.unref(dataForm).solumCompactness = $event),
                        type: "select",
                        onClick: _cache[13] || (_cache[13] = ($event) => solumCompactnessOptions.show = true)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "备注",
                    prop: "remark"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: vue.unref(dataForm).remark,
                        "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => vue.unref(dataForm).remark = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "上传图片",
                    prop: "file"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(upload, {
                        watermark: true,
                        "onUpdate:value": _cache[15] || (_cache[15] = (val) => {
                          vue.unref(dataForm).files = val;
                        }),
                        value: vue.unref(dataForm).files
                      }, null, 8, ["value"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }, 8, ["model"]),
              vue.createVNode(_component_u_select, {
                modelValue: vue.unref(holeTypeOptions).show,
                "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => vue.unref(holeTypeOptions).show = $event),
                "value-name": "fullName",
                "label-name": "fullName",
                list: vue.unref(holeTypeOptions).list,
                onConfirm: onHoleTypeOptions
              }, null, 8, ["modelValue", "list"]),
              vue.createVNode(_component_u_select, {
                modelValue: solumHumidityOptions.show,
                "onUpdate:modelValue": _cache[17] || (_cache[17] = ($event) => solumHumidityOptions.show = $event),
                "value-name": "id",
                "label-name": "fullName",
                list: solumHumidityOptions.list,
                onConfirm: onSolumHumidityOptions
              }, null, 8, ["modelValue", "list"]),
              vue.createVNode(_component_u_select, {
                modelValue: solumCompactnessOptions.show,
                "onUpdate:modelValue": _cache[18] || (_cache[18] = ($event) => solumCompactnessOptions.show = $event),
                "value-name": "id",
                "label-name": "fullName",
                list: solumCompactnessOptions.list,
                onConfirm: onSolumCompactnessOptions
              }, null, 8, ["modelValue", "list"]),
              vue.createVNode(_component_u_select, {
                modelValue: solumPlasticityOptions.show,
                "onUpdate:modelValue": _cache[19] || (_cache[19] = ($event) => solumPlasticityOptions.show = $event),
                "value-name": "id",
                "label-name": "fullName",
                list: solumPlasticityOptions.list,
                onConfirm: onSolumPlasticityOptions
              }, null, 8, ["modelValue", "list"])
            ])
          ],
          64
          /* STABLE_FRAGMENT */
        );
      };
    }
  };
  const PagesSampleDetectionSamplingPageMonitoringPointHoleRecordAddOrEditor = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sampling/pageMonitoringPoint/holeRecord/addOrEditor.vue"]]);
  const _sfc_main$c = {
    __name: "editorXRF",
    emits: ["curConfData"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const curXrfConf = vue.ref([]);
      const curXrfConfLength = vue.ref();
      const xrfConfVisible = vue.ref(false);
      vue.ref(true);
      vue.ref(null);
      function goToBack() {
        uni.navigateBack({
          delta: 1
        });
      }
      const popupShow = vue.ref(false);
      const newConf = vue.ref({
        elementCode: null,
        elementName: null,
        elementSort: null,
        reading: null
      });
      const popupRules = vue.reactive({
        elementCode: [{
          required: true,
          message: "请输入属性",
          trigger: "blur"
        }]
      });
      const popRef = vue.ref();
      function submitNewConf() {
        popRef.value.validate((valid) => {
          if (valid) {
            newConf.value.elementSort = curXrfConf.value.length + 1;
            newConf.value.elementName = newConf.value.elementCode;
            const temp = deepCopy(newConf.value);
            curXrfConf.value.push(temp);
            formatAppLog("log", "at pages/sampleDetection/sampling/pageMonitoringPoint/soilSample/editorXRF.vue:88", curXrfConf.value);
            for (let key in newConf.value) {
              newConf.value[key] = null;
            }
            uni.showToast({
              icon: "none",
              title: "添加成功"
            });
            popupShow.value = false;
          }
        });
      }
      function showpop() {
        popupShow.value = true;
      }
      function delConf(index) {
        let tempData = deepCopy(curXrfConf.value);
        formatAppLog("log", "at pages/sampleDetection/sampling/pageMonitoringPoint/soilSample/editorXRF.vue:108", index, curXrfConfLength.value);
        if (index > curXrfConfLength.value) {
          formatAppLog("log", "at pages/sampleDetection/sampling/pageMonitoringPoint/soilSample/editorXRF.vue:110", index, curXrfConfLength.value);
          for (let i = index; i < tempData.length; i++) {
            tempData[index - 1] = tempData[index];
            tempData[index - 1].elementSort = i.toString();
          }
        }
        tempData.pop();
        curXrfConf.value = tempData;
      }
      onReady(() => {
        popRef.value.setRules(popupRules);
      });
      const emits = __emit;
      function submitXrf() {
        emits("defineEmits", curXrfConf.value);
      }
      __expose({
        xrfConfVisible,
        curXrfConf,
        curXrfConfLength
      });
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_input = resolveEasycom(vue.resolveDynamicComponent("u-input"), __easycom_2$2);
        const _component_u_button = resolveEasycom(vue.resolveDynamicComponent("u-button"), __easycom_6$1);
        const _component_u_form_item = resolveEasycom(vue.resolveDynamicComponent("u-form-item"), __easycom_3$1);
        const _component_u_form = resolveEasycom(vue.resolveDynamicComponent("u-form"), __easycom_4$1);
        const _component_u_popup = resolveEasycom(vue.resolveDynamicComponent("u-popup"), __easycom_5$2);
        return xrfConfVisible.value ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "main-container"
        }, [
          vue.createElementVNode("view", { class: "status_bar" }, [
            vue.createElementVNode("view", { class: "top_view" })
          ]),
          vue.createElementVNode("view", { class: "container" }, [
            vue.createElementVNode("view", {
              class: "nav-bar",
              style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
            }, [
              vue.createVNode(_component_uni_icons, {
                onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                type: "left",
                size: "30",
                style: { "line-height": "44px" }
              }),
              vue.createElementVNode("text", {
                class: "title",
                style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
              }, "建井信息"),
              vue.createElementVNode("text", {
                onClick: _cache[1] || (_cache[1] = ($event) => submitXrf()),
                type: "primary",
                class: "submit",
                style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
              }, "保存")
            ]),
            vue.createVNode(_component_u_form, {
              model: curXrfConf.value,
              ref: "formRef",
              style: { "margin": "20px" }
            }, {
              default: vue.withCtx(() => [
                (vue.openBlock(true), vue.createElementBlock(
                  vue.Fragment,
                  null,
                  vue.renderList(curXrfConf.value, (item, index) => {
                    return vue.openBlock(), vue.createBlock(_component_u_form_item, {
                      "label-width": "50px",
                      label: item.elementName,
                      prop: "index"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_u_input, {
                          modelValue: item.reading,
                          "onUpdate:modelValue": ($event) => item.reading = $event
                        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                        vue.createTextVNode(),
                        item.elementSort > curXrfConfLength.value ? (vue.openBlock(), vue.createBlock(_component_u_button, {
                          key: 0,
                          onClick: ($event) => delConf(index)
                        }, {
                          default: vue.withCtx(() => [
                            vue.createTextVNode("删除")
                          ]),
                          _: 2
                          /* DYNAMIC */
                        }, 1032, ["onClick"])) : vue.createCommentVNode("v-if", true)
                      ]),
                      _: 2
                      /* DYNAMIC */
                    }, 1032, ["label"]);
                  }),
                  256
                  /* UNKEYED_FRAGMENT */
                ))
              ]),
              _: 1
              /* STABLE */
            }, 8, ["model"]),
            vue.createVNode(_component_u_popup, {
              modelValue: popupShow.value,
              "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => popupShow.value = $event),
              mode: "bottom"
            }, {
              default: vue.withCtx(() => [
                vue.createElementVNode("view", { class: "popup-container" }, [
                  vue.createVNode(_component_u_form, {
                    model: newConf.value,
                    ref_key: "popRef",
                    ref: popRef,
                    style: { "margin": "20px" }
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_form_item, {
                        "label-width": "100px",
                        label: "属性",
                        prop: "elementCode"
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(_component_u_input, {
                            modelValue: newConf.value.elementCode,
                            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => newConf.value.elementCode = $event)
                          }, null, 8, ["modelValue"])
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      vue.createVNode(_component_u_form_item, {
                        "label-width": "100px",
                        label: "值",
                        prop: "reading"
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(_component_u_input, {
                            modelValue: newConf.value.reading,
                            "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => newConf.value.reading = $event)
                          }, null, 8, ["modelValue"])
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 1
                    /* STABLE */
                  }, 8, ["model"]),
                  vue.createElementVNode("view", { class: "popup-btn" }, [
                    vue.createVNode(_component_u_button, {
                      type: "primary",
                      onClick: _cache[4] || (_cache[4] = ($event) => popupShow.value = false)
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode("取消")
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_u_button, {
                      type: "primary",
                      onClick: submitNewConf
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode("确认")
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ])
                ])
              ]),
              _: 1
              /* STABLE */
            }, 8, ["modelValue"]),
            vue.createVNode(_component_u_button, {
              class: "add-btn",
              type: "primary",
              onClick: _cache[6] || (_cache[6] = ($event) => showpop())
            }, {
              default: vue.withCtx(() => [
                vue.createTextVNode("新增")
              ]),
              _: 1
              /* STABLE */
            })
          ])
        ])) : vue.createCommentVNode("v-if", true);
      };
    }
  };
  const editorXRF = /* @__PURE__ */ _export_sfc(_sfc_main$c, [["__scopeId", "data-v-b18390e9"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sampling/pageMonitoringPoint/soilSample/editorXRF.vue"]]);
  const _sfc_main$b = {
    __name: "addOrEditor",
    setup(__props) {
      const visible = vue.ref(true);
      const xrfRef = vue.ref(null);
      function goXrfConf() {
        visible.value = false;
        xrfRef.value.xrfConfVisible = true;
        xrfRef.value.curXrfConf = XRFConfList.value;
        xrfRef.value.curXrfConfLength = XRFConfLength.value;
      }
      const isInspectionRadio = vue.ref([
        {
          name: "是",
          value: "1",
          disabled: false
        },
        {
          name: "否",
          value: "0",
          disabled: false
        }
      ]);
      const hasParallelSampleRadio = vue.ref([
        {
          name: "是",
          value: "1",
          disabled: false
        },
        {
          name: "否",
          value: "0",
          disabled: false
        }
      ]);
      const factorTreeList = vue.ref([]);
      const treePicker = vue.ref();
      const selectName = vue.ref([]);
      function getfactorTypeOptions() {
        const _query = {};
        const id = "505417419548805189";
        getFactorTreeList$1(id, _query).then((res) => {
          factorTreeList.value = res.data.list;
        });
      }
      function showPicker() {
        treePicker.value._show();
      }
      function selectChange(ids, names) {
        dataForm.analysisFactorIds = ids;
        selectName.value = names;
      }
      onLoad(() => {
        getfactorTypeOptions();
      });
      const sampleNoOptions = vue.reactive({
        show: false,
        current: {},
        list: []
      });
      const relationSampleIdOptions = vue.reactive({
        show: false,
        current: {},
        list: []
      });
      function onSampleNoOptions(arr) {
        let current = arr[0];
        sampleNoOptions.current = current;
        dataForm.sampleNo = current.value;
      }
      function onRelationSampleIdOptions(arr) {
        let current = arr[0];
        relationSampleIdOptions.current = current;
        dataForm.relationSampleId = current.value;
      }
      const timeParams = vue.reactive({
        year: true,
        month: true,
        day: true,
        hour: true,
        minute: true,
        second: true
      });
      const curTimeKey = vue.ref(null);
      const selectTimeVisible = vue.ref(false);
      function showPickerDate(value) {
        curTimeKey.value = value, selectTimeVisible.value = true;
      }
      function getTime(e) {
        if (curTimeKey.value === "startTime")
          dataForm.startTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
        else if (curTimeKey.value === "endTime")
          dataForm.endTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
      }
      const XRFConfList = vue.ref([]);
      const XRFConfLength = vue.ref();
      function initXRF() {
        let _query = {};
        getXRFConf(_query).then((res) => {
          let _list = [];
          for (let i = 0; i < res.data.list.length; i++) {
            let _data = res.data.list[i];
            let value = {
              elementCode: _data.elementCode,
              elementName: _data.elementName,
              elementSort: _data.elementSort,
              reading: null
              // soilSampleId: null
            };
            _list.push(value);
          }
          XRFConfList.value = _list;
          XRFConfLength.value = _list.length;
        });
      }
      let dataForm = vue.reactive({
        projectId: "",
        holeId: "",
        holeNo: "",
        sampleId: "",
        sampleDepth: "",
        sampleNo: "",
        sampleName: "",
        sampleCutLength: "",
        pidReading: "",
        isInspection: 0,
        startTime: "",
        endTime: "",
        hasParallelSample: 0,
        relationSampleId: [],
        relationSampleName: "",
        sampleTransportId: "",
        storageMethod: "",
        analysisFactorIds: "",
        xrfDetailsList: [],
        files: []
      });
      function parseData(data) {
        var _data = JSON.parse(JSON.stringify(data));
        if (_data.files) {
          _data.files = JSON.stringify(_data.files);
        } else {
          _data.files = "[]";
        }
        _data.analysisFactorIds = data.analysisFactorIds.toString();
        _data.projectId = uni.getStorageSync("projectId");
        _data.holeId = uni.getStorageSync("holeId");
        _data.id = uni.getStorageSync("wellBaseId");
        return _data;
      }
      function addOrUpdateData() {
        dataForm = parseData(dataForm);
        if (!dataForm.id) {
          addSoilRecord(dataForm).then((res) => ToastFn("创建成功"));
        } else {
          updateSoilRecord(dataForm.id, dataForm).then((res) => ToastFn("修改成功"));
        }
      }
      function ToastFn(text) {
        goToBack();
        uni.showToast({
          title: text,
          duration: 2e3
        });
      }
      function dataInfo(dataAll) {
        let _dataAll = dataAll;
        if (_dataAll.files) {
          _dataAll.files = JSON.parse(_dataAll.files);
        } else {
          _dataAll.files = [];
        }
        dataForm = _dataAll;
      }
      function initData() {
        const id = uni.getStorageSync("soilSampleId");
        if (id) {
          getSoilRecordDetail(id).then((res) => {
            dataInfo(res.data);
            XRFConfList.value = dataForm.xrfDetailsList;
            XRFConfLength.value = dataForm.xrfDetailsList.length;
          });
        } else {
          initXRF();
        }
      }
      onLoad(() => {
        initData();
      });
      function goToBack() {
        uni.setStorageSync("soilSampleId", null);
        uni.navigateBack({
          delta: 1
        });
      }
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_input = resolveEasycom(vue.resolveDynamicComponent("u-input"), __easycom_2$2);
        const _component_u_form_item = resolveEasycom(vue.resolveDynamicComponent("u-form-item"), __easycom_3$1);
        const _component_u_number_box = resolveEasycom(vue.resolveDynamicComponent("u-number-box"), __easycom_7$1);
        const _component_u_radio = resolveEasycom(vue.resolveDynamicComponent("u-radio"), __easycom_4);
        const _component_u_radio_group = resolveEasycom(vue.resolveDynamicComponent("u-radio-group"), __easycom_5);
        const _component_u_form = resolveEasycom(vue.resolveDynamicComponent("u-form"), __easycom_4$1);
        const _component_u_button = resolveEasycom(vue.resolveDynamicComponent("u-button"), __easycom_6$1);
        const _component_ba_tree_picker = resolveEasycom(vue.resolveDynamicComponent("ba-tree-picker"), __easycom_8);
        const _component_u_picker = resolveEasycom(vue.resolveDynamicComponent("u-picker"), __easycom_5$1);
        const _component_u_select = resolveEasycom(vue.resolveDynamicComponent("u-select"), __easycom_8$1);
        return vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          null,
          [
            visible.value ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "main-container"
            }, [
              vue.createElementVNode("view", { class: "status_bar" }, [
                vue.createElementVNode("view", { class: "top_view" })
              ]),
              vue.createElementVNode("view", { class: "mo-container" }, [
                vue.createElementVNode("view", {
                  class: "nav-bar",
                  style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
                }, [
                  vue.createVNode(_component_uni_icons, {
                    onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                    type: "left",
                    size: "30",
                    style: { "line-height": "44px" }
                  }),
                  vue.createElementVNode("text", {
                    class: "title",
                    style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
                  }, "土样记录"),
                  vue.createElementVNode("text", {
                    onClick: _cache[1] || (_cache[1] = ($event) => addOrUpdateData()),
                    type: "primary",
                    class: "submit",
                    style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
                  }, "保存")
                ]),
                vue.createVNode(_component_u_form, {
                  model: vue.unref(dataForm),
                  ref: "Form",
                  style: { "margin": "10px" }
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_form_item, {
                      "label-width": "100px",
                      label: "样品名称",
                      prop: "sampleName"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_u_input, {
                          modelValue: vue.unref(dataForm).sampleName,
                          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => vue.unref(dataForm).sampleName = $event)
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_u_form_item, {
                      "label-width": "100px",
                      label: "采样深度",
                      prop: "sampleDepth"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_u_number_box, {
                          "positive-integer": false,
                          modelValue: vue.unref(dataForm).sampleDepth,
                          "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => vue.unref(dataForm).sampleDepth = $event)
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_u_form_item, {
                      "label-width": "100px",
                      label: "PID读数",
                      prop: "pidReading"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_u_number_box, {
                          "positive-integer": false,
                          modelValue: vue.unref(dataForm).pidReading,
                          "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => vue.unref(dataForm).pidReading = $event)
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createCommentVNode(` <u-form-item label-width='100px' label="土层类型" prop="startTime"><u-input v-model="dataForm.startTime" /></u-form-item> `),
                    vue.createVNode(_component_u_form_item, {
                      "label-width": "100px",
                      label: "开始时间",
                      prop: "startTime"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_u_input, {
                          onClick: _cache[5] || (_cache[5] = ($event) => showPickerDate("startTime")),
                          modelValue: vue.unref(dataForm).startTime,
                          "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => vue.unref(dataForm).startTime = $event)
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_u_form_item, {
                      "label-width": "100px",
                      label: "结束时间",
                      prop: "endTime"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_u_input, {
                          onClick: _cache[7] || (_cache[7] = ($event) => showPickerDate("endTime")),
                          modelValue: vue.unref(dataForm).endTime,
                          "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => vue.unref(dataForm).endTime = $event)
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_u_form_item, {
                      "label-width": "150",
                      label: "是否送检",
                      prop: "isInspection"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_u_radio_group, {
                          modelValue: vue.unref(dataForm).isInspection,
                          "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => vue.unref(dataForm).isInspection = $event)
                        }, {
                          default: vue.withCtx(() => [
                            (vue.openBlock(true), vue.createElementBlock(
                              vue.Fragment,
                              null,
                              vue.renderList(isInspectionRadio.value, (val, index) => {
                                return vue.openBlock(), vue.createBlock(_component_u_radio, {
                                  name: val.value,
                                  disabled: val.disabled,
                                  key: index
                                }, {
                                  default: vue.withCtx(() => [
                                    vue.createTextVNode(
                                      vue.toDisplayString(val.name),
                                      1
                                      /* TEXT */
                                    )
                                  ]),
                                  _: 2
                                  /* DYNAMIC */
                                }, 1032, ["name", "disabled"]);
                              }),
                              128
                              /* KEYED_FRAGMENT */
                            ))
                          ]),
                          _: 1
                          /* STABLE */
                        }, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_u_form_item, {
                      "label-width": "100px",
                      label: "样品编号",
                      prop: "sampleNo"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_u_input, {
                          modelValue: sampleNoOptions.current.label,
                          "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => sampleNoOptions.current.label = $event),
                          type: "select",
                          onClick: _cache[11] || (_cache[11] = ($event) => sampleNoOptions.show = true)
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_u_form_item, {
                      "label-width": "150",
                      label: "是否添加平行样",
                      prop: "hasParallelSample"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_u_radio_group, {
                          modelValue: vue.unref(dataForm).hasParallelSample,
                          "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => vue.unref(dataForm).hasParallelSample = $event)
                        }, {
                          default: vue.withCtx(() => [
                            (vue.openBlock(true), vue.createElementBlock(
                              vue.Fragment,
                              null,
                              vue.renderList(hasParallelSampleRadio.value, (val, index) => {
                                return vue.openBlock(), vue.createBlock(_component_u_radio, {
                                  name: val.value,
                                  disabled: val.disabled,
                                  key: index
                                }, {
                                  default: vue.withCtx(() => [
                                    vue.createTextVNode(
                                      vue.toDisplayString(val.name),
                                      1
                                      /* TEXT */
                                    )
                                  ]),
                                  _: 2
                                  /* DYNAMIC */
                                }, 1032, ["name", "disabled"]);
                              }),
                              128
                              /* KEYED_FRAGMENT */
                            ))
                          ]),
                          _: 1
                          /* STABLE */
                        }, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_u_form_item, {
                      "label-width": "100px",
                      label: "平行样样品编号",
                      prop: "relationSampleId"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_u_input, {
                          modelValue: relationSampleIdOptions.current.label,
                          "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => relationSampleIdOptions.current.label = $event),
                          type: "select",
                          onClick: _cache[14] || (_cache[14] = ($event) => relationSampleIdOptions.show = true)
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_u_form_item, {
                      "label-width": "100px",
                      label: "样品保存方式",
                      prop: "storageMethod"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_u_input, {
                          type: "number",
                          modelValue: vue.unref(dataForm).storageMethod,
                          "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => vue.unref(dataForm).storageMethod = $event)
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_u_form_item, {
                      "label-width": "100px",
                      label: "分析指标"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(_component_u_input, {
                          modelValue: selectName.value,
                          "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => selectName.value = $event),
                          onClick: showPicker
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                      /* STABLE */
                    }),
                    vue.createVNode(_component_u_form_item, {
                      "label-width": "100px",
                      label: "上传图片",
                      prop: "file"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createVNode(upload, {
                          watermark: true,
                          "onUpdate:value": _cache[17] || (_cache[17] = (val) => {
                            vue.unref(dataForm).files = val;
                          }),
                          value: vue.unref(dataForm).files
                        }, null, 8, ["value"])
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  _: 1
                  /* STABLE */
                }, 8, ["model"]),
                vue.createVNode(_component_u_button, {
                  class: "xrf-btn",
                  type: "primary",
                  onClick: goXrfConf
                }, {
                  default: vue.withCtx(() => [
                    vue.createTextVNode("编辑xrf")
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_ba_tree_picker, {
                  ref_key: "treePicker",
                  ref: treePicker,
                  multiple: true,
                  onSelectChange: selectChange,
                  title: "选择分析指标",
                  localdata: factorTreeList.value,
                  valueKey: "id",
                  textKey: "factorName",
                  childrenKey: "children"
                }, null, 8, ["localdata"]),
                vue.createVNode(_component_u_picker, {
                  modelValue: selectTimeVisible.value,
                  "onUpdate:modelValue": _cache[18] || (_cache[18] = ($event) => selectTimeVisible.value = $event),
                  mode: "time",
                  params: timeParams,
                  onConfirm: getTime,
                  "default-time": vue.unref(getCurrentTime)()
                }, null, 8, ["modelValue", "params", "default-time"]),
                vue.createVNode(_component_u_select, {
                  modelValue: sampleNoOptions.show,
                  "onUpdate:modelValue": _cache[19] || (_cache[19] = ($event) => sampleNoOptions.show = $event),
                  "value-name": "sampleNo",
                  "label-name": "sampleNo",
                  list: sampleNoOptions.list,
                  onConfirm: onSampleNoOptions
                }, null, 8, ["modelValue", "list"]),
                vue.createVNode(_component_u_select, {
                  modelValue: relationSampleIdOptions.show,
                  "onUpdate:modelValue": _cache[20] || (_cache[20] = ($event) => relationSampleIdOptions.show = $event),
                  "value-name": "enCode",
                  "label-name": "fullName",
                  list: relationSampleIdOptions.list,
                  onConfirm: onRelationSampleIdOptions
                }, null, 8, ["modelValue", "list"])
              ])
            ])) : vue.createCommentVNode("v-if", true),
            vue.createVNode(
              editorXRF,
              {
                ref_key: "xrfRef",
                ref: xrfRef,
                onEmitVisible: _cache[21] || (_cache[21] = (val) => {
                  visible.value = val;
                }),
                onCurConfData: _cache[22] || (_cache[22] = (val) => XRFConfList.value = val)
              },
              null,
              512
              /* NEED_PATCH */
            )
          ],
          64
          /* STABLE_FRAGMENT */
        );
      };
    }
  };
  const PagesSampleDetectionSamplingPageMonitoringPointSoilSampleAddOrEditor = /* @__PURE__ */ _export_sfc(_sfc_main$b, [["__scopeId", "data-v-26e8eeda"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sampling/pageMonitoringPoint/soilSample/addOrEditor.vue"]]);
  const _sfc_main$a = {
    __name: "addOrEditor",
    setup(__props) {
      const wellTypeOptions2 = vue.reactive({
        show: false,
        current: {},
        list: []
      });
      function getwellTypeOptions() {
        getDictionaryDataSelector("497335660487647813").then((res) => {
          wellTypeOptions2.list = res.data.list;
        });
      }
      function onWellTypeOptions(arr) {
        let current = arr[0];
        wellTypeOptions2.current = current;
        dataForm.wellType = current.label;
      }
      const timeParams = vue.reactive({
        year: true,
        month: true,
        day: true,
        hour: true,
        minute: true,
        second: true
      });
      const curTimeKey = vue.ref(null);
      const selectTimeVisible = vue.ref(false);
      function showPickerDate(value) {
        curTimeKey.value = value, selectTimeVisible.value = true;
      }
      function getTime(e) {
        if (curTimeKey.value === "startTime")
          dataForm.startTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
        else if (curTimeKey.value === "endTime")
          dataForm.endTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
      }
      let dataForm = vue.reactive({
        projectId: "",
        holeId: "",
        wellNo: "",
        wellType: "",
        startTime: "",
        endTime: "",
        wellDepth: 0,
        wellDiameter: 0,
        wellElevation: 0,
        swaterLevelDepth: 0,
        sieveTubeSlitSize: 0,
        sieveTubeTopDepth: 0,
        sieveTubeBottomDepth: 0,
        filterLayerType: "",
        filterLayerTopDepth: 0,
        filterLayerBottomDepth: 0,
        waterBarrierType: "",
        waterBarrierTopDepth: 0,
        waterBarrierBottomDepth: 0,
        files: []
      });
      function parseData(data) {
        var _data = JSON.parse(JSON.stringify(data));
        if (_data.files) {
          _data.files = JSON.stringify(_data.files);
        } else {
          _data.files = "[]";
        }
        _data.projectId = uni.getStorageSync("projectId");
        _data.holeId = uni.getStorageSync("holeId");
        _data.id = uni.getStorageSync("wellBaseId");
        return _data;
      }
      function addOrUpdateData() {
        dataForm = parseData(dataForm);
        if (!dataForm.id) {
          addWellBase(dataForm).then((res) => ToastFn("创建成功"));
        } else {
          updateWellBase(dataForm.id, dataForm).then((res) => ToastFn("修改成功"));
        }
      }
      function ToastFn(text) {
        goToBack();
        uni.showToast({
          title: text,
          duration: 2e3
        });
      }
      function dataInfo(dataAll) {
        let _dataAll = dataAll;
        if (_dataAll.files) {
          _dataAll.files = JSON.parse(_dataAll.files);
        } else {
          _dataAll.files = [];
        }
        dataForm = _dataAll;
      }
      function initData() {
        const id = uni.getStorageSync("wellBaseId");
        if (id) {
          getWellBaseDetail(id).then((res) => {
            dataInfo(res.data);
          });
        }
      }
      onLoad(() => {
        initData();
        getwellTypeOptions();
      });
      function goToBack() {
        uni.setStorageSync("wellBaseId", null);
        uni.navigateBack({
          delta: 1
        });
      }
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_input = resolveEasycom(vue.resolveDynamicComponent("u-input"), __easycom_2$2);
        const _component_u_form_item = resolveEasycom(vue.resolveDynamicComponent("u-form-item"), __easycom_3$1);
        const _component_u_number_box = resolveEasycom(vue.resolveDynamicComponent("u-number-box"), __easycom_7$1);
        const _component_u_form = resolveEasycom(vue.resolveDynamicComponent("u-form"), __easycom_4$1);
        const _component_u_picker = resolveEasycom(vue.resolveDynamicComponent("u-picker"), __easycom_5$1);
        const _component_u_select = resolveEasycom(vue.resolveDynamicComponent("u-select"), __easycom_8$1);
        return vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          null,
          [
            vue.createElementVNode("view", { class: "status_bar" }, [
              vue.createElementVNode("view", { class: "top_view" })
            ]),
            vue.createElementVNode("view", { class: "mo-container" }, [
              vue.createElementVNode("view", {
                class: "nav-bar",
                style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
              }, [
                vue.createVNode(_component_uni_icons, {
                  onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                  type: "left",
                  size: "30",
                  style: { "line-height": "44px" }
                }),
                vue.createElementVNode("text", {
                  class: "title",
                  style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
                }, "建井信息"),
                vue.createElementVNode("text", {
                  onClick: _cache[1] || (_cache[1] = ($event) => addOrUpdateData()),
                  type: "primary",
                  class: "submit",
                  style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
                }, "保存")
              ]),
              vue.createVNode(_component_u_form, {
                model: vue.unref(dataForm),
                ref: "Form",
                style: { "margin": "10px" }
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "监测井编号",
                    prop: "wellNo"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        type: "number",
                        modelValue: vue.unref(dataForm).wellNo,
                        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => vue.unref(dataForm).wellNo = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "监测井类型",
                    prop: "wellType"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: wellTypeOptions2.current.label,
                        "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => wellTypeOptions2.current.label = $event),
                        type: "select",
                        onClick: _cache[4] || (_cache[4] = ($event) => wellTypeOptions2.show = true)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createCommentVNode(` <u-form-item label-width='100px' label="土层类型" prop="startTime"><u-input v-model="dataForm.startTime" /></u-form-item> `),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "开始时间",
                    prop: "startTime"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        onClick: _cache[5] || (_cache[5] = ($event) => showPickerDate("startTime")),
                        modelValue: vue.unref(dataForm).startTime,
                        "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => vue.unref(dataForm).startTime = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "结束时间",
                    prop: "endTime"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        onClick: _cache[7] || (_cache[7] = ($event) => showPickerDate("endTime")),
                        modelValue: vue.unref(dataForm).endTime,
                        "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => vue.unref(dataForm).endTime = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "井深",
                    prop: "wellDepth"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        modelValue: vue.unref(dataForm).wellDepth,
                        "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => vue.unref(dataForm).wellDepth = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "井管内径",
                    prop: "wellDiameter"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        modelValue: vue.unref(dataForm).wellDiameter,
                        "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => vue.unref(dataForm).wellDiameter = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "井口高程",
                    prop: "swaterLevelDepth"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        modelValue: vue.unref(dataForm).wellElevation,
                        "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => vue.unref(dataForm).wellElevation = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createCommentVNode(" <text>监测井信息</text> "),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "筛管切缝尺寸",
                    prop: "sieveTubeSlitSize"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        modelValue: vue.unref(dataForm).sieveTubeSlitSize,
                        "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => vue.unref(dataForm).sieveTubeSlitSize = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "顶部深度",
                    prop: "sieveTubeTopDepth"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        modelValue: vue.unref(dataForm).sieveTubeTopDepth,
                        "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => vue.unref(dataForm).sieveTubeTopDepth = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "底部深度",
                    prop: "sieveTubeBottomDepth"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        modelValue: vue.unref(dataForm).sieveTubeBottomDepth,
                        "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => vue.unref(dataForm).sieveTubeBottomDepth = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "过滤层类型",
                    prop: "filterLayerType"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        type: "number",
                        modelValue: vue.unref(dataForm).filterLayerType,
                        "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => vue.unref(dataForm).filterLayerType = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "顶部深度",
                    prop: "filterLayerTopDepth"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        modelValue: vue.unref(dataForm).filterLayerTopDepth,
                        "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => vue.unref(dataForm).filterLayerTopDepth = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "底部深度",
                    prop: "filterLayerBottomDepth"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        modelValue: vue.unref(dataForm).filterLayerBottomDepth,
                        "onUpdate:modelValue": _cache[17] || (_cache[17] = ($event) => vue.unref(dataForm).filterLayerBottomDepth = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "隔水层类型",
                    prop: "waterBarrierType"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        type: "number",
                        modelValue: vue.unref(dataForm).waterBarrierType,
                        "onUpdate:modelValue": _cache[18] || (_cache[18] = ($event) => vue.unref(dataForm).waterBarrierType = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "顶部深度",
                    prop: "filterLayerTopDepth"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        modelValue: vue.unref(dataForm).filterLayerTopDepth,
                        "onUpdate:modelValue": _cache[19] || (_cache[19] = ($event) => vue.unref(dataForm).filterLayerTopDepth = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "底部深度",
                    prop: "filterLayerBottomDepth"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        modelValue: vue.unref(dataForm).filterLayerBottomDepth,
                        "onUpdate:modelValue": _cache[20] || (_cache[20] = ($event) => vue.unref(dataForm).filterLayerBottomDepth = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "上传图片",
                    prop: "file"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(upload, {
                        watermark: true,
                        "onUpdate:value": _cache[21] || (_cache[21] = (val) => {
                          vue.unref(dataForm).files = val;
                        }),
                        value: vue.unref(dataForm).files
                      }, null, 8, ["value"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }, 8, ["model"]),
              vue.createVNode(_component_u_picker, {
                modelValue: selectTimeVisible.value,
                "onUpdate:modelValue": _cache[22] || (_cache[22] = ($event) => selectTimeVisible.value = $event),
                mode: "time",
                params: timeParams,
                onConfirm: getTime,
                "default-time": vue.unref(getCurrentTime)()
              }, null, 8, ["modelValue", "params", "default-time"]),
              vue.createVNode(_component_u_select, {
                modelValue: wellTypeOptions2.show,
                "onUpdate:modelValue": _cache[23] || (_cache[23] = ($event) => wellTypeOptions2.show = $event),
                "value-name": "enCode",
                "label-name": "fullName",
                list: wellTypeOptions2.list,
                onConfirm: onWellTypeOptions
              }, null, 8, ["modelValue", "list"])
            ])
          ],
          64
          /* STABLE_FRAGMENT */
        );
      };
    }
  };
  const PagesSampleDetectionSamplingPageMonitoringPointWellBaseAddOrEditor = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sampling/pageMonitoringPoint/wellBase/addOrEditor.vue"]]);
  const _sfc_main$9 = {
    __name: "addOrEditor",
    setup(__props) {
      const timeParams = vue.reactive({
        year: true,
        month: true,
        day: true,
        hour: true,
        minute: true,
        second: true
      });
      const curTimeKey = vue.ref(null);
      const selectTimeVisible = vue.ref(false);
      function showPickerDate(value) {
        curTimeKey.value = value, selectTimeVisible.value = true;
      }
      function getTime(e) {
        if (curTimeKey.value === "startTime")
          dataForm.startTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
        else if (curTimeKey.value === "endTime")
          dataForm.endTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
      }
      let dataForm = vue.reactive({
        projectId: "",
        holeId: "",
        wellId: "",
        washMode: "",
        startTime: "",
        endTime: "",
        deviceId: "",
        judgmentContent: "",
        waterVolume: 0,
        waterTemperature: 0,
        waterPh: 0,
        waterConductivity: 0,
        oxReductionPotential: 0,
        dissolvedOxygen: 0,
        waterTurbidity: 0,
        hasNapl: 0,
        waterQualityDesc: "",
        files: []
      });
      const selectRadio = vue.ref([
        {
          name: "是",
          value: "1",
          disabled: false
        },
        {
          name: "否",
          value: "0",
          disabled: false
        }
      ]);
      const wellNoOptions = vue.reactive({
        show: false,
        current: {},
        list: []
      });
      function getWellNoOptions() {
        let _query = {
          projectId: uni.getStorageSync("projectId"),
          holeId: uni.getStorageSync("holeId")
        };
        getWellBaseList(_query).then((res) => {
          var _list = [];
          for (let i = 0; i < res.data.list.length; i++) {
            let _data = res.data.list[i];
            _list.push(_data);
          }
          wellNoOptions.list = _list;
          formatAppLog("log", "at pages/sampleDetection/sampling/pageMonitoringPoint/wellWashRecord/addOrEditor.vue:163", wellNoOptions.list);
        });
      }
      function onWellNoOptions(arr) {
        let current = arr[0];
        wellNoOptions.current = current;
        dataForm.wellId = current.value;
      }
      const washModeOptions = vue.reactive({
        show: false,
        current: {},
        list: []
      });
      function onWashModeOptions(arr) {
        let current = arr[0];
        washModeOptions.current = current;
        dataForm.washMode = current.value;
      }
      function getWashModeOptions() {
        getDictionaryDataSelector("497336968254857797").then((res) => {
          washModeOptions.list = res.data.list;
        });
      }
      function parseFiles(data) {
        var _data = JSON.parse(JSON.stringify(data));
        if (_data.files) {
          _data.files = JSON.stringify(_data.files);
        } else {
          _data.files = "[]";
        }
        formatAppLog("log", "at pages/sampleDetection/sampling/pageMonitoringPoint/wellWashRecord/addOrEditor.vue:194", _data.files);
        _data.projectId = uni.getStorageSync("projectId");
        _data.holeId = uni.getStorageSync("holeId");
        _data.id = uni.getStorageSync("wellWashRecordId");
        return _data;
      }
      function addOrUpdateData() {
        dataForm = parseFiles(dataForm);
        if (!dataForm.id) {
          addWellWashRecord(dataForm).then((res) => ToastFn("创建成功"));
        } else {
          updateWellWashRecord(dataForm.id, dataForm).then((res) => ToastFn("修改成功"));
        }
      }
      function ToastFn(text) {
        goToBack();
        uni.showToast({
          title: text,
          duration: 2e3
        });
      }
      function dataInfo(dataAll) {
        let _dataAll = dataAll;
        if (_dataAll.files) {
          _dataAll.files = JSON.parse(_dataAll.files);
        } else {
          _dataAll.files = [];
        }
        dataForm = _dataAll;
      }
      function initData() {
        const id = uni.getStorageSync("wellWashRecordId");
        if (id) {
          getWellWashRecordDetail(id).then((res) => {
            dataInfo(res.data);
          });
        }
      }
      onLoad(async () => {
        await initData();
        getWellNoOptions();
        getWashModeOptions();
      });
      function goToBack() {
        uni.setStorageSync("wellWashRecordId", null);
        uni.navigateBack({
          delta: 1
        });
      }
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_toast = resolveEasycom(vue.resolveDynamicComponent("u-toast"), __easycom_1$1);
        const _component_u_input = resolveEasycom(vue.resolveDynamicComponent("u-input"), __easycom_2$2);
        const _component_u_form_item = resolveEasycom(vue.resolveDynamicComponent("u-form-item"), __easycom_3$1);
        const _component_u_number_box = resolveEasycom(vue.resolveDynamicComponent("u-number-box"), __easycom_7$1);
        const _component_u_radio = resolveEasycom(vue.resolveDynamicComponent("u-radio"), __easycom_4);
        const _component_u_radio_group = resolveEasycom(vue.resolveDynamicComponent("u-radio-group"), __easycom_5);
        const _component_u_form = resolveEasycom(vue.resolveDynamicComponent("u-form"), __easycom_4$1);
        const _component_u_picker = resolveEasycom(vue.resolveDynamicComponent("u-picker"), __easycom_5$1);
        const _component_u_select = resolveEasycom(vue.resolveDynamicComponent("u-select"), __easycom_8$1);
        return vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          null,
          [
            vue.createElementVNode("view", { class: "status_bar" }, [
              vue.createElementVNode("view", { class: "top_view" })
            ]),
            vue.createElementVNode("view", { class: "mo-container" }, [
              vue.createElementVNode("view", {
                class: "nav-bar",
                style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
              }, [
                vue.createVNode(_component_uni_icons, {
                  onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                  type: "left",
                  size: "30",
                  style: { "line-height": "44px" }
                }),
                vue.createElementVNode("text", {
                  class: "title",
                  style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
                }, "洗井记录"),
                vue.createElementVNode("text", {
                  onClick: _cache[1] || (_cache[1] = ($event) => addOrUpdateData()),
                  type: "primary",
                  class: "submit",
                  style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
                }, "保存")
              ]),
              vue.createVNode(
                _component_u_toast,
                { ref: "uToast" },
                null,
                512
                /* NEED_PATCH */
              ),
              vue.createVNode(_component_u_form, {
                model: vue.unref(dataForm),
                ref: "Form",
                style: { "margin": "10px" }
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "监测井编号",
                    prop: "wellId"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: vue.unref(dataForm).wellId,
                        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => vue.unref(dataForm).wellId = $event),
                        type: "select",
                        onClick: _cache[3] || (_cache[3] = ($event) => wellNoOptions.show = true)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createCommentVNode(` <u-form-item label-width='100px' label="洗井类型" prop="washMode"><u-input  v-model="dataForm.washMode" type="select" @click="washModeOptions.show=true" /></u-form-item> `),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "监测井类型",
                    prop: "washMode"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: vue.unref(dataForm).washMode,
                        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => vue.unref(dataForm).washMode = $event),
                        type: "select",
                        onClick: _cache[5] || (_cache[5] = ($event) => washModeOptions.show = true)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "开始时间",
                    prop: "startTime"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        onClick: _cache[6] || (_cache[6] = ($event) => showPickerDate("startTime")),
                        modelValue: vue.unref(dataForm).startTime,
                        "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => vue.unref(dataForm).startTime = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "结束时间",
                    prop: "endTime"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        onClick: _cache[8] || (_cache[8] = ($event) => showPickerDate("endTime")),
                        modelValue: vue.unref(dataForm).endTime,
                        "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => vue.unref(dataForm).endTime = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createCommentVNode(` <u-form-item label-width='100px' label="土层类型" prop="startTime"><u-input v-model="dataForm.startTime" /></u-form-item> `),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "洗井设备",
                    prop: "deviceId"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: vue.unref(dataForm).deviceId,
                        "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => vue.unref(dataForm).deviceId = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "井水体积",
                    prop: "waterVolume"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        "positive-integer": false,
                        modelValue: vue.unref(dataForm).waterVolume,
                        "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => vue.unref(dataForm).waterVolume = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "水温",
                    prop: "waterTemperature"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        "positive-integer": false,
                        modelValue: vue.unref(dataForm).waterTemperature,
                        "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => vue.unref(dataForm).waterTemperature = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "pH值",
                    prop: "waterPh"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        "positive-integer": false,
                        modelValue: vue.unref(dataForm).waterPh,
                        "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => vue.unref(dataForm).waterPh = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "电导率",
                    prop: "waterConductivity"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        "positive-integer": false,
                        modelValue: vue.unref(dataForm).waterConductivity,
                        "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => vue.unref(dataForm).waterConductivity = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "氧化还原电位",
                    prop: "oxReductionPotential"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        "positive-integer": false,
                        modelValue: vue.unref(dataForm).oxReductionPotential,
                        "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => vue.unref(dataForm).oxReductionPotential = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "溶解氧",
                    prop: "dissolvedOxygen"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        "positive-integer": false,
                        modelValue: vue.unref(dataForm).dissolvedOxygen,
                        "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => vue.unref(dataForm).dissolvedOxygen = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "浊度",
                    prop: "waterTurbidity"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        "positive-integer": false,
                        modelValue: vue.unref(dataForm).waterTurbidity,
                        "onUpdate:modelValue": _cache[17] || (_cache[17] = ($event) => vue.unref(dataForm).waterTurbidity = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "是否发现NAPL",
                    prop: "hasNapl"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_radio_group, {
                        modelValue: vue.unref(dataForm).hasNapl,
                        "onUpdate:modelValue": _cache[18] || (_cache[18] = ($event) => vue.unref(dataForm).hasNapl = $event)
                      }, {
                        default: vue.withCtx(() => [
                          (vue.openBlock(true), vue.createElementBlock(
                            vue.Fragment,
                            null,
                            vue.renderList(selectRadio.value, (val, index) => {
                              return vue.openBlock(), vue.createBlock(_component_u_radio, {
                                name: val.value,
                                disabled: val.disabled,
                                key: index
                              }, {
                                default: vue.withCtx(() => [
                                  vue.createTextVNode(
                                    vue.toDisplayString(val.name),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 2
                                /* DYNAMIC */
                              }, 1032, ["name", "disabled"]);
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "备注",
                    prop: "waterQualityDesc"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: vue.unref(dataForm).waterQualityDesc,
                        "onUpdate:modelValue": _cache[19] || (_cache[19] = ($event) => vue.unref(dataForm).waterQualityDesc = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "上传图片",
                    prop: "file"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(upload, {
                        watermark: true,
                        "onUpdate:value": _cache[20] || (_cache[20] = (val) => {
                          vue.unref(dataForm).files = val;
                        }),
                        value: vue.unref(dataForm).files
                      }, null, 8, ["value"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }, 8, ["model"]),
              vue.createVNode(_component_u_picker, {
                modelValue: selectTimeVisible.value,
                "onUpdate:modelValue": _cache[21] || (_cache[21] = ($event) => selectTimeVisible.value = $event),
                mode: "time",
                params: timeParams,
                onConfirm: getTime,
                "default-time": vue.unref(getCurrentTime)()
              }, null, 8, ["modelValue", "params", "default-time"]),
              vue.createCommentVNode(' <u-select v-model="select1.show" :list="select1.list" @confirm="onSelect1"></u-select> '),
              vue.createVNode(_component_u_select, {
                modelValue: washModeOptions.show,
                "onUpdate:modelValue": _cache[22] || (_cache[22] = ($event) => washModeOptions.show = $event),
                "value-name": "encode",
                "label-name": "fullName",
                list: washModeOptions.list,
                onConfirm: onWashModeOptions
              }, null, 8, ["modelValue", "list"]),
              vue.createVNode(_component_u_select, {
                modelValue: wellNoOptions.show,
                "onUpdate:modelValue": _cache[23] || (_cache[23] = ($event) => wellNoOptions.show = $event),
                "value-name": "wellNo",
                "label-name": "wellNo",
                list: wellNoOptions.list,
                onConfirm: onWellNoOptions
              }, null, 8, ["modelValue", "list"])
            ])
          ],
          64
          /* STABLE_FRAGMENT */
        );
      };
    }
  };
  const PagesSampleDetectionSamplingPageMonitoringPointWellWashRecordAddOrEditor = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sampling/pageMonitoringPoint/wellWashRecord/addOrEditor.vue"]]);
  const _sfc_main$8 = {
    __name: "addOrEditor",
    setup(__props) {
      const factorTreeList = vue.ref([]);
      const treePicker = vue.ref();
      const selectName = vue.ref([]);
      function getfactorTypeOptions() {
        const _query = {};
        const id = "505417419548805189";
        getFactorTreeList$1(id, _query).then((res) => {
          factorTreeList.value = res.data.list;
        });
      }
      function showPicker() {
        treePicker.value._show();
      }
      function selectChange(ids, names) {
        dataForm.value.analysisFactorIds = ids;
        selectName.value = names;
      }
      onLoad(() => {
        getfactorTypeOptions();
      });
      const wellIdOptions = vue.reactive({
        show: false,
        current: {},
        list: []
      });
      function getWellIdOptions() {
        let _query = {
          projectId: uni.getStorageSync("projectId"),
          holeId: uni.getStorageSync("holeId")
        };
        getWellBaseList(_query).then((res) => {
          wellIdOptions.list = res.data.list;
        });
      }
      function onWellIdOptions(arr) {
        let current = arr[0];
        wellIdOptions.current = current;
        dataForm.value.wellId = current.value;
      }
      const sampleNoOptions = vue.reactive({
        show: false,
        current: {},
        list: []
      });
      const relationSampleIdOptions = vue.reactive({
        show: false,
        current: {},
        list: []
      });
      function getSampleNoOptions() {
        let _query = {
          projectId: uni.getStorageSync("projectId"),
          sampleType: "2"
        };
        getSampleBase(_query).then((res) => {
          sampleNoOptions.list = res.data.list;
          relationSampleIdOptions.list = res.data.list;
        });
      }
      function onSampleNoOptions(arr) {
        let current = arr[0];
        sampleNoOptions.current = current;
        dataForm.value.sampleNo = current.value;
      }
      function onRelationSampleIdOptions(arr) {
        let current = arr[0];
        relationSampleIdOptions.current = current;
        dataForm.value.relationSampleId = current.value;
      }
      const timeParams = vue.reactive({
        year: true,
        month: true,
        day: true,
        hour: true,
        minute: true,
        second: true
      });
      const curTimeKey = vue.ref(null);
      const selectTimeVisible = vue.ref(false);
      function showPickerDate(value) {
        curTimeKey.value = value, selectTimeVisible.value = true;
      }
      function getTime(e) {
        if (curTimeKey.value === "startTime")
          dataForm.value.startTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
        else if (curTimeKey.value === "endTime")
          dataForm.value.endTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
      }
      let dataForm = vue.ref({
        projectId: "",
        holeId: "",
        holeNo: "",
        wellId: "",
        sampleId: "",
        sampleNo: "",
        sampleName: "",
        deviceId: "",
        waterTemperature: 0,
        waterPh: 0,
        waterConductivity: 0,
        oxReductionPotential: 0,
        dissolvedOxygen: 0,
        waterTurbidity: 0,
        hasNapl: 0,
        waterQualityDesc: "",
        isInspection: 0,
        startTime: "",
        endTime: "",
        hasParallelSample: 0,
        relationSampleId: "",
        relationSampleId: "",
        sampleTransportId: "",
        storageMethod: "",
        analysisFactorIds: ""
      });
      const isInspectionRadio = vue.ref([
        {
          name: "是",
          value: "1",
          disabled: false
        },
        {
          name: "否",
          value: "0",
          disabled: false
        }
      ]);
      const hasParallelSampleRadio = vue.ref([
        {
          name: "是",
          value: "1",
          disabled: false
        },
        {
          name: "否",
          value: "0",
          disabled: false
        }
      ]);
      const hasNaplRadio = vue.ref([
        {
          name: "是",
          value: "1",
          disabled: false
        },
        {
          name: "否",
          value: "0",
          disabled: false
        }
      ]);
      function parseData(_data) {
        if (_data.files) {
          _data.files = JSON.stringify(_data.files);
        } else {
          _data.files = "[]";
        }
        _data.projectId = uni.getStorageSync("projectId");
        _data.holeId = uni.getStorageSync("holeId");
        _data.id = uni.getStorageSync("water");
        return _data;
      }
      function addOrUpdateData() {
        dataForm.value = parseData(dataForm.value);
        if (!dataForm.id) {
          addWaterSample(dataForm.value).then((res) => ToastFn("创建成功"));
        } else {
          updateWaterSample(dataForm.value.id, dataForm.value).then((res) => ToastFn("修改成功"));
        }
      }
      function ToastFn(text) {
        goToBack();
        uni.showToast({
          title: text,
          duration: 2e3
        });
      }
      function initData() {
        formatAppLog("log", "at pages/sampleDetection/sampling/pageMonitoringPoint/waterSample/addOrEditor.vue:309", "water", uni.getStorageSync("waterSampleId"));
        const id = uni.getStorageSync("waterSampleId");
        if (id) {
          getWaterSampleDetail(id).then((res) => {
            dataInfo(res.data);
          });
        }
      }
      onLoad(() => {
        vue.nextTick(() => {
        });
        initData();
        getWellIdOptions();
        getSampleNoOptions();
      });
      function goToBack() {
        uni.setStorageSync("waterSampleId", null);
        uni.navigateBack({
          delta: 1
        });
      }
      function dataInfo(dataAll) {
        let _dataAll = dataAll;
        if (_dataAll.files) {
          _dataAll.files = JSON.parse(_dataAll.files);
        } else {
          _dataAll.files = [];
        }
        dataForm.value = _dataAll;
      }
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_toast = resolveEasycom(vue.resolveDynamicComponent("u-toast"), __easycom_1$1);
        const _component_u_input = resolveEasycom(vue.resolveDynamicComponent("u-input"), __easycom_2$2);
        const _component_u_form_item = resolveEasycom(vue.resolveDynamicComponent("u-form-item"), __easycom_3$1);
        const _component_u_radio = resolveEasycom(vue.resolveDynamicComponent("u-radio"), __easycom_4);
        const _component_u_radio_group = resolveEasycom(vue.resolveDynamicComponent("u-radio-group"), __easycom_5);
        const _component_u_number_box = resolveEasycom(vue.resolveDynamicComponent("u-number-box"), __easycom_7$1);
        const _component_u_form = resolveEasycom(vue.resolveDynamicComponent("u-form"), __easycom_4$1);
        const _component_ba_tree_picker = resolveEasycom(vue.resolveDynamicComponent("ba-tree-picker"), __easycom_8);
        const _component_u_picker = resolveEasycom(vue.resolveDynamicComponent("u-picker"), __easycom_5$1);
        const _component_u_select = resolveEasycom(vue.resolveDynamicComponent("u-select"), __easycom_8$1);
        return vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          null,
          [
            vue.createElementVNode("view", { class: "status_bar" }, [
              vue.createElementVNode("view", { class: "top_view" })
            ]),
            vue.createElementVNode("view", { class: "mo-container" }, [
              vue.createElementVNode("view", {
                class: "nav-bar",
                style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
              }, [
                vue.createVNode(_component_uni_icons, {
                  onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                  type: "left",
                  size: "30",
                  style: { "line-height": "44px" }
                }),
                vue.createElementVNode("text", {
                  class: "title",
                  style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
                }, "水样记录"),
                vue.createElementVNode("text", {
                  onClick: _cache[1] || (_cache[1] = ($event) => addOrUpdateData()),
                  type: "primary",
                  class: "submit",
                  style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
                }, "保存")
              ]),
              vue.createVNode(
                _component_u_toast,
                { ref: "uToast" },
                null,
                512
                /* NEED_PATCH */
              ),
              vue.createVNode(_component_u_form, {
                model: vue.unref(dataForm),
                ref: "Form",
                style: { "margin": "10px" }
              }, {
                default: vue.withCtx(() => [
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "监测井编号",
                    prop: "wellId"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: vue.unref(dataForm).wellId,
                        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => vue.unref(dataForm).wellId = $event),
                        type: "select",
                        onClick: _cache[3] || (_cache[3] = ($event) => wellIdOptions.show = true)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "样品名称(采样)",
                    prop: "sampleName"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: vue.unref(dataForm).sampleName,
                        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => vue.unref(dataForm).sampleName = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "开始时间",
                    prop: "startTime"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        disabled: "",
                        onClick: _cache[5] || (_cache[5] = ($event) => showPickerDate("startTime")),
                        modelValue: vue.unref(dataForm).startTime,
                        "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => vue.unref(dataForm).startTime = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "结束时间",
                    prop: "endTime"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        disabled: "",
                        onClick: _cache[7] || (_cache[7] = ($event) => showPickerDate("endTime")),
                        modelValue: vue.unref(dataForm).endTime,
                        "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => vue.unref(dataForm).endTime = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "150",
                    label: "是否送检",
                    prop: "isInspection"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_radio_group, {
                        modelValue: vue.unref(dataForm).isInspection,
                        "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => vue.unref(dataForm).isInspection = $event)
                      }, {
                        default: vue.withCtx(() => [
                          (vue.openBlock(true), vue.createElementBlock(
                            vue.Fragment,
                            null,
                            vue.renderList(isInspectionRadio.value, (val, index) => {
                              return vue.openBlock(), vue.createBlock(_component_u_radio, {
                                name: val.value,
                                disabled: val.disabled,
                                key: index
                              }, {
                                default: vue.withCtx(() => [
                                  vue.createTextVNode(
                                    vue.toDisplayString(val.name),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 2
                                /* DYNAMIC */
                              }, 1032, ["name", "disabled"]);
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "样品编号",
                    prop: "sampleNo"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: vue.unref(dataForm).sampleNo,
                        "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => vue.unref(dataForm).sampleNo = $event),
                        type: "select",
                        onClick: _cache[11] || (_cache[11] = ($event) => sampleNoOptions.show = true)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "150",
                    label: "是否添加平行样",
                    prop: "hasParallelSample"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_radio_group, {
                        modelValue: vue.unref(dataForm).hasParallelSample,
                        "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => vue.unref(dataForm).hasParallelSample = $event)
                      }, {
                        default: vue.withCtx(() => [
                          (vue.openBlock(true), vue.createElementBlock(
                            vue.Fragment,
                            null,
                            vue.renderList(hasParallelSampleRadio.value, (val, index) => {
                              return vue.openBlock(), vue.createBlock(_component_u_radio, {
                                name: val.value,
                                disabled: val.disabled,
                                key: index
                              }, {
                                default: vue.withCtx(() => [
                                  vue.createTextVNode(
                                    vue.toDisplayString(val.name),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 2
                                /* DYNAMIC */
                              }, 1032, ["name", "disabled"]);
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "平行样样品编号",
                    prop: "relationSampleId"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: relationSampleIdOptions.current.label,
                        "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => relationSampleIdOptions.current.label = $event),
                        type: "select",
                        onClick: _cache[14] || (_cache[14] = ($event) => relationSampleIdOptions.show = true)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "样品保存方式",
                    prop: "storageMethod"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        type: "number",
                        modelValue: vue.unref(dataForm).storageMethod,
                        "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => vue.unref(dataForm).storageMethod = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createCommentVNode(` 	<u-form-item label-width='100px' label="采样设备" prop="deviceIdOptions"><u-input
					v-model="deviceIdOptions.current.label" type="select"
					@click="deviceIdOptions.show=true" /></u-form-item> `),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "分析指标"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_input, {
                        modelValue: selectName.value,
                        "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => selectName.value = $event),
                        onClick: showPicker
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "井深",
                    prop: "waterTemperature"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        "positive-integer": false,
                        modelValue: vue.unref(dataForm).waterTemperature,
                        "onUpdate:modelValue": _cache[17] || (_cache[17] = ($event) => vue.unref(dataForm).waterTemperature = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "pH值",
                    prop: "waterPh"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        "positive-integer": false,
                        modelValue: vue.unref(dataForm).waterPh,
                        "onUpdate:modelValue": _cache[18] || (_cache[18] = ($event) => vue.unref(dataForm).waterPh = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "电导率",
                    prop: "waterConductivity"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        "positive-integer": false,
                        modelValue: vue.unref(dataForm).waterConductivity,
                        "onUpdate:modelValue": _cache[19] || (_cache[19] = ($event) => vue.unref(dataForm).waterConductivity = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "氧化还原电位",
                    prop: "oxReductionPotential"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        "positive-integer": false,
                        modelValue: vue.unref(dataForm).oxReductionPotential,
                        "onUpdate:modelValue": _cache[20] || (_cache[20] = ($event) => vue.unref(dataForm).oxReductionPotential = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "溶解氧",
                    prop: "dissolvedOxygen"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        "positive-integer": false,
                        modelValue: vue.unref(dataForm).dissolvedOxygen,
                        "onUpdate:modelValue": _cache[21] || (_cache[21] = ($event) => vue.unref(dataForm).dissolvedOxygen = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "浊度",
                    prop: "waterTurbidity"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_number_box, {
                        "positive-integer": false,
                        modelValue: vue.unref(dataForm).waterTurbidity,
                        "onUpdate:modelValue": _cache[22] || (_cache[22] = ($event) => vue.unref(dataForm).waterTurbidity = $event)
                      }, null, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "发现NAPL",
                    prop: "hasNapl"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(_component_u_radio_group, {
                        modelValue: vue.unref(dataForm).hasNapl,
                        "onUpdate:modelValue": _cache[23] || (_cache[23] = ($event) => vue.unref(dataForm).hasNapl = $event)
                      }, {
                        default: vue.withCtx(() => [
                          (vue.openBlock(true), vue.createElementBlock(
                            vue.Fragment,
                            null,
                            vue.renderList(hasNaplRadio.value, (val, index) => {
                              return vue.openBlock(), vue.createBlock(_component_u_radio, {
                                name: val.value,
                                disabled: val.disabled,
                                key: index
                              }, {
                                default: vue.withCtx(() => [
                                  vue.createTextVNode(
                                    vue.toDisplayString(val.name),
                                    1
                                    /* TEXT */
                                  )
                                ]),
                                _: 2
                                /* DYNAMIC */
                              }, 1032, ["name", "disabled"]);
                            }),
                            128
                            /* KEYED_FRAGMENT */
                          ))
                        ]),
                        _: 1
                        /* STABLE */
                      }, 8, ["modelValue"])
                    ]),
                    _: 1
                    /* STABLE */
                  }),
                  vue.createVNode(_component_u_form_item, {
                    "label-width": "100px",
                    label: "上传图片",
                    prop: "file"
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(upload, {
                        watermark: true,
                        "onUpdate:value": _cache[24] || (_cache[24] = (val) => {
                          vue.unref(dataForm).files = val;
                        }),
                        value: vue.unref(dataForm).files
                      }, null, 8, ["value"])
                    ]),
                    _: 1
                    /* STABLE */
                  })
                ]),
                _: 1
                /* STABLE */
              }, 8, ["model"]),
              vue.createVNode(_component_ba_tree_picker, {
                ref_key: "treePicker",
                ref: treePicker,
                multiple: true,
                onSelectChange: selectChange,
                title: "选择分析指标",
                localdata: factorTreeList.value,
                valueKey: "id",
                textKey: "factorName",
                childrenKey: "children"
              }, null, 8, ["localdata"]),
              vue.createVNode(_component_u_picker, {
                modelValue: selectTimeVisible.value,
                "onUpdate:modelValue": _cache[25] || (_cache[25] = ($event) => selectTimeVisible.value = $event),
                mode: "time",
                params: timeParams,
                onConfirm: getTime,
                "default-time": vue.unref(getCurrentTime)()
              }, null, 8, ["modelValue", "params", "default-time"]),
              vue.createVNode(_component_u_select, {
                modelValue: wellIdOptions.show,
                "onUpdate:modelValue": _cache[26] || (_cache[26] = ($event) => wellIdOptions.show = $event),
                "value-name": "wellNo",
                "label-name": "wellNo",
                list: wellIdOptions.list,
                onConfirm: onWellIdOptions
              }, null, 8, ["modelValue", "list"]),
              vue.createVNode(_component_u_select, {
                modelValue: sampleNoOptions.show,
                "onUpdate:modelValue": _cache[27] || (_cache[27] = ($event) => sampleNoOptions.show = $event),
                "value-name": "sampleNo",
                "label-name": "sampleNo",
                list: sampleNoOptions.list,
                onConfirm: onSampleNoOptions
              }, null, 8, ["modelValue", "list"]),
              vue.createVNode(_component_u_select, {
                modelValue: relationSampleIdOptions.show,
                "onUpdate:modelValue": _cache[28] || (_cache[28] = ($event) => relationSampleIdOptions.show = $event),
                "value-name": "sampleNo",
                "label-name": "sampleNo",
                list: relationSampleIdOptions.list,
                onConfirm: onRelationSampleIdOptions
              }, null, 8, ["modelValue", "list"]),
              vue.createCommentVNode(' 	<u-select v-model="deviceIdOptions.show" value-name="enCode" label-name="fullName" :list="deviceIdOptions.list"\n			@confirm="onDeviceIdOptions"></u-select> ')
            ])
          ],
          64
          /* STABLE_FRAGMENT */
        );
      };
    }
  };
  const PagesSampleDetectionSamplingPageMonitoringPointWaterSampleAddOrEditor = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/sampleDetection/sampling/pageMonitoringPoint/waterSample/addOrEditor.vue"]]);
  function getMaterielList(data) {
    return request({
      url: `/api/material/Stock/getList`,
      method: "post",
      data
    });
  }
  function getApplyEquipmentList(data) {
    return request({
      url: `/api/equipment/Apply/getList`,
      method: "post",
      data
    });
  }
  function getEquipmentList(data) {
    return request({
      url: `/api/equipment/Base/getList`,
      method: "post",
      data
    });
  }
  function addEquipment(data) {
    return request({
      url: `/api/equipment/Apply`,
      method: "post",
      data
    });
  }
  const _sfc_main$7 = {
    name: "u-top-tips",
    props: {
      // 导航栏高度，用于提示的初始化
      navbarHeight: {
        type: [Number, String],
        default: 0
      },
      // z-index值
      zIndex: {
        type: [Number, String],
        default: ""
      }
    },
    data() {
      return {
        timer: null,
        // 定时器
        isShow: false,
        // 是否显示消息组件
        title: "",
        // 组件中显示的消息内容
        type: "primary",
        // 消息的类型（颜色不同），primary，success，error，warning，info
        duration: 2e3
        // 组件显示的时间，单位为毫秒
      };
    },
    computed: {
      uZIndex() {
        return this.zIndex ? this.zIndex : this.$u.zIndex.topTips;
      }
    },
    methods: {
      show(config2 = {}) {
        clearTimeout(this.timer);
        if (config2.duration)
          this.duration = config2.duration;
        if (config2.type)
          this.type = config2.type;
        this.title = config2.title;
        this.isShow = true;
        this.timer = setTimeout(() => {
          this.isShow = false;
          clearTimeout(this.timer);
          this.timer = null;
        }, this.duration);
      }
    }
  };
  function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
    return vue.openBlock(), vue.createElementBlock(
      "view",
      {
        class: vue.normalizeClass(["u-tips", ["u-" + $data.type, $data.isShow ? "u-tip-show" : ""]]),
        style: vue.normalizeStyle({
          top: $props.navbarHeight + "px",
          zIndex: $options.uZIndex
        })
      },
      vue.toDisplayString($data.title),
      7
      /* TEXT, CLASS, STYLE */
    );
  }
  const __easycom_7 = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render$1], ["__scopeId", "data-v-36024d78"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/uni_modules/vk-uview-ui/components/u-top-tips/u-top-tips.vue"]]);
  const _sfc_main$6 = {
    __name: "addMateriel",
    emits: ["emitVisible"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const emits = __emit;
      const selectTimeVisible = vue.ref(false);
      const timeParams = {
        year: true,
        month: true,
        day: true,
        hour: true,
        minute: true,
        second: true
      };
      let dataForm = vue.reactive({
        applyType: "StockCheck",
        domain: "material",
        projectId: "",
        applyCode: "",
        applyUserId: "",
        applyTime: "",
        planTime: "",
        applyCount: 0,
        remark: "",
        detailList: [],
        organizeId: ""
      });
      function getTime(e) {
        dataForm.applyTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
      }
      const addVisible = vue.ref(false);
      function onProjectOptions(arr) {
        let current = arr[0];
        projectOptions.current = current;
        dataForm.projectId = current.value;
        getMateriel2();
      }
      const projectOptions = vue.reactive({
        show: false,
        current: {},
        list: []
      });
      function getProjectList() {
        const params = {
          currentPage: 1,
          menuId: getMenuId("项目列表"),
          sidx: "encode",
          sort: "asc"
        };
        getProjectBaseList(params).then((res) => {
          projectOptions.list = res.data;
          formatAppLog("log", "at pages/labOperation/materiel/addMateriel.vue:150", "liebiao", projectOptions);
        });
      }
      const materielOptions = vue.reactive({
        show: false,
        current: {},
        list: []
      });
      function onMaterielOptions(arr) {
        let current = arr[0];
        let currentData = null;
        materielOptions.current = current;
        for (let val of materielOptions.list) {
          if (val.materialId === current.value) {
            currentData = val;
            formatAppLog("log", "at pages/labOperation/materiel/addMateriel.vue:173", currentData);
            return;
          }
        }
        let selectMaterie = {
          applyCount: 0,
          applyType: dataForm.applyType,
          // currStockCount: current.currStockCount,
          id: generateUUID(),
          isHazchem: currentData.isHazchem,
          lastStockCount: currentData.lastStockCount,
          //现有库存
          materialId: currentData.materialId,
          materialModel: currentData.materialModel,
          materialName: currentData.materialName,
          materialPrice: currentData.materialPrice,
          currStockCount: 0,
          //盘点数量
          storeState: currentData.currStockCount
        };
        materielList.value[materielIdx.value] = selectMaterie;
      }
      const materielIdx = vue.ref(0);
      function currentMateriel(idx) {
        materielIdx.value = idx;
        materielOptions.show = true;
      }
      const materielList = vue.ref([]);
      let uTips = vue.ref(null);
      function getMateriel2() {
        if (dataForm.projectId) {
          const params = {
            domain: "material",
            projectId: dataForm.projectId,
            sidx: "materialName",
            sort: "asc"
          };
          getMaterielList(params).then((res) => {
            materielOptions.list = res.data.list;
          });
        } else {
          uTips.value.show({
            title: "请先选择项目!",
            type: "error",
            duration: "2300"
          });
        }
      }
      function addMateriel2() {
        let newMaterie = {
          applyCount: null,
          applyType: null,
          currStockCount: null,
          id: generateUUID(),
          isHazchem: null,
          lastStockCount: null,
          materialId: null,
          materialModel: null,
          materialName: null,
          materialPrice: null,
          storeState: null
        };
        materielList.value.push(newMaterie);
      }
      function addOrUpdateData() {
      }
      onLoad(() => {
        getProjectList();
      });
      onReady(() => {
        popup.value.open();
      });
      function goToBack() {
        addVisible.value = false;
        emits("emitVisible", true);
      }
      const checkType = vue.ref("1");
      __expose({
        addVisible,
        dataForm,
        checkType
      });
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_toast = resolveEasycom(vue.resolveDynamicComponent("u-toast"), __easycom_1$1);
        const _component_u_input = resolveEasycom(vue.resolveDynamicComponent("u-input"), __easycom_2$2);
        const _component_u_form_item = resolveEasycom(vue.resolveDynamicComponent("u-form-item"), __easycom_3$1);
        const _component_u_form = resolveEasycom(vue.resolveDynamicComponent("u-form"), __easycom_4$1);
        const _component_u_picker = resolveEasycom(vue.resolveDynamicComponent("u-picker"), __easycom_5$1);
        const _component_u_button = resolveEasycom(vue.resolveDynamicComponent("u-button"), __easycom_6$1);
        const _component_u_number_box = resolveEasycom(vue.resolveDynamicComponent("u-number-box"), __easycom_7$1);
        const _component_u_top_tips = resolveEasycom(vue.resolveDynamicComponent("u-top-tips"), __easycom_7);
        const _component_u_select = resolveEasycom(vue.resolveDynamicComponent("u-select"), __easycom_8$1);
        return addVisible.value ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "main-container"
        }, [
          vue.createElementVNode("view", { class: "status_bar" }, [
            vue.createElementVNode("view", { class: "top_view" })
          ]),
          vue.createElementVNode("view", { class: "qc-container" }, [
            vue.createElementVNode("view", {
              class: "nav-bar",
              style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
            }, [
              vue.createVNode(_component_uni_icons, {
                onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                type: "left",
                size: "30",
                style: { "line-height": "44px" }
              }),
              vue.createElementVNode("text", {
                class: "title",
                style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
              }, "盘点物料库存"),
              vue.createElementVNode("text", {
                onClick: _cache[1] || (_cache[1] = ($event) => addOrUpdateData()),
                type: "primary",
                class: "submit",
                style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
              }, "保存")
            ]),
            vue.createVNode(
              _component_u_toast,
              { ref: "uToast" },
              null,
              512
              /* NEED_PATCH */
            ),
            vue.createElementVNode("text", {
              class: "form-title",
              style: { "margin-left": "20px", "font-weight": "bold" }
            }, "基本信息"),
            vue.createVNode(driver),
            vue.createVNode(_component_u_form, {
              model: vue.unref(dataForm),
              ref: "Form",
              style: { "margin": "10px" }
            }, {
              default: vue.withCtx(() => [
                vue.createCommentVNode(` <u-form-item label-width='100px' label="记录编号" prop="startDepth"><u-input  v-model="dataForm.startDepth" /></u-form-item> `),
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "选择项目",
                  prop: "checkTime"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_input, {
                      modelValue: projectOptions.current.label,
                      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => projectOptions.current.label = $event),
                      type: "select",
                      onClick: _cache[3] || (_cache[3] = ($event) => projectOptions.show = true)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createCommentVNode(` <u-form-item label-width='100px' label="土层类型" prop="startTime"><u-input v-model="dataForm.startTime" /></u-form-item> `),
                vue.createCommentVNode(` <u-form-item label-width='100px' label="检查人" prop="checkUserId"><u-input v-model="dataForm.solumColor" /></u-form-item> `),
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "申请人",
                  prop: "weather"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_input, {
                      modelValue: vue.unref(dataForm).weather,
                      "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => vue.unref(dataForm).weather = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "申请时间",
                  prop: "applyTime"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_input, {
                      onClick: _cache[5] || (_cache[5] = ($event) => selectTimeVisible.value = true),
                      modelValue: vue.unref(dataForm).applyTime,
                      "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => vue.unref(dataForm).applyTime = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "申请事由",
                  prop: "weather"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_input, {
                      modelValue: vue.unref(dataForm).weather,
                      "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => vue.unref(dataForm).weather = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }, 8, ["model"]),
            vue.createVNode(_component_u_picker, {
              modelValue: selectTimeVisible.value,
              "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => selectTimeVisible.value = $event),
              mode: "time",
              params: timeParams,
              onConfirm: getTime,
              "default-time": vue.unref(getCurrentTime)()
            }, null, 8, ["modelValue", "default-time"]),
            vue.createElementVNode("view", { class: "stock-title" }, [
              vue.createElementVNode("text", {
                class: "form-title",
                style: { "margin-left": "20px", "font-weight": "bold" }
              }, "物料库存"),
              vue.createVNode(_component_u_button, {
                type: "success",
                class: "add-btn",
                size: "mini",
                onClick: addMateriel2
              }, {
                default: vue.withCtx(() => [
                  vue.createTextVNode("新增")
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            vue.createVNode(driver),
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList(materielList.value, (item, index) => {
                return vue.openBlock(), vue.createElementBlock("view", { class: "stock-box" }, [
                  vue.createElementVNode("view", { class: "stock-Header" }, [
                    vue.createElementVNode("text", { class: "title" }, "新增一条"),
                    vue.createVNode(_component_u_button, {
                      type: "error",
                      class: "delete-btn",
                      size: "mini"
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode("删除")
                      ]),
                      _: 1
                      /* STABLE */
                    })
                  ]),
                  vue.createVNode(_component_u_form, {
                    model: materielList.value[index],
                    ref_for: true,
                    ref: "Form",
                    style: { "margin": "10px" }
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(
                        _component_u_form_item,
                        {
                          "label-width": "100px",
                          label: "物料",
                          prop: "startDepth"
                        },
                        {
                          default: vue.withCtx(() => [
                            vue.createVNode(_component_u_input, {
                              modelValue: materielList.value[index].materialName,
                              "onUpdate:modelValue": ($event) => materielList.value[index].materialName = $event,
                              type: "select",
                              onClick: ($event) => currentMateriel(index)
                            }, null, 8, ["modelValue", "onUpdate:modelValue", "onClick"])
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1024
                        /* DYNAMIC_SLOTS */
                      ),
                      vue.createVNode(
                        _component_u_form_item,
                        {
                          "label-width": "100px",
                          label: "规格型号",
                          prop: "materialModel"
                        },
                        {
                          default: vue.withCtx(() => [
                            vue.createVNode(_component_u_input, {
                              modelValue: materielList.value[index].materialModel,
                              "onUpdate:modelValue": ($event) => materielList.value[index].materialModel = $event
                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1024
                        /* DYNAMIC_SLOTS */
                      ),
                      vue.createCommentVNode(` <u-form-item label-width='100px' label="土层类型" prop="startTime"><u-input v-model="dataForm.startTime" /></u-form-item> `),
                      vue.createCommentVNode(` <u-form-item label-width='100px' label="检查人" prop="checkUserId"><u-input v-model="dataForm.solumColor" /></u-form-item> `),
                      vue.createVNode(_component_u_form_item, {
                        "label-width": "100px",
                        label: "盘点数量",
                        prop: "currStockCount"
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(_component_u_number_box, {
                            "positive-integer": false,
                            modelValue: _ctx.value,
                            "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => _ctx.value = $event),
                            onChange: _ctx.valChange
                          }, null, 8, ["modelValue", "onChange"])
                        ]),
                        _: 1
                        /* STABLE */
                      }),
                      vue.createVNode(_component_u_form_item, {
                        "label-width": "100px",
                        label: "盘存说明",
                        prop: "temperature"
                      }, {
                        default: vue.withCtx(() => [
                          vue.createVNode(_component_u_input, {
                            modelValue: vue.unref(dataForm).temperature,
                            "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => vue.unref(dataForm).temperature = $event)
                          }, null, 8, ["modelValue"])
                        ]),
                        _: 1
                        /* STABLE */
                      })
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1032, ["model"])
                ]);
              }),
              256
              /* UNKEYED_FRAGMENT */
            )),
            vue.createVNode(
              _component_u_top_tips,
              {
                ref_key: "uTips",
                ref: uTips
              },
              null,
              512
              /* NEED_PATCH */
            ),
            vue.createVNode(_component_u_select, {
              modelValue: projectOptions.show,
              "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => projectOptions.show = $event),
              "value-name": "id",
              "label-name": "name",
              list: projectOptions.list,
              onConfirm: onProjectOptions
            }, null, 8, ["modelValue", "list"]),
            vue.createVNode(_component_u_select, {
              modelValue: materielOptions.show,
              "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => materielOptions.show = $event),
              "value-name": "materialId",
              "label-name": "materialName",
              list: materielOptions.list,
              onConfirm: onMaterielOptions
            }, null, 8, ["modelValue", "list"])
          ])
        ])) : vue.createCommentVNode("v-if", true);
      };
    }
  };
  const addMateriel = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["__scopeId", "data-v-c251e680"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/labOperation/materiel/addMateriel.vue"]]);
  const _sfc_main$5 = {
    __name: "index",
    setup(__props) {
      const searchKeyWord = vue.ref();
      const tableData = vue.ref([]);
      async function getMenuList2() {
        const menuId = getMenuId$1("库存管理");
        let queryData = {
          currentPage: 1,
          materialName: searchKeyWord.value,
          materialType: "",
          packType: "",
          supplierId: "",
          materialModel: "",
          domain: "material",
          // pageSize: 0,
          sort: "asc",
          sidx: "encode",
          menuId
        };
        getMaterielList(queryData).then((res) => {
          tableData.value = res.data.list;
          formatAppLog("log", "at pages/labOperation/materiel/index.vue:71", tableData.value);
        });
      }
      function goToBack() {
        uni.navigateBack({ delta: 1 });
      }
      const addRef = vue.ref(null);
      const mainVisible = vue.ref(true);
      function goToAdd() {
        addRef.value.addVisible = true;
        mainVisible.value = false;
      }
      onLoad(() => {
        getMenuList2();
        formatAppLog("log", "at pages/labOperation/materiel/index.vue:86", searchId("484411573868167301"));
      });
      onPullDownRefresh(async () => {
        await getMenuList2();
        uni.stopPullDownRefresh();
      });
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_search = resolveEasycom(vue.resolveDynamicComponent("u-search"), __easycom_1$7);
        const _component_u_empty = resolveEasycom(vue.resolveDynamicComponent("u-empty"), __easycom_4$2);
        return vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          null,
          [
            mainVisible.value ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "main-container"
            }, [
              vue.createElementVNode("view", { class: "status_bar" }, [
                vue.createElementVNode("view", { class: "top_view" })
              ]),
              vue.createElementVNode("view", { class: "m-container" }, [
                vue.createElementVNode("view", {
                  class: "nav-bar",
                  style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
                }, [
                  vue.createVNode(_component_uni_icons, {
                    onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                    type: "left",
                    size: "30",
                    style: { "line-height": "44px" }
                  }),
                  vue.createElementVNode("text", {
                    class: "title",
                    style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
                  }, "物料库存详细"),
                  vue.createElementVNode("text", {
                    onClick: _cache[1] || (_cache[1] = ($event) => goToAdd()),
                    type: "primary",
                    class: "submit",
                    style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
                  }, "新增")
                ]),
                vue.createElementVNode("view", { class: "search-box" }, [
                  vue.createVNode(_component_u_search, {
                    placeholder: "请输入物料名称",
                    modelValue: searchKeyWord.value,
                    "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => searchKeyWord.value = $event)
                  }, null, 8, ["modelValue"])
                ]),
                vue.createElementVNode("view", { class: "content-box" }, [
                  tableData.value.length ? (vue.openBlock(true), vue.createElementBlock(
                    vue.Fragment,
                    { key: 0 },
                    vue.renderList(tableData.value, (item) => {
                      return vue.openBlock(), vue.createElementBlock("view", {
                        class: "item-box",
                        key: item.id
                      }, [
                        vue.createElementVNode("view", { class: "left-item" }, [
                          vue.createElementVNode(
                            "view",
                            { class: "title" },
                            "物料名称：" + vue.toDisplayString(item.materialName),
                            1
                            /* TEXT */
                          ),
                          vue.createElementVNode("view", { class: "center-zone" }, [
                            vue.createElementVNode(
                              "text",
                              { class: "area" },
                              "规格型号：" + vue.toDisplayString(item.materialModel),
                              1
                              /* TEXT */
                            ),
                            vue.createElementVNode(
                              "text",
                              { class: "project" },
                              vue.toDisplayString(item.typetext),
                              1
                              /* TEXT */
                            )
                          ]),
                          vue.createElementVNode(
                            "text",
                            { class: "time" },
                            "物料类型：" + vue.toDisplayString(item.materialType),
                            1
                            /* TEXT */
                          )
                        ])
                      ]);
                    }),
                    128
                    /* KEYED_FRAGMENT */
                  )) : (vue.openBlock(), vue.createBlock(_component_u_empty, {
                    key: 1,
                    style: { "margin-top": "40px" },
                    text: "暂无数据",
                    mode: "list"
                  }))
                ])
              ])
            ])) : vue.createCommentVNode("v-if", true),
            vue.createVNode(
              addMateriel,
              {
                ref_key: "addRef",
                ref: addRef,
                onEmitVisible: _cache[3] || (_cache[3] = (val) => mainVisible.value = val)
              },
              null,
              512
              /* NEED_PATCH */
            )
          ],
          64
          /* STABLE_FRAGMENT */
        );
      };
    }
  };
  const PagesLabOperationMaterielIndex = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["__scopeId", "data-v-89a2b6f1"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/labOperation/materiel/index.vue"]]);
  const _sfc_main$4 = {
    __name: "applyInstrument",
    emits: ["emitVisible"],
    setup(__props, { expose: __expose, emit: __emit }) {
      const emits = __emit;
      const timeParams = vue.reactive({
        year: true,
        month: true,
        day: true,
        hour: true,
        minute: true,
        second: true
      });
      const useStarTime = vue.ref(null);
      const useOverTime = vue.ref(null);
      let dataForm = vue.reactive({
        applyType: "Rec",
        domain: "equip",
        applyCode: "",
        applyUserId: "",
        useDay: "",
        useRang: "",
        useRangArray: [],
        remark: "",
        detailList: [],
        organizeId: "",
        useState: 9
      });
      const curTimeKey = vue.ref(null);
      const curTimeType = vue.ref(0);
      const selectTimeVisible = vue.ref(false);
      function showPickerDate(value, type2) {
        curTimeKey.value = value, selectTimeVisible.value = true;
        curTimeType.value = type2;
        if (curTimeType.value === 0) {
          const newTimeParams = {
            year: true,
            month: true,
            day: true,
            hour: true,
            minute: true,
            second: true
          };
          Object.assign(timeParams, newTimeParams);
        } else if (curTimeType.value === 1) {
          const newTimeParams = {
            year: false,
            month: false,
            day: false,
            hour: true,
            minute: true,
            second: false
          };
          Object.assign(timeParams, newTimeParams);
        }
      }
      function getTime(e) {
        formatAppLog("log", "at pages/labOperation/instrument/applyInstrument.vue:164", curTimeKey.value);
        if (curTimeType.value == 0) {
          if (curTimeKey.value === "applyTime")
            dataForm.applyTime = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
          else if (curTimeKey.value === "useDay")
            dataForm.useDay = `${e.year}-${e.month}-${e.day} ${e.hour}:${e.minute}:${e.second}`;
        } else if (curTimeType.value == 1) {
          if (curTimeKey.value === "useStarTime")
            useStarTime.value = curTimeKey.value = `${e.hour}:${e.minute}`;
          else if (curTimeKey.value === "useOverTime")
            useOverTime.value = curTimeKey.value = `${e.hour}:${e.minute}`;
        }
      }
      const addVisible = vue.ref(false);
      function onProjectOptions(arr) {
        let current = arr[0];
        projectOptions.current = current;
        dataForm.projectId = current.value;
        getMateriel();
      }
      const projectOptions = vue.reactive({
        show: false,
        current: {},
        list: []
      });
      function getProjectList() {
        const params = {
          currentPage: 1,
          menuId: getMenuId("项目列表"),
          sidx: "encode",
          sort: "asc"
        };
        getProjectBaseList(params).then((res) => {
          projectOptions.list = res.data;
        });
      }
      const InstrumentOptions = vue.reactive({
        show: false,
        current: {},
        list: []
      });
      const InstrumentList = vue.ref([]);
      function onInstrument(arr) {
        let current = arr[0];
        let currentData = null;
        InstrumentOptions.current = current;
        for (let val of InstrumentOptions.list) {
          if (val.id === current.value) {
            currentData = val;
            break;
          }
        }
        let selectInstrument = {
          applyType: currentData.applyType,
          assetGrade: currentData.assetGrade,
          assetModel: currentData.assetModel,
          assetName: currentData.assetName,
          assetNo: currentData.assetNo,
          assetType: currentData.assetType,
          equipId: currentData.id,
          leadUserId: currentData.leadUserId,
          manufactor: currentData.manufactor
          // useDay: "2024-04-11"，
          // useRang: "08:24-23:59"，
        };
        InstrumentList.value[InstrumentIdx.value] = selectInstrument;
        formatAppLog("log", "at pages/labOperation/instrument/applyInstrument.vue:241", "====", InstrumentList.value);
      }
      const InstrumentIdx = vue.ref(0);
      function InstrumentMateriel(idx) {
        InstrumentIdx.value = idx;
        InstrumentOptions.show = true;
      }
      let uTips = vue.ref(null);
      function getInstrumentList() {
        const params = {
          applyTypes: "1,2,4",
          dropped: 0,
          sort: "asc",
          sidx: "assetName",
          pcPermission: false
        };
        getEquipmentList(params).then((res) => {
          InstrumentOptions.list = res.data.list;
        });
      }
      function addInstrument() {
        let newMaterie = {
          applyType: null,
          assetGrade: null,
          assetModel: null,
          assetName: null,
          assetNo: null,
          assetType: null,
          equipId: null,
          leadUserId: null,
          manufactor: null,
          useDay: null,
          useRang: null
        };
        InstrumentList.value.push(newMaterie);
        uni.showToast({
          title: "新增一条记录",
          icon: "none"
        });
      }
      function removeInstrument(idx) {
        InstrumentList.value = InstrumentList.value.filter((item, index) => index !== idx);
      }
      function addOrUpdateData() {
        dataForm.applyUserId = uni.getStorageSync("userInfo").userId;
        dataForm.organizeId = uni.getStorageSync("userInfo").organizeId;
        dataForm.detailList = InstrumentList.value;
        dataForm.useRang = `${useStarTime.value}-${useOverTime.value}`;
        dataForm.useRangArray.push(useStarTime.value, useOverTime.value);
        dataForm.detailList.forEach((item) => {
          item.useRang = `${useStarTime.value}-${useOverTime.value}`;
          item.useDay = dataForm.useDay;
        });
        addEquipment(dataForm).then((res) => formatAppLog("log", "at pages/labOperation/instrument/applyInstrument.vue:298", "success!"));
      }
      onLoad(() => {
        getInstrumentList();
        getProjectList();
      });
      onReady(() => {
        popup.value.open();
      });
      function goToBack() {
        addVisible.value = false;
        emits("emitVisible", true);
      }
      __expose({
        addVisible,
        dataForm
      });
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_toast = resolveEasycom(vue.resolveDynamicComponent("u-toast"), __easycom_1$1);
        const _component_u_input = resolveEasycom(vue.resolveDynamicComponent("u-input"), __easycom_2$2);
        const _component_u_form_item = resolveEasycom(vue.resolveDynamicComponent("u-form-item"), __easycom_3$1);
        const _component_u_form = resolveEasycom(vue.resolveDynamicComponent("u-form"), __easycom_4$1);
        const _component_u_picker = resolveEasycom(vue.resolveDynamicComponent("u-picker"), __easycom_5$1);
        const _component_u_button = resolveEasycom(vue.resolveDynamicComponent("u-button"), __easycom_6$1);
        const _component_u_top_tips = resolveEasycom(vue.resolveDynamicComponent("u-top-tips"), __easycom_7);
        const _component_u_select = resolveEasycom(vue.resolveDynamicComponent("u-select"), __easycom_8$1);
        return addVisible.value ? (vue.openBlock(), vue.createElementBlock("view", {
          key: 0,
          class: "main-container"
        }, [
          vue.createElementVNode("view", { class: "status_bar" }, [
            vue.createElementVNode("view", { class: "top_view" })
          ]),
          vue.createElementVNode("view", { class: "qc-container" }, [
            vue.createElementVNode("view", {
              class: "nav-bar",
              style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
            }, [
              vue.createVNode(_component_uni_icons, {
                onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                type: "left",
                size: "30",
                style: { "line-height": "44px" }
              }),
              vue.createElementVNode("text", {
                class: "title",
                style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
              }, "采样信息"),
              vue.createElementVNode("text", {
                onClick: _cache[1] || (_cache[1] = ($event) => addOrUpdateData()),
                type: "primary",
                class: "submit",
                style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
              }, "新增")
            ]),
            vue.createVNode(
              _component_u_toast,
              { ref: "uToast" },
              null,
              512
              /* NEED_PATCH */
            ),
            vue.createElementVNode("text", {
              class: "form-title",
              style: { "margin-left": "20px", "font-weight": "bold" }
            }, "基本信息"),
            vue.createVNode(driver),
            vue.createVNode(_component_u_form, {
              model: vue.unref(dataForm),
              ref: "Form",
              style: { "margin": "10px" }
            }, {
              default: vue.withCtx(() => [
                vue.createCommentVNode(` <u-form-item label-width='100px' label="记录编号" prop="startDepth"><u-input  v-model="dataForm.startDepth" /></u-form-item> `),
                vue.createCommentVNode(` 	<u-form-item label-width='100px' label="选择项目" prop="checkTime"><u-input
						v-model="projectOptions.current.label" type="select"
						@click="projectOptions.show=true" /></u-form-item> `),
                vue.createCommentVNode(` <u-form-item label-width='100px' label="土层类型" prop="startTime"><u-input v-model="dataForm.startTime" /></u-form-item> `),
                vue.createCommentVNode(` <u-form-item label-width='100px' label="检查人" prop="checkUserId"><u-input v-model="dataForm.solumColor" /></u-form-item> `),
                vue.createCommentVNode(` 		<u-form-item label-width='100px' label="申请人" prop="weather"><u-input
						v-model="dataForm.weather" /></u-form-item> `),
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "申请日期",
                  prop: "applyTime"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_input, {
                      onClick: _cache[2] || (_cache[2] = ($event) => showPickerDate("applyTime", 0)),
                      modelValue: vue.unref(dataForm).applyTime,
                      "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => vue.unref(dataForm).applyTime = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "使用日期",
                  prop: "applyTime"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_input, {
                      onClick: _cache[4] || (_cache[4] = ($event) => showPickerDate("useDay", 0)),
                      modelValue: vue.unref(dataForm).useDay,
                      "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => vue.unref(dataForm).useDay = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "开始使用时间",
                  prop: "useStarTime"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_input, {
                      onClick: _cache[6] || (_cache[6] = ($event) => showPickerDate("useStarTime", 1)),
                      modelValue: useStarTime.value,
                      "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => useStarTime.value = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "使用结束时间",
                  prop: "useOverTime"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_input, {
                      onClick: _cache[8] || (_cache[8] = ($event) => showPickerDate("useOverTime", 1)),
                      modelValue: useOverTime.value,
                      "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => useOverTime.value = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                }),
                vue.createVNode(_component_u_form_item, {
                  "label-width": "100px",
                  label: "申请事由",
                  prop: "weather"
                }, {
                  default: vue.withCtx(() => [
                    vue.createVNode(_component_u_input, {
                      modelValue: vue.unref(dataForm).weather,
                      "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => vue.unref(dataForm).weather = $event)
                    }, null, 8, ["modelValue"])
                  ]),
                  _: 1
                  /* STABLE */
                })
              ]),
              _: 1
              /* STABLE */
            }, 8, ["model"]),
            vue.createVNode(_component_u_picker, {
              modelValue: selectTimeVisible.value,
              "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => selectTimeVisible.value = $event),
              mode: "time",
              params: timeParams,
              onConfirm: getTime,
              "default-time": vue.unref(getCurrentTime)()
            }, null, 8, ["modelValue", "params", "default-time"]),
            vue.createElementVNode("view", { class: "stock-title" }, [
              vue.createElementVNode("text", {
                class: "form-title",
                style: { "margin-left": "20px", "font-weight": "bold" }
              }, "物料库存"),
              vue.createVNode(_component_u_button, {
                type: "success",
                class: "add-btn",
                size: "mini",
                onClick: addInstrument
              }, {
                default: vue.withCtx(() => [
                  vue.createTextVNode("新增")
                ]),
                _: 1
                /* STABLE */
              })
            ]),
            vue.createVNode(driver),
            (vue.openBlock(true), vue.createElementBlock(
              vue.Fragment,
              null,
              vue.renderList(InstrumentList.value, (item, index) => {
                return vue.openBlock(), vue.createElementBlock("view", { class: "stock-box" }, [
                  vue.createElementVNode("view", { class: "stock-Header" }, [
                    vue.createElementVNode("text", {
                      class: "title",
                      style: { "margin-left": "20px", "font-weight": "bold" }
                    }, "新增一条"),
                    vue.createVNode(_component_u_button, {
                      type: "error",
                      class: "delete-btn",
                      size: "mini",
                      onClick: ($event) => removeInstrument(index)
                    }, {
                      default: vue.withCtx(() => [
                        vue.createTextVNode("删除")
                      ]),
                      _: 2
                      /* DYNAMIC */
                    }, 1032, ["onClick"])
                  ]),
                  vue.createVNode(_component_u_form, {
                    model: InstrumentList.value[index],
                    ref_for: true,
                    ref: "Form",
                    style: { "margin": "10px" }
                  }, {
                    default: vue.withCtx(() => [
                      vue.createVNode(
                        _component_u_form_item,
                        {
                          "label-width": "100px",
                          label: "仪器名称",
                          prop: "assetName"
                        },
                        {
                          default: vue.withCtx(() => [
                            vue.createVNode(_component_u_input, {
                              modelValue: InstrumentList.value[index].assetName,
                              "onUpdate:modelValue": ($event) => InstrumentList.value[index].assetName = $event,
                              type: "select",
                              onClick: ($event) => InstrumentMateriel(index)
                            }, null, 8, ["modelValue", "onUpdate:modelValue", "onClick"])
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1024
                        /* DYNAMIC_SLOTS */
                      ),
                      vue.createVNode(
                        _component_u_form_item,
                        {
                          "label-width": "100px",
                          label: "仪器编号",
                          prop: "assetNo"
                        },
                        {
                          default: vue.withCtx(() => [
                            vue.createVNode(_component_u_input, {
                              modelValue: InstrumentList.value[index].assetNo,
                              "onUpdate:modelValue": ($event) => InstrumentList.value[index].assetNo = $event
                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1024
                        /* DYNAMIC_SLOTS */
                      ),
                      vue.createVNode(
                        _component_u_form_item,
                        {
                          "label-width": "100px",
                          label: "仪器型号",
                          prop: "assetModel"
                        },
                        {
                          default: vue.withCtx(() => [
                            vue.createVNode(_component_u_input, {
                              modelValue: InstrumentList.value[index].assetModel,
                              "onUpdate:modelValue": ($event) => InstrumentList.value[index].assetModel = $event
                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1024
                        /* DYNAMIC_SLOTS */
                      ),
                      vue.createVNode(
                        _component_u_form_item,
                        {
                          "label-width": "100px",
                          label: "仪器分类",
                          prop: "assetType"
                        },
                        {
                          default: vue.withCtx(() => [
                            vue.createVNode(_component_u_input, {
                              modelValue: InstrumentList.value[index].assetType,
                              "onUpdate:modelValue": ($event) => InstrumentList.value[index].assetType = $event
                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1024
                        /* DYNAMIC_SLOTS */
                      ),
                      vue.createVNode(
                        _component_u_form_item,
                        {
                          "label-width": "100px",
                          label: "仪器厂家",
                          prop: "manufactor"
                        },
                        {
                          default: vue.withCtx(() => [
                            vue.createVNode(_component_u_input, {
                              modelValue: InstrumentList.value[index].manufactor,
                              "onUpdate:modelValue": ($event) => InstrumentList.value[index].manufactor = $event
                            }, null, 8, ["modelValue", "onUpdate:modelValue"])
                          ]),
                          _: 2
                          /* DYNAMIC */
                        },
                        1024
                        /* DYNAMIC_SLOTS */
                      )
                    ]),
                    _: 2
                    /* DYNAMIC */
                  }, 1032, ["model"])
                ]);
              }),
              256
              /* UNKEYED_FRAGMENT */
            )),
            vue.createVNode(
              _component_u_top_tips,
              {
                ref_key: "uTips",
                ref: uTips
              },
              null,
              512
              /* NEED_PATCH */
            ),
            vue.createVNode(_component_u_select, {
              modelValue: projectOptions.show,
              "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => projectOptions.show = $event),
              "value-name": "id",
              "label-name": "name",
              list: projectOptions.list,
              onConfirm: onProjectOptions
            }, null, 8, ["modelValue", "list"]),
            vue.createVNode(_component_u_select, {
              modelValue: InstrumentOptions.show,
              "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => InstrumentOptions.show = $event),
              "value-name": "id",
              "label-name": "assetName",
              list: InstrumentOptions.list,
              onConfirm: onInstrument
            }, null, 8, ["modelValue", "list"])
          ])
        ])) : vue.createCommentVNode("v-if", true);
      };
    }
  };
  const applyInstrument = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["__scopeId", "data-v-9d753f7c"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/labOperation/instrument/applyInstrument.vue"]]);
  const _sfc_main$3 = {
    __name: "index",
    setup(__props) {
      function swipeClick(e, ctx, id) {
        uni.showModal({
          title: "提示",
          content: "您确定要删除此项吗？",
          success: (res) => {
            if (res.confirm) {
              delProjectDetail(id).then((res2) => {
                getMenuList2();
              });
              uni.showToast({
                title: "移除成功",
                icon: "none"
              });
            }
          }
        });
      }
      const tableData = vue.ref([]);
      const searchKeyWord = vue.ref();
      async function getMenuList2() {
        const menuId = getMenuId$1("仪器使用");
        let queryData = {
          currentPage: 1,
          applyType: ["Rec"],
          domain: "equip",
          sort: "asc",
          sidx: "applyCode",
          menuId,
          applyCode: searchKeyWord.value
        };
        getApplyEquipmentList(queryData).then((res) => {
          tableData.value = res.data.list;
          formatAppLog("log", "at pages/labOperation/instrument/index.vue:103", tableData.value);
        });
      }
      function goToBack() {
        uni.navigateBack({ delta: 1 });
      }
      const addRef = vue.ref(null);
      const mainVisible = vue.ref(true);
      function goToAdd() {
        addRef.value.addVisible = true;
        mainVisible.value = false;
      }
      onLoad(() => {
        getMenuList2();
        formatAppLog("log", "at pages/labOperation/instrument/index.vue:118", searchId("484709504437452997"));
      });
      onPullDownRefresh(async () => {
        await getMenuList2();
        uni.stopPullDownRefresh();
      });
      return (_ctx, _cache) => {
        const _component_uni_icons = resolveEasycom(vue.resolveDynamicComponent("uni-icons"), __easycom_0$5);
        const _component_u_search = resolveEasycom(vue.resolveDynamicComponent("u-search"), __easycom_1$7);
        const _component_uni_swipe_action_item = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action-item"), __easycom_2$3);
        const _component_uni_swipe_action = resolveEasycom(vue.resolveDynamicComponent("uni-swipe-action"), __easycom_3$2);
        const _component_u_empty = resolveEasycom(vue.resolveDynamicComponent("u-empty"), __easycom_4$2);
        return vue.openBlock(), vue.createElementBlock(
          vue.Fragment,
          null,
          [
            mainVisible.value ? (vue.openBlock(), vue.createElementBlock("view", {
              key: 0,
              class: "main-container"
            }, [
              vue.createElementVNode("view", { class: "status_bar" }, [
                vue.createElementVNode("view", { class: "top_view" })
              ]),
              vue.createElementVNode("view", { class: "m-container" }, [
                vue.createElementVNode("view", {
                  class: "nav-bar",
                  style: { "position": "relative", "box-sizing": "border-box", "width": "100vw", "height": "44px" }
                }, [
                  vue.createVNode(_component_uni_icons, {
                    onClick: _cache[0] || (_cache[0] = ($event) => goToBack()),
                    type: "left",
                    size: "30",
                    style: { "line-height": "44px" }
                  }),
                  vue.createElementVNode("text", {
                    class: "title",
                    style: { "font-size": "16px", "position": "absolute", "left": "50%", "top": "50%", "transform": "translate(-50%,-50%)" }
                  }, "仪器使用记录"),
                  vue.createElementVNode("text", {
                    onClick: _cache[1] || (_cache[1] = ($event) => goToAdd()),
                    type: "primary",
                    class: "submit",
                    style: { "color": "blue", "line-height": "44px", "margin-right": "10px", "float": "right" }
                  }, "新增")
                ]),
                vue.createElementVNode("view", { class: "search-box" }, [
                  vue.createVNode(_component_u_search, {
                    placeholder: "搜索申请单号",
                    modelValue: searchKeyWord.value,
                    "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => searchKeyWord.value = $event),
                    onSearch: _cache[3] || (_cache[3] = ($event) => getMenuList2())
                  }, null, 8, ["modelValue"])
                ]),
                vue.createElementVNode("view", { class: "content-box" }, [
                  tableData.value.length ? (vue.openBlock(), vue.createBlock(
                    _component_uni_swipe_action,
                    {
                      key: 0,
                      ref: "swipeAction"
                    },
                    {
                      default: vue.withCtx(() => [
                        (vue.openBlock(true), vue.createElementBlock(
                          vue.Fragment,
                          null,
                          vue.renderList(tableData.value, (item) => {
                            return vue.openBlock(), vue.createBlock(_component_uni_swipe_action_item, {
                              class: "swipe-item items-box",
                              key: item.id,
                              "right-options": _ctx.swiperOptions,
                              onChange: _cache[4] || (_cache[4] = ($event) => _ctx.swipeChange($event)),
                              onClick: ($event) => swipeClick($event, _ctx.content, item.id)
                            }, {
                              default: vue.withCtx(() => [
                                vue.createElementVNode("view", { class: "item-box" }, [
                                  vue.createElementVNode("view", { class: "left-item" }, [
                                    vue.createElementVNode(
                                      "view",
                                      { class: "title" },
                                      "申请单号：" + vue.toDisplayString(item.applyCode),
                                      1
                                      /* TEXT */
                                    ),
                                    vue.createElementVNode("view", { class: "center-zone" }, [
                                      vue.createElementVNode(
                                        "text",
                                        { class: "area" },
                                        "申请人：" + vue.toDisplayString(item.applyUserName),
                                        1
                                        /* TEXT */
                                      ),
                                      vue.createElementVNode(
                                        "text",
                                        { class: "project" },
                                        vue.toDisplayString(item.typetext),
                                        1
                                        /* TEXT */
                                      )
                                    ]),
                                    vue.createElementVNode(
                                      "text",
                                      { class: "time" },
                                      "申请时间：" + vue.toDisplayString(item.applyTime),
                                      1
                                      /* TEXT */
                                    )
                                  ]),
                                  vue.createCommentVNode(' 	<view class="right-box">\n								<img style="width: 30px;" src="@/static/tabbar-icons/feeds.png" alt="" />\n								<img style="width: 30px;" src="@/static/tabbar-icons/feeds.png" alt="" />\n								<img style="width: 30px;" src="@/static/tabbar-icons/feeds.png" alt="" />\n								<img style="width: 30px;" src="@/static/tabbar-icons/feeds.png" alt="" />\n							</view> ')
                                ])
                              ]),
                              _: 2
                              /* DYNAMIC */
                            }, 1032, ["right-options", "onClick"]);
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))
                      ]),
                      _: 1
                      /* STABLE */
                    },
                    512
                    /* NEED_PATCH */
                  )) : (vue.openBlock(), vue.createBlock(_component_u_empty, {
                    key: 1,
                    style: { "margin-top": "40px" },
                    text: "暂无数据",
                    mode: "list"
                  }))
                ])
              ])
            ])) : vue.createCommentVNode("v-if", true),
            vue.createVNode(
              applyInstrument,
              {
                ref_key: "addRef",
                ref: addRef,
                onEmitVisible: _cache[5] || (_cache[5] = (val) => mainVisible.value = val)
              },
              null,
              512
              /* NEED_PATCH */
            )
          ],
          64
          /* STABLE_FRAGMENT */
        );
      };
    }
  };
  const PagesLabOperationInstrumentIndex = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["__scopeId", "data-v-f6c2cf4f"], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/labOperation/instrument/index.vue"]]);
  const _sfc_main$2 = {};
  function _sfc_render(_ctx, _cache) {
    return null;
  }
  const PagesLabOperationGuardIndex = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render], ["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/labOperation/guard/index.vue"]]);
  function getMessageList(data) {
    return request({
      url: `/api/message`,
      method: "GET",
      data
    });
  }
  const _sfc_main$1 = {
    __name: "index",
    setup(__props) {
      const dataList2 = vue.ref([]);
      function getInfo() {
        let _query = {
          currentPage: 1,
          pageSize: 20,
          sort: desc,
          keyword: "",
          type: ""
        };
        getMessageList(_query).then((res) => {
          dataList2.value = res.data.list;
        });
      }
      onLoad(() => {
        getInfo();
      });
      return (_ctx, _cache) => {
        return vue.openBlock(), vue.createElementBlock("view", { class: "ms-container" });
      };
    }
  };
  const PagesMeMessageIndex = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/pages/me/message/index.vue"]]);
  __definePage("pages/sampleDetection/index", PagesSampleDetectionIndex);
  __definePage("pages/login/index", PagesLoginIndex);
  __definePage("pages/labOperation/index", PagesLabOperationIndex);
  __definePage("pages/me/index", PagesMeIndex);
  __definePage("pages/sampleDetection/detail/index", PagesSampleDetectionDetailIndex);
  __definePage("pages/sampleDetection/sampling/index", PagesSampleDetectionSamplingIndex);
  __definePage("pages/sampleDetection/qualityControl/index", PagesSampleDetectionQualityControlIndex);
  __definePage("pages/sampleDetection/sendSample/index", PagesSampleDetectionSendSampleIndex);
  __definePage("pages/sampleDetection/receiveSample/index", PagesSampleDetectionReceiveSampleIndex);
  __definePage("pages/sampleDetection/sampling/monitorPoint/addOrEditor", PagesSampleDetectionSamplingMonitorPointAddOrEditor);
  __definePage("pages/sampleDetection/sampling/qualitySample/addOrEditor", PagesSampleDetectionSamplingQualitySampleAddOrEditor);
  __definePage("pages/sampleDetection/sampling/pageMonitoringPoint/index", PagesSampleDetectionSamplingPageMonitoringPointIndex);
  __definePage("pages/sampleDetection/sampling/pageMonitoringPoint/holeRecord/addOrEditor", PagesSampleDetectionSamplingPageMonitoringPointHoleRecordAddOrEditor);
  __definePage("pages/sampleDetection/sampling/pageMonitoringPoint/soilSample/addOrEditor", PagesSampleDetectionSamplingPageMonitoringPointSoilSampleAddOrEditor);
  __definePage("pages/sampleDetection/sampling/pageMonitoringPoint/wellBase/addOrEditor", PagesSampleDetectionSamplingPageMonitoringPointWellBaseAddOrEditor);
  __definePage("pages/sampleDetection/sampling/pageMonitoringPoint/wellWashRecord/addOrEditor", PagesSampleDetectionSamplingPageMonitoringPointWellWashRecordAddOrEditor);
  __definePage("pages/sampleDetection/sampling/pageMonitoringPoint/waterSample/addOrEditor", PagesSampleDetectionSamplingPageMonitoringPointWaterSampleAddOrEditor);
  __definePage("pages/labOperation/materiel/index", PagesLabOperationMaterielIndex);
  __definePage("pages/labOperation/instrument/index", PagesLabOperationInstrumentIndex);
  __definePage("pages/labOperation/guard/index", PagesLabOperationGuardIndex);
  __definePage("pages/me/message/index", PagesMeMessageIndex);
  const _sfc_main = {
    __name: "App",
    setup(__props) {
      onLaunch(() => {
        let token = uni.getStorageSync("token");
        if (token) {
          plus.navigator.closeSplashscreen();
        } else {
          uni.reLaunch({
            url: "/pages/login/index",
            success: () => {
              plus.navigator.closeSplashscreen();
            }
          });
        }
      });
      return () => {
      };
    }
  };
  const App = /* @__PURE__ */ _export_sfc(_sfc_main, [["__file", "/Users/lemon/Documents/HBuilderProjects/cityk-app/App.vue"]]);
  const mixin = {
    data() {
      return {};
    },
    onLoad() {
      this.$u.getRect = this.$uGetRect;
    },
    methods: {
      // 查询节点信息
      // 目前此方法在支付宝小程序中无法获取组件跟接点的尺寸，为支付宝的bug(2020-07-21)
      // 解决办法为在组件根部再套一个没有任何作用的view元素
      $uGetRect(selector, all) {
        return new Promise((resolve) => {
          uni.createSelectorQuery().in(this)[all ? "selectAll" : "select"](selector).boundingClientRect((rect) => {
            if (all && Array.isArray(rect) && rect.length) {
              resolve(rect);
            }
            if (!all && rect) {
              resolve(rect);
            }
          }).exec();
        });
      },
      getParentData(parentName = "") {
        if (!this.parent)
          this.parent = false;
        this.parent = this.$u.$parent.call(this, parentName);
        if (this.parent) {
          Object.keys(this.parentData).map((key) => {
            this.parentData[key] = this.parent[key];
          });
          this.parentData.value = this.parent.modelValue;
        }
      },
      // 阻止事件冒泡
      preventEvent(e) {
        e && e.stopPropagation && e.stopPropagation();
      }
    },
    onReachBottom() {
      uni.$emit("uOnReachBottom");
    },
    beforeUnmount() {
      if (this.parent && uni.$u.test.array(this.parent.children)) {
        const childrenList = this.parent.children;
        childrenList.map((child, index) => {
          if (child === this) {
            childrenList.splice(index, 1);
          }
        });
      }
    }
  };
  function isArray(arr) {
    return Object.prototype.toString.call(arr) === "[object Array]";
  }
  function deepClone(obj) {
    if ([null, void 0, NaN, false].includes(obj))
      return obj;
    if (typeof obj !== "object" && typeof obj !== "function") {
      return obj;
    }
    var o = isArray(obj) ? [] : {};
    for (let i in obj) {
      if (obj.hasOwnProperty(i)) {
        o[i] = typeof obj[i] === "object" ? deepClone(obj[i]) : obj[i];
      }
    }
    return o;
  }
  function deepMerge(target = {}, source = {}) {
    target = deepClone(target);
    if (typeof target !== "object" || typeof source !== "object")
      return false;
    for (var prop in source) {
      if (!source.hasOwnProperty(prop))
        continue;
      if (prop in target) {
        if (typeof target[prop] !== "object") {
          target[prop] = source[prop];
        } else {
          if (typeof source[prop] !== "object") {
            target[prop] = source[prop];
          } else {
            if (target[prop].concat && source[prop].concat) {
              target[prop] = target[prop].concat(source[prop]);
            } else {
              target[prop] = deepMerge(target[prop], source[prop]);
            }
          }
        }
      } else {
        target[prop] = source[prop];
      }
    }
    return target;
  }
  function email(value) {
    return /^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/.test(value);
  }
  function mobile(value) {
    return /^1[23456789]\d{9}$/.test(value);
  }
  function url(value) {
    return /http(s)?:\/\/([\w-]+\.)+[\w-]+(\/[\w-.\/?%&=]*)?/.test(value);
  }
  function date(value) {
    return !/Invalid|NaN/.test(new Date(value).toString());
  }
  function dateISO(value) {
    return /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(value);
  }
  function number(value) {
    return /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
  }
  function digits(value) {
    return /^\d+$/.test(value);
  }
  function idCard(value) {
    return /^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$/.test(
      value
    );
  }
  function carNo(value) {
    const xreg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}(([0-9]{5}[DF]$)|([DF][A-HJ-NP-Z0-9][0-9]{4}$))/;
    const creg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9挂学警港澳]{1}$/;
    if (value.length === 7) {
      return creg.test(value);
    } else if (value.length === 8) {
      return xreg.test(value);
    } else {
      return false;
    }
  }
  function amount(value) {
    return /^[1-9]\d*(,\d{3})*(\.\d{1,2})?$|^0\.\d{1,2}$/.test(value);
  }
  function chinese(value) {
    let reg = /^[\u4e00-\u9fa5]+$/gi;
    return reg.test(value);
  }
  function letter(value) {
    return /^[a-zA-Z]*$/.test(value);
  }
  function enOrNum(value) {
    let reg = /^[0-9a-zA-Z]*$/g;
    return reg.test(value);
  }
  function contains(value, param) {
    return value.indexOf(param) >= 0;
  }
  function range(value, param) {
    return value >= param[0] && value <= param[1];
  }
  function rangeLength(value, param) {
    return value.length >= param[0] && value.length <= param[1];
  }
  function landline(value) {
    let reg = /^\d{3,4}-\d{7,8}(-\d{3,4})?$/;
    return reg.test(value);
  }
  function empty(value) {
    switch (typeof value) {
      case "undefined":
        return true;
      case "string":
        if (value.replace(/(^[ \t\n\r]*)|([ \t\n\r]*$)/g, "").length == 0)
          return true;
        break;
      case "boolean":
        if (!value)
          return true;
        break;
      case "number":
        if (0 === value || isNaN(value))
          return true;
        break;
      case "object":
        if (null === value || value.length === 0)
          return true;
        for (var i in value) {
          return false;
        }
        return true;
    }
    return false;
  }
  function jsonString(value) {
    if (typeof value == "string") {
      try {
        var obj = JSON.parse(value);
        if (typeof obj == "object" && obj) {
          return true;
        } else {
          return false;
        }
      } catch (e) {
        return false;
      }
    }
    return false;
  }
  function array(value) {
    if (typeof Array.isArray === "function") {
      return Array.isArray(value);
    } else {
      return Object.prototype.toString.call(value) === "[object Array]";
    }
  }
  function object(value) {
    return Object.prototype.toString.call(value) === "[object Object]";
  }
  function code(value, len = 6) {
    return new RegExp(`^\\d{${len}}$`).test(value);
  }
  function func(value) {
    return typeof value === "function";
  }
  function promise(value) {
    return object(value) && func(value.then) && func(value.catch);
  }
  function image(value) {
    const newValue = value.split("?")[0];
    return new RegExp(/\.(jpeg|jpg|gif|png|svg|webp|jfif|bmp|dpg)$/).test(newValue);
  }
  function video(value) {
    const newValue = value.split("?")[0];
    return new RegExp(/\.(mp4|mpg|mpeg|dat|asf|avi|rm|rmvb|mov|wmv|flv|mkv|m3u8|3gp)$/).test(newValue);
  }
  function regExp(o) {
    return o && Object.prototype.toString.call(o) === "[object RegExp]";
  }
  function string(value) {
    return typeof value === "string";
  }
  const test = {
    email,
    mobile,
    url,
    date,
    dateISO,
    number,
    digits,
    idCard,
    carNo,
    amount,
    chinese,
    letter,
    enOrNum,
    contains,
    range,
    rangeLength,
    empty,
    isEmpty: empty,
    jsonString,
    landline,
    object,
    array,
    code,
    func,
    promise,
    video,
    image,
    regExp,
    string
  };
  class Request {
    // 设置全局默认配置
    setConfig(customConfig) {
      this.config = deepMerge(this.config, customConfig);
    }
    // 主要请求部分
    request(options = {}) {
      if (this.interceptor.request && typeof this.interceptor.request === "function") {
        let interceptorRequest = this.interceptor.request(options);
        if (interceptorRequest === false) {
          return new Promise(() => {
          });
        }
        this.options = interceptorRequest;
      }
      options.dataType = options.dataType || this.config.dataType;
      options.responseType = options.responseType || this.config.responseType;
      options.url = options.url || "";
      options.params = options.params || {};
      options.header = Object.assign({}, this.config.header, options.header);
      options.method = options.method || this.config.method;
      return new Promise((resolve, reject) => {
        options.complete = (response) => {
          uni.hideLoading();
          clearTimeout(this.config.timer);
          this.config.timer = null;
          if (this.config.originalData) {
            if (this.interceptor.response && typeof this.interceptor.response === "function") {
              let resInterceptors = this.interceptor.response(response);
              if (resInterceptors !== false) {
                resolve(resInterceptors);
              } else {
                reject(response);
              }
            } else {
              resolve(response);
            }
          } else {
            if (response.statusCode == 200) {
              if (this.interceptor.response && typeof this.interceptor.response === "function") {
                let resInterceptors = this.interceptor.response(response.data);
                if (resInterceptors !== false) {
                  resolve(resInterceptors);
                } else {
                  reject(response.data);
                }
              } else {
                resolve(response.data);
              }
            } else {
              reject(response);
            }
          }
        };
        options.url = test.url(options.url) ? options.url : this.config.baseUrl + (options.url.indexOf("/") == 0 ? options.url : "/" + options.url);
        if (this.config.showLoading && !this.config.timer) {
          this.config.timer = setTimeout(() => {
            uni.showLoading({
              title: this.config.loadingText,
              mask: this.config.loadingMask
            });
            this.config.timer = null;
          }, this.config.loadingTime);
        }
        uni.request(options);
      });
    }
    constructor() {
      this.config = {
        baseUrl: "",
        // 请求的根域名
        // 默认的请求头
        header: {},
        method: "POST",
        // 设置为json，返回后uni.request会对数据进行一次JSON.parse
        dataType: "json",
        // 此参数无需处理，因为5+和支付宝小程序不支持，默认为text即可
        responseType: "text",
        showLoading: true,
        // 是否显示请求中的loading
        loadingText: "请求中...",
        loadingTime: 800,
        // 在此时间内，请求还没回来的话，就显示加载中动画，单位ms
        timer: null,
        // 定时器
        originalData: false,
        // 是否在拦截器中返回服务端的原始数据，见文档说明
        loadingMask: true
        // 展示loading的时候，是否给一个透明的蒙层，防止触摸穿透
      };
      this.interceptor = {
        // 请求前的拦截
        request: null,
        // 请求后的拦截
        response: null
      };
      this.get = (url2, data = {}, header = {}) => {
        return this.request({
          method: "GET",
          url: url2,
          header,
          data
        });
      };
      this.post = (url2, data = {}, header = {}) => {
        return this.request({
          url: url2,
          method: "POST",
          header,
          data
        });
      };
      this.put = (url2, data = {}, header = {}) => {
        return this.request({
          url: url2,
          method: "PUT",
          header,
          data
        });
      };
      this.delete = (url2, data = {}, header = {}) => {
        return this.request({
          url: url2,
          method: "DELETE",
          header,
          data
        });
      };
    }
  }
  const http = new Request();
  function queryParams(data = {}, isPrefix = true, arrayFormat = "brackets") {
    let prefix = isPrefix ? "?" : "";
    let _result = [];
    if (["indices", "brackets", "repeat", "comma"].indexOf(arrayFormat) == -1)
      arrayFormat = "brackets";
    for (let key in data) {
      let value = data[key];
      if (["", void 0, null].indexOf(value) >= 0) {
        continue;
      }
      if (value.constructor === Array) {
        switch (arrayFormat) {
          case "indices":
            for (let i = 0; i < value.length; i++) {
              _result.push(key + "[" + i + "]=" + value[i]);
            }
            break;
          case "brackets":
            value.forEach((_value) => {
              _result.push(key + "[]=" + _value);
            });
            break;
          case "repeat":
            value.forEach((_value) => {
              _result.push(key + "=" + _value);
            });
            break;
          case "comma":
            let commaStr = "";
            value.forEach((_value) => {
              commaStr += (commaStr ? "," : "") + _value;
            });
            _result.push(key + "=" + commaStr);
            break;
          default:
            value.forEach((_value) => {
              _result.push(key + "[]=" + _value);
            });
        }
      } else {
        _result.push(key + "=" + value);
      }
    }
    return _result.length ? prefix + _result.join("&") : "";
  }
  class Router {
    constructor() {
      this.config = {
        type: "navigateTo",
        url: "",
        delta: 1,
        // navigateBack页面后退时,回退的层数
        params: {},
        // 传递的参数
        animationType: "pop-in",
        // 窗口动画,只在APP有效
        animationDuration: 300,
        // 窗口动画持续时间,单位毫秒,只在APP有效
        intercept: false
        // 是否需要拦截
      };
      this.route = this.route.bind(this);
    }
    // 判断url前面是否有"/"，如果没有则加上，否则无法跳转
    addRootPath(url2) {
      return url2[0] === "/" ? url2 : `/${url2}`;
    }
    // 整合路由参数
    mixinParam(url2, params) {
      url2 = url2 && this.addRootPath(url2);
      let query = "";
      if (/.*\/.*\?.*=.*/.test(url2)) {
        query = uni.$u.queryParams(params, false);
        return url2 += "&" + query;
      } else {
        query = uni.$u.queryParams(params);
        return url2 += query;
      }
    }
    // 对外的方法名称
    async route(options = {}, params = {}) {
      let mergeConfig = {};
      if (typeof options === "string") {
        mergeConfig.url = this.mixinParam(options, params);
        mergeConfig.type = "navigateTo";
      } else {
        mergeConfig = uni.$u.deepClone(options, this.config);
        mergeConfig.url = this.mixinParam(options.url, options.params);
      }
      if (params.intercept) {
        this.config.intercept = params.intercept;
      }
      mergeConfig.params = params;
      mergeConfig = uni.$u.deepMerge(this.config, mergeConfig);
      if (typeof uni.$u.routeIntercept === "function") {
        const isNext = await new Promise((resolve, reject) => {
          uni.$u.routeIntercept(mergeConfig, resolve);
        });
        isNext && this.openPage(mergeConfig);
      } else {
        this.openPage(mergeConfig);
      }
    }
    // 执行路由跳转
    openPage(config2) {
      const {
        url: url2,
        type: type2,
        delta,
        animationType,
        animationDuration
      } = config2;
      if (config2.type == "navigateTo" || config2.type == "to") {
        uni.navigateTo({
          url: url2,
          animationType,
          animationDuration
        });
      }
      if (config2.type == "redirectTo" || config2.type == "redirect") {
        uni.redirectTo({
          url: url2
        });
      }
      if (config2.type == "switchTab" || config2.type == "tab") {
        uni.switchTab({
          url: url2
        });
      }
      if (config2.type == "reLaunch" || config2.type == "launch") {
        uni.reLaunch({
          url: url2
        });
      }
      if (config2.type == "navigateBack" || config2.type == "back") {
        uni.navigateBack({
          delta
        });
      }
    }
  }
  const route = new Router().route;
  if (!String.prototype.padStart) {
    String.prototype.padStart = function(maxLength, fillString = " ") {
      if (Object.prototype.toString.call(fillString) !== "[object String]")
        throw new TypeError(
          "fillString must be String"
        );
      let str = this;
      if (str.length >= maxLength)
        return String(str);
      let fillLength = maxLength - str.length, times = Math.ceil(fillLength / fillString.length);
      while (times >>= 1) {
        fillString += fillString;
        if (times === 1) {
          fillString += fillString;
        }
      }
      return fillString.slice(0, fillLength) + str;
    };
  }
  function timeFormat(dateTime = null, fmt = "yyyy-mm-dd") {
    if (!dateTime)
      dateTime = Number(/* @__PURE__ */ new Date());
    if (dateTime.toString().length == 10)
      dateTime *= 1e3;
    let date2 = new Date(dateTime);
    let ret;
    let opt = {
      "y+": date2.getFullYear().toString(),
      // 年
      "m+": (date2.getMonth() + 1).toString(),
      // 月
      "d+": date2.getDate().toString(),
      // 日
      "h+": date2.getHours().toString(),
      // 时
      "M+": date2.getMinutes().toString(),
      // 分
      "s+": date2.getSeconds().toString()
      // 秒
      // 有其他格式化字符需求可以继续添加，必须转化成字符串
    };
    for (let k in opt) {
      ret = new RegExp("(" + k + ")").exec(fmt);
      if (ret) {
        fmt = fmt.replace(ret[1], ret[1].length == 1 ? opt[k] : opt[k].padStart(ret[1].length, "0"));
      }
    }
    return fmt;
  }
  function timeFrom(dateTime = null, format2 = "yyyy-mm-dd") {
    if (!dateTime)
      dateTime = Number(/* @__PURE__ */ new Date());
    if (dateTime.toString().length == 10)
      dateTime *= 1e3;
    let timestamp = +new Date(Number(dateTime));
    let timer = (Number(/* @__PURE__ */ new Date()) - timestamp) / 1e3;
    let tips = "";
    switch (true) {
      case timer < 300:
        tips = "刚刚";
        break;
      case (timer >= 300 && timer < 3600):
        tips = parseInt(timer / 60) + "分钟前";
        break;
      case (timer >= 3600 && timer < 86400):
        tips = parseInt(timer / 3600) + "小时前";
        break;
      case (timer >= 86400 && timer < 2592e3):
        tips = parseInt(timer / 86400) + "天前";
        break;
      default:
        if (format2 === false) {
          if (timer >= 2592e3 && timer < 365 * 86400) {
            tips = parseInt(timer / (86400 * 30)) + "个月前";
          } else {
            tips = parseInt(timer / (86400 * 365)) + "年前";
          }
        } else {
          tips = timeFormat(timestamp, format2);
        }
    }
    return tips;
  }
  function colorGradient(startColor = "rgb(0, 0, 0)", endColor = "rgb(255, 255, 255)", step = 10) {
    let startRGB = hexToRgb(startColor, false);
    let startR = startRGB[0];
    let startG = startRGB[1];
    let startB = startRGB[2];
    let endRGB = hexToRgb(endColor, false);
    let endR = endRGB[0];
    let endG = endRGB[1];
    let endB = endRGB[2];
    let sR = (endR - startR) / step;
    let sG = (endG - startG) / step;
    let sB = (endB - startB) / step;
    let colorArr = [];
    for (let i = 0; i < step; i++) {
      let hex = rgbToHex("rgb(" + Math.round(sR * i + startR) + "," + Math.round(sG * i + startG) + "," + Math.round(sB * i + startB) + ")");
      colorArr.push(hex);
    }
    return colorArr;
  }
  function hexToRgb(sColor, str = true) {
    let reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
    sColor = sColor.toLowerCase();
    if (sColor && reg.test(sColor)) {
      if (sColor.length === 4) {
        let sColorNew = "#";
        for (let i = 1; i < 4; i += 1) {
          sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));
        }
        sColor = sColorNew;
      }
      let sColorChange = [];
      for (let i = 1; i < 7; i += 2) {
        sColorChange.push(parseInt("0x" + sColor.slice(i, i + 2)));
      }
      if (!str) {
        return sColorChange;
      } else {
        return `rgb(${sColorChange[0]},${sColorChange[1]},${sColorChange[2]})`;
      }
    } else if (/^(rgb|RGB)/.test(sColor)) {
      let arr = sColor.replace(/(?:\(|\)|rgb|RGB)*/g, "").split(",");
      return arr.map((val) => Number(val));
    } else {
      return sColor;
    }
  }
  function rgbToHex(rgb) {
    let _this = rgb;
    let reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
    if (/^(rgb|RGB)/.test(_this)) {
      let aColor = _this.replace(/(?:\(|\)|rgb|RGB)*/g, "").split(",");
      let strHex = "#";
      for (let i = 0; i < aColor.length; i++) {
        let hex = Number(aColor[i]).toString(16);
        hex = String(hex).length == 1 ? "0" + hex : hex;
        if (hex === "0") {
          hex += hex;
        }
        strHex += hex;
      }
      if (strHex.length !== 7) {
        strHex = _this;
      }
      return strHex;
    } else if (reg.test(_this)) {
      let aNum = _this.replace(/#/, "").split("");
      if (aNum.length === 6) {
        return _this;
      } else if (aNum.length === 3) {
        let numHex = "#";
        for (let i = 0; i < aNum.length; i += 1) {
          numHex += aNum[i] + aNum[i];
        }
        return numHex;
      }
    } else {
      return _this;
    }
  }
  function colorToRgba(color2, alpha = 0.3) {
    color2 = rgbToHex(color2);
    var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
    let sColor = color2.toLowerCase();
    if (sColor && reg.test(sColor)) {
      if (sColor.length === 4) {
        var sColorNew = "#";
        for (let i = 1; i < 4; i += 1) {
          sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1));
        }
        sColor = sColorNew;
      }
      var sColorChange = [];
      for (let i = 1; i < 7; i += 2) {
        sColorChange.push(parseInt("0x" + sColor.slice(i, i + 2)));
      }
      return "rgba(" + sColorChange.join(",") + "," + alpha + ")";
    } else {
      return sColor;
    }
  }
  const colorGradient$1 = {
    colorGradient,
    hexToRgb,
    rgbToHex,
    colorToRgba
  };
  function guid(len = 32, firstU = true, radix = null) {
    let chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split("");
    let uuid = [];
    radix = radix || chars.length;
    if (len) {
      for (let i = 0; i < len; i++)
        uuid[i] = chars[0 | Math.random() * radix];
    } else {
      let r;
      uuid[8] = uuid[13] = uuid[18] = uuid[23] = "-";
      uuid[14] = "4";
      for (let i = 0; i < 36; i++) {
        if (!uuid[i]) {
          r = 0 | Math.random() * 16;
          uuid[i] = chars[i == 19 ? r & 3 | 8 : r];
        }
      }
    }
    if (firstU) {
      uuid.shift();
      return "u" + uuid.join("");
    } else {
      return uuid.join("");
    }
  }
  let color = {
    primary: "#2979ff",
    primaryDark: "#2b85e4",
    primaryDisabled: "#a0cfff",
    primaryLight: "#ecf5ff",
    bgColor: "#f3f4f6",
    info: "#909399",
    infoDark: "#82848a",
    infoDisabled: "#c8c9cc",
    infoLight: "#f4f4f5",
    warning: "#ff9900",
    warningDark: "#f29100",
    warningDisabled: "#fcbd71",
    warningLight: "#fdf6ec",
    error: "#fa3534",
    errorDark: "#dd6161",
    errorDisabled: "#fab6b6",
    errorLight: "#fef0f0",
    success: "#19be6b",
    successDark: "#18b566",
    successDisabled: "#71d5a1",
    successLight: "#dbf1e1",
    mainColor: "#303133",
    contentColor: "#606266",
    tipsColor: "#909399",
    lightColor: "#c0c4cc",
    borderColor: "#e4e7ed"
  };
  function type2icon(type2 = "success", fill = false) {
    if (["primary", "info", "error", "warning", "success"].indexOf(type2) == -1)
      type2 = "success";
    let iconName = "";
    switch (type2) {
      case "primary":
        iconName = "info-circle";
        break;
      case "info":
        iconName = "info-circle";
        break;
      case "error":
        iconName = "close-circle";
        break;
      case "warning":
        iconName = "error-circle";
        break;
      case "success":
        iconName = "checkmark-circle";
        break;
      default:
        iconName = "checkmark-circle";
    }
    if (fill)
      iconName += "-fill";
    return iconName;
  }
  function randomArray(array2 = []) {
    return array2.sort(() => Math.random() - 0.5);
  }
  function addUnit(value = "auto", unit = "rpx") {
    value = String(value);
    return test.number(value) ? `${value}${unit}` : value;
  }
  function random(min, max) {
    if (min >= 0 && max > 0 && max >= min) {
      let gab = max - min + 1;
      return Math.floor(Math.random() * gab + min);
    } else {
      return 0;
    }
  }
  function trim$1(str, pos = "both") {
    if (pos == "both") {
      return str.replace(/^\s+|\s+$/g, "");
    } else if (pos == "left") {
      return str.replace(/^\s*/, "");
    } else if (pos == "right") {
      return str.replace(/(\s*$)/g, "");
    } else if (pos == "all") {
      return str.replace(/\s+/g, "");
    } else {
      return str;
    }
  }
  function toast(title, duration = 1500) {
    uni.showToast({
      title,
      icon: "none",
      duration
    });
  }
  function getParent(name, keys) {
    let parent = this.$parent;
    while (parent) {
      if (parent.$options.name !== name) {
        parent = parent.$parent;
      } else {
        let data = {};
        if (Array.isArray(keys)) {
          keys.map((val) => {
            data[val] = parent[val] ? parent[val] : "";
          });
        } else {
          for (let i in keys) {
            if (Array.isArray(keys[i])) {
              if (keys[i].length) {
                data[i] = keys[i];
              } else {
                data[i] = parent[i];
              }
            } else if (keys[i].constructor === Object) {
              if (Object.keys(keys[i]).length) {
                data[i] = keys[i];
              } else {
                data[i] = parent[i];
              }
            } else {
              data[i] = keys[i] || keys[i] === false ? keys[i] : parent[i];
            }
          }
        }
        return data;
      }
    }
    return {};
  }
  function $parent(name = void 0) {
    let parent = this.$parent;
    while (parent) {
      if (parent.$options && parent.$options.name !== name) {
        parent = parent.$parent;
      } else {
        return parent;
      }
    }
    return false;
  }
  function os() {
    return uni.getSystemInfoSync().platform;
  }
  function sys() {
    return uni.getSystemInfoSync();
  }
  let timeout = null;
  function debounce(func2, wait = 500, immediate = false) {
    if (timeout !== null)
      clearTimeout(timeout);
    if (immediate) {
      var callNow = !timeout;
      timeout = setTimeout(function() {
        timeout = null;
      }, wait);
      if (callNow)
        typeof func2 === "function" && func2();
    } else {
      timeout = setTimeout(function() {
        typeof func2 === "function" && func2();
      }, wait);
    }
  }
  let timeoutArr = [];
  let flagArr = [];
  function throttle(fn, time = 500, isImmediate = true, timeoutName = "default") {
    if (!timeoutArr[timeoutName])
      timeoutArr[timeoutName] = null;
    if (isImmediate) {
      if (!flagArr[timeoutName]) {
        flagArr[timeoutName] = true;
        if (typeof fn === "function")
          fn();
        timeoutArr[timeoutName] = setTimeout(() => {
          flagArr[timeoutName] = false;
        }, time);
      }
    } else {
      if (!flagArr[timeoutName]) {
        flagArr[timeoutName] = true;
        timeoutArr[timeoutName] = setTimeout(() => {
          flagArr[timeoutName] = false;
          if (typeof fn === "function")
            fn();
        }, time);
      }
    }
  }
  function addStyle(customStyle, target = "object") {
    if (test.empty(customStyle) || typeof customStyle === "object" && target === "object" || target === "string" && typeof customStyle === "string") {
      return customStyle;
    }
    if (target === "object") {
      customStyle = trim(customStyle);
      const styleArray = customStyle.split(";");
      const style = {};
      for (let i = 0; i < styleArray.length; i++) {
        if (styleArray[i]) {
          const item = styleArray[i].split(":");
          style[trim(item[0])] = trim(item[1]);
        }
      }
      return style;
    }
    let string2 = "";
    for (const i in customStyle) {
      const key = i.replace(/([A-Z])/g, "-$1").toLowerCase();
      string2 += `${key}:${customStyle[i]};`;
    }
    return trim(string2);
  }
  let version = "1.10.1";
  const config = {
    v: version,
    version,
    // 主题名称
    type: [
      "primary",
      "success",
      "info",
      "error",
      "warning"
    ]
  };
  const zIndex = {
    toast: 10090,
    noNetwork: 10080,
    // popup包含popup，actionsheet，keyboard，picker的值
    popup: 10075,
    mask: 10070,
    navbar: 980,
    topTips: 975,
    sticky: 970,
    indexListSticky: 965
  };
  function wranning(str) {
    {
      formatAppLog("warn", "at uni_modules/vk-uview-ui/index.js:13", str);
    }
  }
  const $u = {
    queryParams,
    route,
    timeFormat,
    date: timeFormat,
    // 另名date
    timeFrom,
    colorGradient: colorGradient$1.colorGradient,
    colorToRgba: colorGradient$1.colorToRgba,
    guid,
    color,
    sys,
    os,
    type2icon,
    randomArray,
    wranning,
    get: http.get,
    post: http.post,
    put: http.put,
    "delete": http.delete,
    hexToRgb: colorGradient$1.hexToRgb,
    rgbToHex: colorGradient$1.rgbToHex,
    test,
    random,
    deepClone,
    deepMerge,
    getParent,
    $parent,
    addUnit,
    trim: trim$1,
    type: ["primary", "success", "error", "warning", "info"],
    http,
    toast,
    config,
    // uView配置信息相关，比如版本号
    zIndex,
    debounce,
    throttle,
    addStyle
  };
  uni.$u = $u;
  const install = (Vue2) => {
    Vue2.mixin(mixin);
    Vue2.config.globalProperties.$u = $u;
  };
  const uView = {
    install
  };
  let setPermission = {
    permissionList: uni.getStorageSync("permissionList") || [],
    hasP(enCode, menuIds) {
      if (!menuIds)
        return false;
      const list = setPermission.permissionList.filter((o) => o.modelId === menuIds);
      if (!list.length)
        return false;
      const columnList = list[0] && list[0].column ? list[0].column : [];
      if (!columnList.length)
        return false;
      const hasPermission = columnList.some((column) => column.enCode === enCode);
      if (hasPermission)
        return true;
      return false;
    },
    hasFormP(enCode, menuIds) {
      if (!menuIds)
        return false;
      const list = setPermission.permissionList.filter((o) => o.modelId === menuIds);
      if (!list.length)
        return false;
      const formList = list[0] && list[0].form ? list[0].form : [];
      if (!formList.length)
        return false;
      const hasPermission = formList.some((form) => form.enCode === enCode);
      if (hasPermission)
        return true;
      return false;
    },
    hasBtnP(enCode, menuIds) {
      if (!menuIds)
        return false;
      const list = setPermission.permissionList.filter((o) => o.modelId === menuIds);
      if (!list.length)
        return false;
      const btnList = list[0] && list[0].button ? list[0].button : [];
      if (!btnList.length)
        return false;
      const hasPermission = btnList.some((btn) => btn.enCode === enCode);
      if (hasPermission)
        return true;
      return false;
    }
  };
  function createApp() {
    const app = vue.createVueApp(App);
    app.use(store);
    app.use(uView);
    app.provide("define", define);
    app.config.globalProperties.$define = define;
    app.config.globalProperties.$request = request;
    app.config.globalProperties.$setPermission = setPermission;
    return {
      app
    };
  }
  const { app: __app__, Vuex: __Vuex__, Pinia: __Pinia__ } = createApp();
  uni.Vuex = __Vuex__;
  uni.Pinia = __Pinia__;
  __app__.provide("__globalStyles", __uniConfig.styles);
  __app__._component.mpType = "app";
  __app__._component.render = () => {
  };
  __app__.mount("#app");
})(Vue);
